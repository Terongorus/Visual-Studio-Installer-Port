<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation">
            <summary>
            An object that represents a code vulnerability annotation.
            </summary>
            <param name="Type">The type of vulnerability.</param>
            <param name="FallbackDisplayType">The name of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
            <param name="FallbackDisplayDescription">The description of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.#ctor(Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType,System.String,System.String)">
            <summary>
            An object that represents a code vulnerability annotation.
            </summary>
            <param name="Type">The type of vulnerability.</param>
            <param name="FallbackDisplayType">The name of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
            <param name="FallbackDisplayDescription">The description of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.Type">
            <summary>The type of vulnerability.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.FallbackDisplayType">
            <summary>The name of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.FallbackDisplayDescription">
            <summary>The description of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType">
            <summary>
            An enum representing the different types of code vulnerabilities that can be detected by Copilot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.Unknown">
            <summary>
            An unknown vulnerability type. Used as the default when the server returns a type that is not recognized by the client.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.PathInjection">
            <summary>
            Unvalidated input in path value creation risks unintended file/directory access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.SqlInjection">
            <summary>
            Unchecked input in database commands can alter intended queries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.CodeInjection">
            <summary>
            Treating external input as code without proper validation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.CommandLineInjection">
            <summary>
            Allowing user input in system calls without proper escaping can allow arbitrary command execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.StackTraceExposure">
            <summary>
            Error messages or stack traces can reveal sensitive details.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.IncompleteUrlSubstringSanitization">
            <summary>
            Unvalidated input in URLs risks syntax or behavior modification.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.FlaskDebug">
            <summary>
            Debug mode in Flask production allows arbitrary code execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClearTextLogging">
            <summary>
            Logging sensitive info like passwords by exposing it in clear text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.IncompleteHostnameRegularExpression">
            <summary>
            Regular expression may match unexpected hostnames.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ServerSideUnvalidatedUrlRedirection">
            <summary>
            Unvalidated URL redirection from a remote source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClientSideUnvalidatedUrlRedirection">
            <summary>
            Allowing unvalidated redirection based on user-specified URLs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.UnvalidatedUrlRedirection">
            <summary>
            Unvalidated URL redirection from a remote source.
            TODO: differentiate from ServerSideUnvalidatedUrlRedirection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.WeakCryptographicAlgorithm">
            <summary>
            Using weak encryption or hashing algorithms poses security risks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.WeakCryptographicKey">
            <summary>
            Using weak encryption or hashing algorithms poses security risks.
            TODO: Differentiate from WeakCryptographicAlgorithm.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ServerSideRequestForgery">
            <summary>
            Unvalidated input in HTTP requests may lead to SSRF (Server-Side Request Forgery) attacks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.BindSocketToAllInterfaces">
            <summary>
            Binding to all network interfaces may expose traffic interception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ReflectedCrossSiteScripting">
            <summary>
            Adding unvalidated user input to HTTP responses invites XSS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClearTextStorageFile">
            <summary>
            Storing sensitive data like passwords in clear text is insecure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClearTextStorageSensitiveData">
            <summary>
            Storing sensitive data like passwords in clear text is insecure.
            TODO: Differentiate from ClearTextStorageFile.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.TarSlip">
            <summary>
            Extracting tar archives without validation may lead to files being unexpectedly overwritten.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.HardcodedCredentials">
            <summary>
            Embedding credentials in source code risks unauthorized access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.InsecureRandomness">
            <summary>
            Weak random number generation can compromise security.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.InsufficientPasswordHash">
            <summary>
            Weak hashing algorithms for passwords poses security risks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.OverlyPermissiveFile">
            <summary>
            Permissions for files should be kept as strict as possible to prevent unintended access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.RegularExpressionInjection">
            <summary>
            Unvalidated user input used in regular expressions can lead to arbitrary code execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.SizeOfPointer">
            <summary>
            Incorrect usage of the sizeof operator on a pointer can lead to memory corruption or buffer overflow vulnerabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ConditionallyUninitializedVariable">
            <summary>
            Using a variable that may not have been initialized can lead to unpredictable behavior or crashes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Annotations.CopilotContentErrorType">
            <summary>
            Represents the type of error associated with a response.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Annotations.CopilotContentErrorType.Warning">
            <summary>
            Catch-all error type.
            This will display a generic error message and direct the user to the output logs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotErrorAnnotation">
            <summary>
            An object that represents a chat agent error annotation.
            </summary>
            <param name="Type">The type of error.</param>
            <param name="Message">The message of the agent error.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotErrorAnnotation.#ctor(Microsoft.VisualStudio.Copilot.Annotations.CopilotContentErrorType,System.String)">
            <summary>
            An object that represents a chat agent error annotation.
            </summary>
            <param name="Type">The type of error.</param>
            <param name="Message">The message of the agent error.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotErrorAnnotation.Type">
            <summary>The type of error.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotErrorAnnotation.Message">
            <summary>The message of the agent error.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotIPCodeCitationAnnotation">
            <summary>
            An object that represents an annotation for cited intellectual property.
            </summary>
            <param name="Snippet">The snippet of the code that is cited.</param>
            <param name="Url">The URL to the code snippet.</param>
            <param name="IPType">The type of intellectual property that is cited.</param>
            <param name="License">The license for the cited intellectual property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotIPCodeCitationAnnotation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            An object that represents an annotation for cited intellectual property.
            </summary>
            <param name="Snippet">The snippet of the code that is cited.</param>
            <param name="Url">The URL to the code snippet.</param>
            <param name="IPType">The type of intellectual property that is cited.</param>
            <param name="License">The license for the cited intellectual property.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotIPCodeCitationAnnotation.Snippet">
            <summary>The snippet of the code that is cited.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotIPCodeCitationAnnotation.Url">
            <summary>The URL to the code snippet.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotIPCodeCitationAnnotation.IPType">
            <summary>The type of intellectual property that is cited.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotIPCodeCitationAnnotation.License">
            <summary>The license for the cited intellectual property.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.AsyncProgress`1">
            <summary>
            A base implementation of progress that maintains <see cref="M:Microsoft.VisualStudio.Copilot.Internal.AsyncProgress`1.Report(`0)" /> order call to
            an <see cref="M:Microsoft.VisualStudio.Copilot.Internal.AsyncProgress`1.ReportAsync(`0,System.Threading.CancellationToken)">async implementation of Report</see>.
            </summary>
            <typeparam name="T">The type of progress to report.</typeparam>
            <remarks>
            As this is not JTF aware, creation and calls to must remain in the same
            <see cref="T:System.Threading.ExecutionContext">async flow</see> or risk deadlocks.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Internal.CopilotDescriptorConstants.CopilotServiceVersion">
            <summary>
            The latest version of the Copilot service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Internal.CopilotDescriptorConstants.AllResponderVersions">
            <summary>
            A list of all historical responder versions in descending order. Used to locate responders that are compatible with a given version.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.GptTextEncoder.TrimSuffixByTokenCount(System.String,System.Int32)">
            <summary>
            The function trimmed a piece of text by suffix based on token count needs to be preserved
            </summary>
            <param name="text">Text to be trimmed by suffix based on token count</param>
            <param name="count">Max token count to be preserved</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.GptTextEncoder.TrimSuffixByTokenCountAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.GptTextEncoder.TrimPrefixByTokenCount(System.String,System.Int32)">
            <summary>
            The function trimmed a piece of text by prefix based on token count needs to be preserved
            </summary>
            <param name="text">Text to be trimmed by prefix based on token count</param>
            <param name="count">Max token count to be preserved</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.GptTextEncoder.TrimPrefixByTokenCountAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.Formatters.DictionaryStringObjectFormatter">
            <summary>
            A formatter that is hard-coded to use the <see cref="T:MessagePack.Formatters.TypelessFormatter" /> for values in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.TypelessMessagePackDescriptor.TypelessDescriptorMessagePackOptions">
             <summary>
             This options class is used to override LoadType to ensure type loads occur on the AssemblyLoadContext
             that loaded Copilot assemblies.
            
             In case of ServiceHub and extensibility scenarios, this will be extensions load context which will be able to resolve
             assemblies deployed by the extension.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.TypelessMessagePackDescriptor.CompositeTracingStrategy">
            <summary>
            A class that serves as a collection <see cref="T:StreamJsonRpc.IActivityTracingStrategy" /> instances to handle
            multiple tracing strategies.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.TypelessMessagePackDescriptor.CompositeTracingStrategy.CompositeDisposable">
            <summary>
            A class that holds as a collection of <see cref="T:System.IDisposable" /> objects that can be disposed
            when the <see cref="T:Microsoft.VisualStudio.Copilot.Internal.TypelessMessagePackDescriptor.CompositeTracingStrategy.CompositeDisposable" /> object is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.TypelessMessagePackDescriptor.DistributedContextPropagatorTracingStrategy">
            <summary>
            A class that represents a tracing strategy that uses the object set in <see cref="P:System.Diagnostics.DistributedContextPropagator.Current" />.
            If <see cref="P:System.Diagnostics.DistributedContextPropagator.Current" /> is not set or does not implement <see cref="T:StreamJsonRpc.IActivityTracingStrategy" />,
            then this strategy does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation">
            <summary>
            Represents a command invocation action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation.#ctor(System.String,Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation" /> class.
            </summary>
            <param name="name">The name of the command to invoke. This name should be unique within the service represent by <paramref name="providerMoniker" />.</param>
            <param name="providerMoniker">The service moniker of the service which provides the command handler. <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler" /></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation.Name">
            <summary>
            Gets the name of the command to invoke.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation.ProviderMoniker">
            <summary>
            Gets the service moniker of the service which provides the command handler. <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation.Arguments">
            <summary>
            Gets the arguments for this command.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentOptions">
            <summary>
            Options used during provide command for <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentCodePart" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentOptions.HideDefaultCommands">
            <summary>
            Gets a value indicating whether the provided command can work with the default commands.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler">
            <summary>
            Defines a user provided command.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteChanged">
            <summary>
            An event to notify consumers that the value of <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteAsync(Microsoft.VisualStudio.Copilot.CopilotCommandInvocation,System.Threading.CancellationToken)" /> might have changed.
            Consumers should call <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteAsync(Microsoft.VisualStudio.Copilot.CopilotCommandInvocation,System.Threading.CancellationToken)" /> after receiving this event to check the current value.
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteAsync(Microsoft.VisualStudio.Copilot.CopilotCommandInvocation,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.ExecuteAsync(Microsoft.VisualStudio.Copilot.CopilotCommandInvocation,System.Threading.CancellationToken)">
            <summary>
            Executes the provided command.
            </summary>
            <remarks> Due to the asynchronous nature of the method, a 'false' return value from <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteAsync(Microsoft.VisualStudio.Copilot.CopilotCommandInvocation,System.Threading.CancellationToken)" /> does not guarantee that
            this method will not be called.
            Therefore, implementations should ensure internal validation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteAsync(Microsoft.VisualStudio.Copilot.CopilotCommandInvocation,System.Threading.CancellationToken)">
            <summary>
            Determines whether the provided command can execute. <seealso cref="E:Microsoft.VisualStudio.Copilot.ICopilotCommandHandler.CanExecuteChanged" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContentExtensions.ToMarkdown(Microsoft.VisualStudio.Copilot.CopilotInteraction)">
            <summary>
            Convert the content of this interaction to Markdown, removing and replacing mentions.
            </summary>
            <param name="self">The interaction to convert.</param>
            <returns>A markdown formatted string of <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Content" />.</returns>
            <remarks>
            This promptifies the content of the interaction, removing agent and command mentions
            and replacing context mentions with links to the context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContentExtensions.ToMarkdown(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CopilotContentPart},Microsoft.VisualStudio.Copilot.CopilotInteraction)">
            <summary>
            Convert this content to Markdown, removing and replacing mentions of <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" /> from the <paramref name="interaction" />.
            </summary>
            <param name="self"></param>
            <param name="interaction">The interaction to check mentions of context against.</param>
            <returns>A markdown formatted string of the content.</returns>
            <remarks>
            This promptifies this content, removing agent and command mentions
            and replacing context mentions with links to the context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContentExtensions.ToMarkdown(Microsoft.VisualStudio.Copilot.CopilotContentPart,Microsoft.VisualStudio.Copilot.CopilotInteraction)">
            <summary>
            Convert this content to Markdown, removing and replacing mentions of <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" /> from the <paramref name="interaction" />.
            </summary>
            <param name="part"></param>
            <param name="interaction">The interaction to check mentions of context against.</param>
            <returns>A markdown formatted string of the content.</returns>
            <remarks>
            This promptifies this content, removing agent and command mentions
            and replacing context mentions with links to the context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContentExtensions.ToMarkdownUri(Microsoft.VisualStudio.Copilot.CopilotMention)">
            <summary>
            Converts the mention string into a uri for markdown.
            </summary>
            <param name="self">The mention to convert.</param>
            <returns>A markdown uri of the mention.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotActionId">
            <summary>
            Strongly typed identifier for a copilot action (confirmation, function, etc).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActionId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotActionId" /> struct.
            </summary>
            <param name="id">Unique for the action.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotActionId.Id">
            <summary>
            Gets the unique identifier for the action.
            </summary>
            <remarks>
            This should be the matchable to the identifier that the endpoint provides when indicating an action.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActionId.New">
            <summary>
            Creates a new action id with a generated identifier.
            </summary>
            <returns>An action id with a new guid as the id.</returns>
            <remarks>
            When proffering actions from an endpoint, prefer their ID. However, if you are manually creating
            your own actions, use this to easily generate a new ID.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentMention">
            <summary>
            Represents an agent mention in some source text, ex: @agent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotAgentMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentMention" /> class.
            </summary>
            <param name="span">The span of the original mention location.</param>
            <param name="inputs">The inputs that make up the mention.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentMention.ShortName">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.ShortName" /> of the agent mentioned.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCodeSnippet">
            <summary>
            Represents a single code snippet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCodeSnippet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCodeSnippet" /> class.
            </summary>
            <param name="content">The content of the code snippet.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeSnippet.Content">
            <summary>
            Gets the content of the code snippet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCommandMention">
            <summary>
            Represents a command mention in some source text, ex: /command
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCommandMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCommandMention" /> class.
            </summary>
            <param name="span">The location of the mention in the original prompt text.</param>
            <param name="inputs">The input parts of the mention.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCommandMention.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotConfirmation">
            <summary>
            Represents users action on a Copilot confirmation and indicates the current state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotConfirmation.#ctor(Microsoft.VisualStudio.Copilot.CopilotActionId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotConfirmation" /> class.
            </summary>
            <param name="id">Confirmation identifier being responded to.</param>
            <param name="title">The title or primary question of the confirmation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotConfirmation.Title">
            <summary>
            Gets the title or primary question of the confirmation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotConfirmation.Description">
            <summary>
            Gets the extended description of the confirmation to show to the user, if any. Supports Markdown.
            </summary>
            <remarks>
            Use this place to supply details to the user about what exact actions will be taken.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotConfirmation.Status">
            <summary>
            Gets the state of the confirmation request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotConfirmation.AdditionalData">
            <summary>
            Gets the optional additional data attached to a confirmation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotConfirmationStatus">
            <summary>
            Status of a Copilot confirmation request.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentAction">
            <summary>
            Base class for content actions like function calls or confirmations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentAction.#ctor(Microsoft.VisualStudio.Copilot.CopilotActionId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentAction" /> class.
            </summary>
            <param name="id">The unique id for this action.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentAction.Id">
            <summary>
            Gets the id for this action.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentCodePart">
            <summary>
            Represents a piece of content that is specifically code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentCodePart" /> class.
            </summary>
            <param name="id">The id of this content part.</param>
            <param name="code">The code content.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentCodePart" /> class.
            </summary>
            <param name="code">The code content.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.Language">
            <summary>
            Gets the language this code is in, if one has been provided. This is the formal name of the language, i.e. C#, Java, and others listed in <see cref="T:Microsoft.VisualStudio.Copilot.LanguageNames" />.
            </summary>
            <remarks>If this is null, this was not available at the time of creation.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.LanguageMarkdownIdentifier">
            <summary>
            Gets the markdown identifier for the language this code is in, if one has been provided. Use this for Markdown code block rendering. This may be different from what is set as <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.Language" />, depending on what Markdown uses.
            </summary>
            <remarks>If this is null, this was not available at the time of creation.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.IsRefinement">
            <summary>
            Gets a value indicating whether this code part is considered code to be applied.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.File">
            <summary>
            Gets a file name or path if one is associated with this code content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.Options">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentOptions" /> to apply to this code content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.Commands">
            <summary>
            Gets user provided commands that are associated with this code content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentCommand">
            <summary>
            Represents a command/action that can be attached to Copilot responses to be invoked by the end user. <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCommandInvocation" />..
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentCommand.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotCommandInvocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentCommand" /> class.
            </summary>
            <param name="displayName">The localized display name of the command which will be shown on UI.</param>
            <param name="command">The command invocation which describe the command.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCommand.DisplayName">
            <summary>
            Gets the localized display name of this command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCommand.DisplayDescription">
            <summary>
            Gets the localized display description of this command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCommand.Command">
            <summary>
            Gets the command invocation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentConfirmationPart">
            <summary>
            A content part representing a confirmation for user to approve/reject for an action to be taken by the responder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentConfirmationPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,Microsoft.VisualStudio.Copilot.CopilotConfirmation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentConfirmationPart" /> class.
            </summary>
            <param name="id">The id of this content part.</param>
            <param name="confirmation">The confirmation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentConfirmationPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotConfirmation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentConfirmationPart" /> class.
            </summary>
            <param name="confirmation">The confirmation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentConfirmationPart.Confirmation">
            <summary>
            Gets the confirmation instance for user to act on.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart">
            <summary>
            Represents a piece of content that contains a list of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFileSnippets" /> and an associated name for the list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFileSnippets})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart" /> class.
            </summary>
            <param name="id">The id of this content part.</param>
            <param name="name">The name of the file list.</param>
            <param name="files">The files in the list.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFileSnippets})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart" /> class.
            </summary>
            <param name="name">The name of the file list.</param>
            <param name="files">The files in the list.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart.Name">
            <summary>
            Gets the name of the file list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentFileListPart.Files">
            <summary>
            Gets the files in the list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentFollowUpPart">
            <summary>
            Represents a set of follow up prompts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentFollowUpPart.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFollowUp})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentFollowUpPart" /> class.
            </summary>
            <param name="followUps">The follow ups.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentFollowUpPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFollowUp})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentFollowUpPart" /> class.
            </summary>
            <param name="id">The id of this content part.</param>
            <param name="followUps">The follow ups.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart" /> class.
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart" /> class.
            </summary>
            <param name="id">The content part id.</param>
            <param name="function"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart.Function">
            <summary>
            Gets the function invocation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart.Confirmation">
            <summary>
            Gets the confirmation for this function if there was one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart.ConfirmationRequirement">
            <summary>
            Gets the confirmation requirement for this function call.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentFunctionPart.Result">
            <summary>
            Gets the result of the function call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentImagePart">
            <summary>
            Represents an image.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.#ctor(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentImagePart" /> class.
            </summary>
            <param name="data">The image data.</param>
            <param name="mimeType">The mime type of the image.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentImagePart" /> class.
            </summary>
            <param name="id">The id for this content part.</param>
            <param name="data">The image data.</param>
            <param name="mimeType">The mime type of the image.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,Microsoft.VisualStudio.Copilot.CopilotContentVisibility,System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentImagePart" /> class.
            </summary>
            <param name="id">The id for this content part.</param>
            <param name="visibility">The visibility of this content part.</param>
            <param name="data">The image data.</param>
            <param name="mimeType">The mime type of the image.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.Data">
            <summary>
            Gets the data of the image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.MimeType">
            <summary>
            Gets the mime type of the image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.Width">
            <summary>
            Gets the image width.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.Height">
            <summary>
            Gets the image height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.Base64Uri">
            <summary>
            Gets the base64 URI of the image.
            </summary>
            <remarks>
            This property is a computed property based off of the <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.MimeType" /> and <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContentImagePart.Data" /> properties. Once computed the value will be cached.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart">
            <summary>
            Represents a section of Markdown formatted text content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart" /> class.
            </summary>
            <param name="content">The markdown content of this part.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart" /> class.
            </summary>
            <param name="id">The id of this content part.</param>
            <param name="content">The markdown content of this part.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.Mentions">
            <summary>
            Gets parsed mentions present in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContentTextPart.Content" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.Equals(Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentPart.Id">
            <summary>
            Gets the id of the content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentPart.Visibility">
            <summary>
            Gets the visibility of the content part for controlling what gets shown to the model or the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentPart.Annotations">
            <summary>
            Gets the annotations associated with this part.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentPartId">
            <summary>
            A message-local identifier for individual content parts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart">
            <summary>
            Represents a progress item that will persist in its final form.
            </summary>
            <remarks>
            A progress part differs from setting a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotPartStatus">part status</see>
            where <see cref="T:Microsoft.VisualStudio.Copilot.CopilotPartStatus" /> only indicates whether the parts content is expected to
            update, a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart" /> defines a content representation of an
            actual task. The task that occurred is the content, so the final state will be preserved
            and presented to the user.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart" /> class.
            </summary>
            <param name="id">The id for this content part.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart.State">
            <summary>
            Gets the current state message, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart.Description">
            <summary>
            Gets an extended description of the current state, such as more details for what actions were taken, in limited Markdown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart.Status">
            <summary>
            Gets the status of this progress item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentTextPart">
            <summary>
            Represents a plain text piece of content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentTextPart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentTextPart" /> class.
            </summary>
            <param name="text">The text content of the part.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentTextPart.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentTextPart" /> class.
            </summary>
            <param name="id">The id for this content part.</param>
            <param name="text">The text content of the part.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentTextPart.Content">
            <summary>
            Gets the text content of this content part.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContentVisibility.Model">
            <summary>
            This content is visible to models and will be included in any submitted prompts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContentVisibility.User">
            <summary>
            This content is visible to the user and can be included in any UI representation of it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContentVisibility.All">
            <summary>
            This content is visible to both the user through the UI and to the model.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextMention">
            <summary>
            Represents a context mention in some source text, ex: #file:`File.cs`
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextMention" /> class.
            </summary>
            <param name="span"></param>
            <param name="inputs"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextMention.IsExcluded">
            <summary>
            Gets a value indicating whether the context mention should be excluded or not
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFileSnippets">
            <summary>
            Represents a collection a code snippets associated with a file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFileSnippets.Path">
            <summary>
            Gets the file name or path associated with this code content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFileSnippets.Snippets">
            <summary>
            Gets the code snippets associated with this file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFileSnippets.Accepted">
            <summary>
            Gets a value indicating whether the user has accepted at least one of the snippets.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments">
            <summary>
            Represents the arguments for a Copilot function.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments.MapTo(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor})">
            <summary>
            Maps current arguments into a dictionary that abide by the given <paramref name="inputDescriptors" />.
            </summary>
            <param name="inputDescriptors">The input descriptors to map the arguments to.</param>
            <returns>The mapped dictionary</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments.ToJson">
            <summary>
            Json version of arguments to be shown to a model.
            </summary>
            <returns>The json version of the arguments.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments.FromJson(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments" /> from the given json.
            </summary>
            <param name="json">The json to create the arguments from.</param>
            <returns>The created arguments.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments.From(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments" /> from the given object.
            </summary>
            <param name="obj">The object to create the arguments from.</param>
            <returns>The created arguments.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments.JsonFunctionArguments.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionArguments.JsonFunctionArguments" /> class.
            </summary>
            <param name="json">Json of the arguments</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation">
            <summary>
            Represents a function invocation action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation.#ctor(Microsoft.VisualStudio.Copilot.CopilotActionId,System.String,Microsoft.VisualStudio.Copilot.CopilotFunctionArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation" /> class.
            </summary>
            <param name="id">The id of this function invocation.</param>
            <param name="name">The name of the function to invoke.</param>
            <param name="arguments">The arguments to the function.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotFunctionArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation" /> class.
            </summary>
            <param name="name">The name of the function to invoke.</param>
            <param name="arguments">The arguments to the function.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation.Name">
            <summary>
            Gets the name of this function.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Name" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation.Arguments">
            <summary>
            Gets the arguments for this function.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMention">
            <summary>
            Base class for mentions in request and response content.
            </summary>
            <remarks>
            <para>
            This is the base class for the various types of mentionables:
            1. Agents
            2. Context
            3. Commands
            4. Variables
            </para>
            <para>
            Mentionables share a few characteristics:
            1. They all have a leading syntax character.
            2. They accept inputs.
            </para>
            <para>
            If the parsed mention type has a name, it will be in the first <see cref="P:Microsoft.VisualStudio.Copilot.CopilotMention.Inputs">input</see>.
            Mentions have two phases: Parsed and Queried. Parsing does not determine the presence of the mentioned item,
            only its syntax. Querying is implemented internally and takes a variety of paths to display or determine
            presence before invocation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMention" /> class.
            </summary>
            <param name="span"></param>
            <param name="inputs"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Span">
            <summary>
            Gets the span for the full mention content in the original text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Inputs">
            <summary>
            Gets the inputs that make up the mention.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Symbol">
            <summary>
            Gets the leading symbol for this mention.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.Equals(Microsoft.VisualStudio.Copilot.CopilotMention)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.ContextSymbol">
            <summary>
            The leading symbol for context mentions: #
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.ScopeSymbol">
            <summary>
            The leading symbol for scope mentions: #
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.AgentSymbol">
            <summary>
            The leading symbol for agent mentions: @
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.CommandSymbol">
            <summary>
            The leading symbol for command mentions: /
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.VariableSymbol">
            <summary>
            The leading symbol for external variables: !
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.InputSeparatorSymbol">
            <summary>
            The symbol to separate inputs: :
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.InputQuoteSymbol">
            <summary>
            The quotation symbol for inputs: '
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.InputEscapeSymbol">
            <summary>
            The input character escape symbol: \
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.punctuation">
            <summary>
            These symbols are treated as punctuation so they will be escaped and end the parsing of a reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.ToString(Microsoft.VisualStudio.Copilot.CopilotMentionType,System.String[])">
            <summary>
            Creates the raw string syntax for a mention.
            </summary>
            <param name="type">The type of mention.</param>
            <param name="inputs">The input parts to the mention.</param>
            <returns>The raw string format of the mention.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.EscapeInput(System.String)">
            <summary>
            Takes an individual mention input and escapes it.
            </summary>
            <param name="input">The original input.</param>
            <returns>An escaped version of <paramref name="input" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.UnescapeInput(System.String)">
            <summary>
            Takes an escaped individual mention input and returns the unescaped version.
            </summary>
            <param name="input">The escaped input to unescape.</param>
            <returns>An unescaped version of <paramref name="input" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMentionType">
            <summary>
            The type of mention.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Unknown">
            <summary>
            The mention type is not yet known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Context">
            <summary>
            The mention refers to a piece of context or a scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Command">
            <summary>
            The mention refers to a top level or agent command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Agent">
            <summary>
            The mention refers to a specific agent.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Variable">
            <summary>
            The mention refers to a variable that a responder will handle.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotProgress">
            <summary>
            Represents the progress of a work item (such as a function call).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotProgress.#ctor(Microsoft.VisualStudio.Copilot.CopilotProgressStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotProgress" /> class.
            </summary>
            <param name="status"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotProgress.State">
            <summary>
            Gets the current state of progress to show to the user, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotProgress.Description">
            <summary>
            Gets an extended description of the current state to show to the user (as limited Markdown), such as more details for what actions were taken.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotProgress.Status">
            <summary>
            Gets the progress status.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotProgressStatus">
            <summary>
            States for progress.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotProgressStatus.Pending">
            <summary>
            Work item is in unknown or progress state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotProgressStatus.Completed">
            <summary>
            Work item is complete.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotProgressStatus.Error">
            <summary>
            Work item exited with an error.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedAgentMention">
            <summary>
            Represents a resolved agent mention.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentMention" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedAgentMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedAgentMention" /> class.
            </summary>
            <param name="providerMoniker">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable" /> that provided this queryable mention.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedAgentMention.Type">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedCommandMention">
            <summary>
            Represents a resolved command mention.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotCommandMention" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedCommandMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedCommandMention" /> class.
            </summary>
            <param name="providerMoniker">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable" /> that provided this queryable mention.</param>
            <param name="commandName">The name of this command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedCommandMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedCommandMention" /> class.
            </summary>
            <param name="providerMoniker">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable" /> that provided this queryable mention.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedCommandMention.Type">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedVariableMention">
            <summary>
            Represents a queried variable mention.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotVariableMention" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedVariableMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedVariableMention" /> class.
            </summary>
            <param name="providerMoniker">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable" /> that provided this queryable mention.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedVariableMention.Type">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotRetryRequestType">
            <summary>
            Types of retry requests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotRetryRequestType.Standard">
            <summary>
            A standard retry request without modifications.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotRetryRequestType.Edited">
            <summary>
            Indicates that the retry was triggered after modifying the request references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSpan.GetContent(System.String)">
            <summary>
            Gets the span content from the original source text.
            </summary>
            <param name="source">The source text to extract the span content from.</param>
            <returns>The span content from the original source text.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSpan.Contains(Microsoft.VisualStudio.Copilot.CopilotSpan)">
            <summary>
            Determines if a given span is within this span.
            </summary>
            <param name="span">The span to check.</param>
            <returns><see langword="true" /> if the given span is within this one.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotVariableMention">
            <summary>
            Represents a variable mention in some source text, ex: !variable
            </summary>
            <remarks>
            Variables are agent-surfaced mentionables with no defined purpose. The agent can handle them
            in any way it likes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotVariableMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotVariableMention" /> class.
            </summary>
            <param name="span">The span of the original mention location.</param>
            <param name="content">The content of the mention.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotVariableMention.Variable">
            <summary>
            Gets the contents of the variable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotContent">
            <summary>
            Represents a piece of content used in a request/response interaction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotTextContent">
            <summary>
            Represents a piece of content that contains text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ICopilotTextContent.Content">
            <summary>
            Gets text representation of the content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ContextAugmentationExtensions">
            <summary>
            Provides extension methods for augmenting <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> instances with traits.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContextAugmentationExtensions.WithTraitsAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Asynchronously augments a single <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> with a list of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTrait" />.
            </summary>
            <param name="context">The <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> to add traits into.</param>
            <param name="serviceBroker">The service broker to use for obtaining the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotInteractionService" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the augmented <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContextAugmentationExtensions.WithTraitsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Asynchronously augments a single <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> with a list of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTrait" />.
            </summary>
            <param name="contexts">The list of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> to add traits into.</param>
            <param name="serviceBroker">The service broker to use for obtaining the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotInteractionService" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the augmented <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContext">
            <summary>
            Represents an individual piece of context to include with a request or pass between functions.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Copilot.CopilotContextDescriptor,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> class.
            </summary>
            <param name="providerMoniker">The moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> service.</param>
            <param name="memberDescriptor">Context descriptor to retrieve member name and copilot type name.</param>
            <param name="requestId">The associated request for this context.</param>
            <param name="value">The actual serializable object representing the context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> class.
            </summary>
            <param name="providerMoniker">The moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> service.</param>
            <param name="member">The specific member on the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> that this originates from.</param>
            <param name="requestId">The associated request for this context.</param>
            <param name="copilotTypeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes" />.</param>
            <param name="value">The actual serializable object representing the context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotTypeName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> class.
            </summary>
            <param name="providerMoniker">The moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> service.</param>
            <param name="member">The specific member on the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> that this originates from.</param>
            <param name="requestId">The associated request for this context.</param>
            <param name="typeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes" />.</param>
            <param name="value">The actual serializable object representing the context.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Id">
            <summary>
            Gets the identifier for this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.ProviderMoniker">
            <summary>
            Gets the name of the provider that generates and manages this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Source">
            <summary>
            Gets the name of the source component that proffers this context.
            </summary>
            <remarks>
            Used mostly for validation and telemetry purposes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Relevance">
            <summary>
            Gets the relevance of this context
            </summary>
            <remarks>
            Primarily used to prioritize amongst multiple contexts.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Member">
            <summary>
            Gets the name of the provider member this context is from.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.CanReduce">
            <summary>
            Gets a value indicating whether the context is potentially reducible.
            </summary>
            <remarks>
            This can be speculative; if it is too expensive to determine this at context construction
            but an attempt can be made, set to <see langword="true" />.
            </remarks>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextReducer.ReduceAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.VisualStudio.Copilot.CopilotReductionOptions,Microsoft.VisualStudio.Copilot.ICopilotTokenCounter,System.Threading.CancellationToken)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.RequestId">
            <summary>
            Gets the request id for this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Reference">
            <summary>
            Gets an identifying reference present in a request that relates to this piece of context.
            </summary>
            <remarks>
            The value of a piece of context can vary dependent on its inputs.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Traits">
            <summary>
            Gets the list of traits associated with this context.
            </summary>
            <remarks>
            The number of traits discovered for a context can vary dependent on the trait providers available.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.IsEphemeral">
            <summary>
            Gets a value indicating whether the context is ephemeral.
            </summary>
            <remarks>
            Ephemeral context is only included on the request it is originally generated for and is not re-attached
            to future chat requests as part of history. The context object will still be stored in history as a
            record of its existence in prior chat requests for rendering in the UI.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.Equals(Microsoft.VisualStudio.Copilot.CopilotContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor">
            <summary>
            Describes an individual member of context.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotTypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> class.
            </summary>
            <param name="name">The name of the context member.</param>
            <param name="description">A simple description of the member.</param>
            <param name="typeName">The Copilot type name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotTypeName,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotInputDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> class.
            </summary>
            <param name="name">The name of the context member.</param>
            <param name="description">A model-visible description of the member.</param>
            <param name="typeName">The Copilot type name.</param>
            <param name="inputs">Potential inputs to constrain the values from this member; required inputs must appear before non-required inputs.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> class.
            </summary>
            <param name="name">The name of the context member.</param>
            <param name="description">A simple description of the member.</param>
            <param name="type">The Copilot type name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotInputDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> class.
            </summary>
            <param name="name">The name of the context member.</param>
            <param name="description">A simple description of the member.</param>
            <param name="type">The Copilot type name.</param>
            <param name="inputs">Potential inputs to constrain the values from this member.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name">
            <summary>
            Gets the name of this piece of context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Description">
            <summary>
            Gets the description of what this piece of context provides.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.TypeName">
            <summary>
            Gets the data type that this context provides.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Inputs">
            <summary>
            Gets the possible inputs that can be passed to this particular context member to augment the resulting value further.
            </summary>
            <example>
            For a document context, range might be an input to pre-constrain a document to only a selected region.
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextEvaluation">
            <summary>
            Represents an evaluation of context to its reduced and promptified form.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextEvaluation.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextEvaluation" /> class.
            </summary>
            <param name="finalContext">The final list of utilized context.</param>
            <param name="prompt">The full context prompt representing <paramref name="finalContext" />.</param>
            <param name="tokens">The total token count of <paramref name="prompt" />.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextEvaluation.FinalContext">
            <summary>
            Gets the final reduced list of context objects that are represented in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotPromptification.Prompt" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextId">
            <summary>
            Represents an identifier for a single instance of context maintained through reduction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextRelevance">
            <summary>
            Defines the relevance of a piece of context and how it was added to the request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContextRelevance.Unknown">
            <summary>
            Unknown relevance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContextRelevance.Referred">
            <summary>
            The context was referred to the user by mention or attachment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContextRelevance.Inferred">
            <summary>
            The context was inferred by heuristic or by function.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContextRelevance.Related">
            <summary>
            The context was included due to its relationship to the prompt or to other pieces of context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContextRelevance.State">
            <summary>
            The context was included as an indication of IDE or other state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext">
            <summary>
            Defines the context for a diagnostic.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext" /> class.
            </summary>
            <param name="filePath">The diagnostic file path.</param>
            <param name="errorCode">The error code of the diagnostic.</param>
            <param name="description">The description of the diagnostic.</param>
            <param name="line">The line where the diagnostic occurs.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.FilePath">
            <summary>
            Gets the file path for the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.Microsoft#VisualStudio#Copilot#ICopilotContextFiles#FilesPaths">
            <summary>
            Gets the files paths for the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.ErrorCode">
            <summary>
            Gets the error code of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.Description">
            <summary>
            Gets the description of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.Line">
            <summary>
            Gets the line number of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.CodeSnippet">
            <summary>
            Gets the code snippet associated with the diagnostic.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMentionQuery">
            <summary>
            Represents a query for potential matching mentionables.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.#ctor(Microsoft.VisualStudio.Copilot.CopilotMentionType,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMentionQuery" /> class.
            </summary>
            <param name="type">The type of query.</param>
            <param name="inputs">The inputs into the query.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.Type">
            <summary>
            Gets the type of mentions being queried for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.Inputs">
            <summary>
            Gets the ordered inputs from a query split from the separators.
            </summary>
            <remarks>
            Note that the first argument can either be the member being referenced (#file:) or
            the name of the search query (#File.cs).
            </remarks>
            <example>
            For the user input #file:'File.cs':15, the inputs will be:
            [0] = file
            [1] = File.cs
            [2] = 15
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.SessionId">
            <summary>
            Gets the copilot session identifier if the completion belongs to a specific session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.SkipExclusions">
            <summary>
            Gets a value indicating whether the query needs to skip exclusion checks or not.
            </summary>
            <remarks>Temporary flag to enable skipping the exclusions,for the sake of performance, to be enabled only for UI purposes</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotPromptOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotLanguageModel,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotPromptOptions" /> class.
            </summary>
            <param name="model">The model that the prompt will be sent to.</param>
            <param name="tokenBudget">The token budget for the prompt.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptOptions.Model">
            <summary>
            Gets the model used for this prompt.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptOptions.TokenBudget">
            <summary>
            Gets the token budget for this prompt.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptOptions.IncludeEphemeralContext">
            <summary>
            Gets a value indicating whether to include ephemeral context in the prompt.
            </summary>
            <remarks>
            The default value is true, but when rendering a prompt for a prior (historical) request,
            this should be set to false.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention">
            <summary>
            Represents a piece of context that can requested later.
            </summary>
            <remarks>
            <para>
            In order to get the actual <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> object this queried item is to represent,
            the <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.Member" /> and <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Inputs" /> are passed to
            <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)" />.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention" /> class.
            </summary>
            <param name="providerMoniker">The context provider moniker providing this context.</param>
            <param name="member">The member providing this context.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Copilot.CopilotContextDescriptor,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention" /> class.
            </summary>
            <remarks>
            This constructor handles building the full name of the context mention from the <paramref name="descriptor" />
            and <paramref name="inputs" />. Inputs are processed in order as defined in the context descriptor until all are
            processed or the first non-required input is not found. The <see cref="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value" />s in the inputs
            are stringified via <see cref="M:System.Object.ToString" />.
            </remarks>
            <param name="providerMoniker">The context provider moniker providing this context.</param>
            <param name="descriptor">The descriptor of the member providing this context.</param>
            <param name="inputs">The inputs used to generate this mention.</param>
            <param name="displayName">The display name.</param>
            <exception cref="T:System.ArgumentException">Thrown when a required input is missing for the context descriptor.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when an input value for the context descriptor is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.Member">
            <summary>
            Gets the member used to generate this context.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(System.Threading.CancellationToken)" />
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.IsExcluded">
            <summary>
            Gets a value indicating whether the referenced mention is excluded from the context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedMention">
            <summary>
            Represents a mention that can be displayed or queried later.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedMention" /> class.
            </summary>
            <param name="providerMoniker">The provider moniker providing this mention.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Type">
            <summary>
            Gets the type of mention.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.DisplayName">
            <summary>
            Gets the name to display for this query item.
            </summary>
            <example>
            1. File.cs:15-20.
            2. Exception
            </example>
            <remarks>
            The display name for a mentioned item should either represent the name/member of the mentionable being
            referenced (ex. exception) or the identifier for a particular set of inputs to a member (ex. File.cs).
            As such, the display name should not be localized as it is either the same name as a user recognizes,
            or it will match what is inserted into the prompt.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.FullName">
            <summary>
            Gets the full string to be inserted into the prompt, minus trigger characters.
            </summary>
            <remarks>
            The string here must be fully parseable to the exact context.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Description">
            <summary>
            Gets a small additional bit of description to display to the user.
            </summary>
            <example>
            Current document.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Tooltip">
            <summary>
            Gets optional more detailed information to display to the user in a tooltip when selected in the completions list,
            otherwise the display name plus the description is shown.
            </summary>
            <remarks>
            This value is displayed to the user, so ensure it is appropriately localized.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Icon">
            <summary>
            Gets an icon to display next to the query items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.IsNavigable">
            <summary>
            Gets a value indicating whether the referenced mention can be navigated to/opened.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Priority">
            <summary>
            Gets a priority for this item. Defaults to <see cref="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.None" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.ProviderMoniker">
            <summary>
            Gets the name of the provider that generated this mention.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Inputs">
            <summary>
            Gets the inputs used to generate this mention.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Inputs" />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.None">
            <summary>
            No priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.Low">
            <summary>
            Some prioritization, for items that currently visible.
            </summary>
            <example>
            Files that are open, but not focused.
            </example>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.High">
            <summary>
            High prioritization, for items that are an area of focus for the user.
            </summary>
            <example>
            The file of focus or the current exception.
            </example>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.Selection">
            <summary>
            Selection prioritization, for items that are selected by the user.
            </summary>
            <example>
            The section of a document highlighted by the user.
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention">
            <summary>
            Represents a query into a scope.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotScope" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention" /> class.
            </summary>
            <param name="providerMoniker"></param>
            <param name="fullName"></param>
            <param name="displayName"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention.Type">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotReductionOptions">
            <summary>
            Options for guiding content or context reduction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Budget">
            <summary>
            Gets the number of tokens available.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Model">
            <summary>
            Gets the model used for the request.
            </summary>
            <remarks>
            Since counting tokens to reduce the context depends on the model
            that the request was made with, this should be used to ensure
            the correct amount of tokens are counted.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Request">
            <summary>
            Gets the copilot request.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.CopilotRendering">
            <summary>
            Represents the base rendering output for a render call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.CopilotTextRendering">
            <summary>
            Represents the text rendering version of a Copilot rendering.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.CopilotTextRendering.Content">
            <summary>
            Gets the text rendering content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.ICopilotCompletionContextProvider">
            <summary>
            Provider that provides relevant context for Copilot completions.
            Must be exported with the <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute">ContentType</see> attribute for the content type it supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.ICopilotCompletionContextProvider.Id">
            <summary>
            Gets the unique identifier for this context provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.ICopilotCompletionContextProvider.IsEnabled">
            <summary>
            Gets a value indicating whether this context provider is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.ICopilotCompletionContextProvider.GetContextItemsAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of context items asynchronously for a given document.
            </summary>
            <param name="documentContext">Provides the necessary information about the document for which context items are being retrieved.</param>
            <param name="cancellationToken">Allows the operation to be canceled if needed.</param>
            <returns>An asynchronous enumerable collection of context items related to the specified document.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext">
            <summary>
            Represents a collection of relevant information needed to handle a Copilot completion context request.
            </summary>
            <param name="FilePath">The path of the document in which the completion was triggered.</param>
            <param name="Position">The cursor position within the document where the completion was triggered.</param>
            <param name="LanguageId">Identifies the programming language of the document.</param>
            <param name="Version">Denotes the version number of the document.</param>
            <param name="TextSnapshot">The snapshot for the document when the completion was triggered. Provider should use the content from snapshot if one is available.</param>
            <param name="featureFlags">featureFlags that are current active. The value could be of type `string`, `int`, `bool` or `string[]`.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.#ctor(System.String,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Position,System.String,System.Int32,Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Represents a collection of relevant information needed to handle a Copilot completion context request.
            </summary>
            <param name="FilePath">The path of the document in which the completion was triggered.</param>
            <param name="Position">The cursor position within the document where the completion was triggered.</param>
            <param name="LanguageId">Identifies the programming language of the document.</param>
            <param name="Version">Denotes the version number of the document.</param>
            <param name="TextSnapshot">The snapshot for the document when the completion was triggered. Provider should use the content from snapshot if one is available.</param>
            <param name="featureFlags">featureFlags that are current active. The value could be of type `string`, `int`, `bool` or `string[]`.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.FilePath">
            <summary>The path of the document in which the completion was triggered.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.Position">
            <summary>The cursor position within the document where the completion was triggered.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.LanguageId">
            <summary>Identifies the programming language of the document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.Version">
            <summary>Denotes the version number of the document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.TextSnapshot">
            <summary>The snapshot for the document when the completion was triggered. Provider should use the content from snapshot if one is available.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionDocumentContext.featureFlags">
            <summary>featureFlags that are current active. The value could be of type `string`, `int`, `bool` or `string[]`.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.ICopilotCompletionContextItem">
            <summary>
            The base type for a Copilot completion context item.
            </summary>
            <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to change it in the future.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionTraitItem">
            <summary>
            Represents a trait item, which is a key-value pair used for short string snippets.
            </summary>
            <param name="Name">Specifies the name of the trait.</param>
            <param name="Value">Specifies the value of the trait.</param>
            <param name="Importance">Specifies the relative importance with respect to items of the same type. Accepted values are integers in the range [0, 100], where 100 is the highest importance. Items with non-conforming importance values will be filtered out. Default value is 0.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionTraitItem.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Represents a trait item, which is a key-value pair used for short string snippets.
            </summary>
            <param name="Name">Specifies the name of the trait.</param>
            <param name="Value">Specifies the value of the trait.</param>
            <param name="Importance">Specifies the relative importance with respect to items of the same type. Accepted values are integers in the range [0, 100], where 100 is the highest importance. Items with non-conforming importance values will be filtered out. Default value is 0.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionTraitItem.Name">
            <summary>Specifies the name of the trait.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionTraitItem.Value">
            <summary>Specifies the value of the trait.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionTraitItem.Importance">
            <summary>Specifies the relative importance with respect to items of the same type. Accepted values are integers in the range [0, 100], where 100 is the highest importance. Items with non-conforming importance values will be filtered out. Default value is 0.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionCodeSnippetItem">
            <summary>
            Represents a code snippet item extracted from a file.
            </summary>
            <param name="Uri">Uri of the file from which the code snippet is extracted from.</param>
            <param name="Value">Contains the actual code snippet text.</param>
            <param name="AdditionalUris">Additional URIs that contribute the same code snippet.</param>
            <param name="Importance">Specifies the relative importance with respect to items of the same type. Accepted values are integers in the range [0, 100], where 100 is the highest importance. Items with non-conforming importance values will be filtered out. Default value is 0.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionCodeSnippetItem.#ctor(System.String,System.String,System.String[],System.Nullable{System.Int32})">
            <summary>
            Represents a code snippet item extracted from a file.
            </summary>
            <param name="Uri">Uri of the file from which the code snippet is extracted from.</param>
            <param name="Value">Contains the actual code snippet text.</param>
            <param name="AdditionalUris">Additional URIs that contribute the same code snippet.</param>
            <param name="Importance">Specifies the relative importance with respect to items of the same type. Accepted values are integers in the range [0, 100], where 100 is the highest importance. Items with non-conforming importance values will be filtered out. Default value is 0.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionCodeSnippetItem.Uri">
            <summary>Uri of the file from which the code snippet is extracted from.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionCodeSnippetItem.Value">
            <summary>Contains the actual code snippet text.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionCodeSnippetItem.AdditionalUris">
            <summary>Additional URIs that contribute the same code snippet.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Completion.CopilotCompletionCodeSnippetItem.Importance">
            <summary>Specifies the relative importance with respect to items of the same type. Accepted values are integers in the range [0, 100], where 100 is the highest importance. Items with non-conforming importance values will be filtered out. Default value is 0.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotCompletionRelatedContextProvider">
            <summary>
            Provides the list of related files to include additional context to the prompt for Copilot inline completions.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            A <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute">Name</see> and a <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute">ContentType</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotCompletionRelatedContextProvider.IsEnabled">
            <summary>
            Gets a value indicating whether the provider is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotCompletionRelatedContextProvider.GetRelatedFilesAsync(System.String,System.Nullable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.Position},System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of related files of the active file.
            </summary>
            <param name="activeFilePath">The active file.</param>
            <param name="position">An optional position that can be used to refine the calculation of related files.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The list of related files.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Position">
            <summary>
            Represent a position in a text document expressed as zero-based line and zero-based character offset.
            </summary>
            <param name="Line">Line position in a document.</param>
            <param name="Character">Character offset on a line in a document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Represent a position in a text document expressed as zero-based line and zero-based character offset.
            </summary>
            <param name="Line">Line position in a document.</param>
            <param name="Character">Character offset on a line in a document.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Position.Line">
            <summary>Line position in a document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Position.Character">
            <summary>Character offset on a line in a document.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeHandler">
            <summary>
            Represents a base interface for handling Copilot types.
            This interface is designed to be implemented by optional interfaces
            that extend its functionality to handle specific Copilot type scenarios.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeParser">
            <summary>
            Interface to extend the functionality of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeHandler" /> to provide parsing capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeParser.ParseAsync(Microsoft.VisualStudio.Copilot.CopilotTypeName,System.String,System.Threading.CancellationToken)">
            <summary>
            Parses the specified input into a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" /> based on the provided <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTypeName" />.
            </summary>
            <param name="typeName">The Copilot type name to parse the input into.</param>
            <param name="input">The input string to be parsed.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the parsed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeRenderer`1">
            <summary>
            Represents a generic <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeRenderer" /> to render a value into a format to be sent to the model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeRenderer`1.RenderAsync(Microsoft.VisualStudio.Copilot.CopilotValue,System.Threading.CancellationToken)">
            <summary>
            Renders the given type value into the format to be sent to the model.
            </summary>
            <param name="value">The type value to be rendered.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered result</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeRenderer">
            <summary>
            Interface to extend the functionality of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeHandler" /> to render a value into a format to be sent to the model.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext">
            <summary>
            A rich document context object.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext" /> class.
            </summary>
            <param name="content">Content of the document</param>
            <param name="references">The relevant skeleton code.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext.#ctor(Microsoft.VisualStudio.Copilot.DocumentContext,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext" /> class.
            </summary>
            <param name="content">Content of the document</param>
            <param name="references">The relevant skeleton code.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext.References">
            <summary>
            Gets the relevant skeleton code of references in the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.RichDocumentContext.OriginalReferences">
            <summary>
            Gets the original skeleton code before any reductions. Empty if there has been no reduction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind">
             <summary>
             Describes the kind of a <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" /> from the customer's codebase.
             </summary>
             <remarks>
             Copied from GitHub Blackbird's Symbol Extractor, which largely
             does this same sort of consolidation of diverse concepts into
             a single language agnostic vocabulary.
            
             https://github.com/github/symbol-extraction/blob/main/crates/lib/src/lib.rs#L57C1-L89C1
            
             I have intentionally retained names and members (sometimes commented out) to match
             symbol-extraction crate to make for an easier import of additional Tree-Sitter queries.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange">
            <summary>
            Describes the fully qualified name and location of a symbol definition in a file.
            </summary>
            <param name="FileName">The name of the file in the repo. Generally relative to the repo or workspace root.</param>
            <param name="FullyQualifiedName">The best guess of the fully qualified name of the symbol, as determined by syntax.</param>
            <param name="UnqualifiedName">The name of the symbol, excluding any namespaces.</param>
            <param name="CommentRange">The range of the documentation comment, if any.</param>
            <param name="NameRange">The range of the name of the symbol in the document.</param>
            <param name="BodyRange">The range of the function, class, or namespace body, if any.</param>
            <param name="ExtentRange">The full range of the declaration.</param>
            <param name="Kind">The syntax kind of the element.</param>
            <remarks>
            <paramref name="FullyQualifiedName" /> is a best guess based on syntax alone and and may not precisely
            match the official language service's name for that symbol. It is intended to be used only for search and
            comparison within the indexing component.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind)">
            <summary>
            Describes the fully qualified name and location of a symbol definition in a file.
            </summary>
            <param name="FileName">The name of the file in the repo. Generally relative to the repo or workspace root.</param>
            <param name="FullyQualifiedName">The best guess of the fully qualified name of the symbol, as determined by syntax.</param>
            <param name="UnqualifiedName">The name of the symbol, excluding any namespaces.</param>
            <param name="CommentRange">The range of the documentation comment, if any.</param>
            <param name="NameRange">The range of the name of the symbol in the document.</param>
            <param name="BodyRange">The range of the function, class, or namespace body, if any.</param>
            <param name="ExtentRange">The full range of the declaration.</param>
            <param name="Kind">The syntax kind of the element.</param>
            <remarks>
            <paramref name="FullyQualifiedName" /> is a best guess based on syntax alone and and may not precisely
            match the official language service's name for that symbol. It is intended to be used only for search and
            comparison within the indexing component.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.FileName">
            <summary>The name of the file in the repo. Generally relative to the repo or workspace root.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.FullyQualifiedName">
            <summary>The best guess of the fully qualified name of the symbol, as determined by syntax.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.UnqualifiedName">
            <summary>The name of the symbol, excluding any namespaces.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.CommentRange">
            <summary>The range of the documentation comment, if any.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.NameRange">
            <summary>The range of the name of the symbol in the document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.BodyRange">
            <summary>The range of the function, class, or namespace body, if any.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.ExtentRange">
            <summary>The full range of the declaration.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.Kind">
            <summary>The syntax kind of the element.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange">
            <summary>
            Represents a range of text in a document.
            </summary>
            <param name="Start">The start of the text.</param>
            <param name="Length">The length of the text in characters.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Represents a range of text in a document.
            </summary>
            <param name="Start">The start of the text.</param>
            <param name="Length">The length of the text in characters.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.Start">
            <summary>The start of the text.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.Length">
            <summary>The length of the text in characters.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.Empty">
            <summary>
            An empty text range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.End">
            <summary>
            Gets the end of the text, relative to the start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.Contains(System.Int32)">
            <summary>
            Determines if the given position is within the range.
            </summary>
            <param name="position">The index of the character.</param>
            <returns><c>true</c> if the position is within this range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.Contains(Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange)">
            <summary>
            Determines if the given range is within the range.
            </summary>
            <param name="textRange">The range to check.</param>
            <returns><c>true</c> if the given range is within this one.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.FromBounds(System.UInt32,System.UInt32)">
            <summary>
            Creates a new range from the given start and end character positions.
            </summary>
            <param name="start">The start character position.</param>
            <param name="end">The end character position.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.GetText(System.String)">
            <summary>
            Slices the given <paramref name="sourceText" /> to just the text within this range.
            </summary>
            <param name="sourceText">The text the range is constructed over.</param>
            <returns>The text within this range, as a new, copied <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange.GetTextWithIndentation(System.String,System.Int32)">
            <summary>
            Slices the given <paramref name="sourceText" /> to just the text within this range
            and reformats each line to have <paramref name="desiredIndent" /> number of spaces of
            indentation.
            </summary>
            <param name="sourceText">The text the range is constructed over.</param>
            <param name="desiredIndent">The indentation to format the code with.</param>
            <returns>The text within this range, as a new, copied <see cref="T:System.String" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1">
            <summary>
            Provides a formatter to handle inherited types that can not make use of <see cref="T:MessagePack.UnionAttribute" />.
            </summary>
            <typeparam name="TBaseType">The base type for the inherited types.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1" /> class.
            </summary>
            <param name="subTypes">The sub-types to support. The order of these types is a breaking change.</param>
            <remarks>By default, <see cref="T:MessagePack.Resolvers.DynamicObjectResolverAllowPrivate" /> will be used to lookup a <typeparamref name="TBaseType" /> formatter.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.#ctor(MessagePack.Formatters.IMessagePackFormatter{`0},System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1" /> class.
            </summary>
            <param name="baseFormatter">The formatter to use for the <typeparamref name="TBaseType" />.</param>
            <param name="subTypes">The sub-types to support. The order of these types is a breaking change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.Deserialize(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.Serialize(MessagePack.MessagePackWriter@,`0,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.TryDeserializePreviousVersion(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions,`0@)">
            <summary>
            Attempt to deserialize an older version of the type before it was changed to an inheritance formatter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.CreateSerializeDelegatePair(System.Type)">
            <summary>
            Generate <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.FormatterSerialize">Serialize</see> and <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.FormatterDeserialize">Deserialize</see> delegates.
            </summary>
            <param name="valueType">The type to serialize/deserialize.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TBaseType" /> is not assignable from <paramref name="valueType" />.</exception>
            <remarks>
            <para>
            While we can call <see cref="M:MessagePack.FormatterResolverExtensions.GetFormatterDynamic(MessagePack.IFormatterResolver,System.Type)" /> and get a formatter
            typed to our given <paramref name="valueType" />, it only returns <see langword="object" />. We still need a way to call it,
            so this generates a delegate for which you can pass in <typeparamref name="TBaseType" /> and it will cast it and then call
            the strongly typed Serialize/Deserialize for the actual value type.
            </para>
            <para>
            This is done with expressions and a compile to save the reflection costs we'd otherwise need to incur for every
            serialize/deserialize of the type, which then necessitates storing the compiled pair in <see cref="F:Microsoft.VisualStudio.Copilot.UnstableInternalApi.InheritanceFormatter`1.Serializers" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotScopeInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotScopeInfo" /> class.
            </summary>
            <param name="name">The name of the scope.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotScopeInfo.Name">
            <summary>
            Gets the name of the scope to serve as the prompt item (ex. #workspace).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotScopeInfo.Inputs">
            <summary>
            Gets any inputs this scope accepts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContext">
            <summary>
            Represents the context of a symbol.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotSymbolContextType,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.SnippetLocation})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContext" /> class.
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the symbol.</param>
            <param name="unqualifiedName">Unqualified name of the symbol.</param>
            <param name="snippet">Code snippet of the symbol.</param>
            <param name="symbolType"><see cref="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContextType" /> of the symbol.</param>
            <param name="snippetLocations">Locations where the code snippet is sourced from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.FullyQualifiedName">
            <summary>
            Gets the fully qualified name of the symbol, e.g., Namespace.ClassName.SymbolName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.UnqualifiedName">
            <summary>
            Gets the unqualified name of the symbol, e.g., SymbolName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.Snippet">
            <summary>
            Gets the code snippet of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.SymbolType">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContextType" /> of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.SnippetLocations">
            <summary>
            Gets the locations where the code snippet is sourced from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSymbolContext.FilesPaths">
            <summary>
            Gets the file paths where the code snippet is sourced from.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.SnippetLocation">
            <summary>
            Represents the location where a code snippet is sourced from.
            </summary>
            <param name="FilePath">The file path where the snippet is located.</param>
            <param name="Span">The span of the snippet within the file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SnippetLocation.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotSpan)">
            <summary>
            Represents the location where a code snippet is sourced from.
            </summary>
            <param name="FilePath">The file path where the snippet is located.</param>
            <param name="Span">The span of the snippet within the file.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SnippetLocation.FilePath">
            <summary>The file path where the snippet is located.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SnippetLocation.Span">
            <summary>The span of the snippet within the file.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContextType">
            <summary>
            Represents the type of the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotTrait">
            <summary>
            A characteristic or property specific to a domain within the workspace.
            Traits are obtained from trait providers, which in turn will obtain them from available trait sources within a workspace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTrait.ProviderMoniker">
            <summary>
            Gets the provider moniker associated with the trait.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTrait.Key">
            <summary>
            Gets the key of the trait.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTrait.Value">
            <summary>
            Gets the value of the trait.
            </summary>
            <remarks>
            This is a string representation of the trait that is expected to be rendered in the prompt.
            It may contain some prompt engineering in regards on how the extender chooses to render it
            but they are not intended to be too descriptive or long.
            Traits that contain a valid value in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotTrait.Value" /> will be rendered as follows:
            ## KNOWN TRAITS
            - trait1.Prompt
            - trait2.Prompt
            - traitN.Prompt
            ...
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTrait.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,Microsoft.VisualStudio.Copilot.CopilotValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTrait" /> class.
            </summary>
            <param name="providerMoniker">The provider moniker associated with the trait.</param>
            <param name="key">The key of the trait.</param>
            <param name="value">The value of the trait which is expected to be rendered in the prompt.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.DocumentContext">
            <summary>
            A document for context.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DocumentContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.DocumentContext" /> class.
            </summary>
            <param name="content">The content of the document.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Content">
            <summary>
            Gets the contents of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.OriginalContent">
            <summary>
            Gets the original content of the document before any changes or reduction. Null if the context has not been modified/reduced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Selections">
            <summary>
            Gets any selected regions within the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.FilePath">
            <summary>
            Gets the file path to the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Language">
            <summary>
            Gets the language of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Microsoft#VisualStudio#Copilot#ICopilotContextFiles#FilesPaths">
            <summary>
            Gets the files paths for the document context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.DocumentSelection">
            <summary>
            A document region.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DocumentSelection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.DocumentSelection" /> class.
            </summary>
            <param name="start">The beginning position of the region.</param>
            <param name="end">The end position of the region.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentSelection.Caret">
            <summary>
            Gets a caret position if focused.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentSelection.Start">
            <summary>
            Gets the starting position of the region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentSelection.End">
            <summary>
            Gets the ending position of the region.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotBatchContextReducer">
            <summary>
            Represents a contract for batch reducing contexts. <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextReducer" />"/&gt;.
            </summary>
            <remarks>
            Implement this interface to provide custom logic for reducing a set of contexts in batch.
            This is typically used in scenarios where multiple contexts need to be processed together
            to produce a more concise or relevant set of contexts.
            This interface is an optional extension to a context reducer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotBatchContextReducer.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)">
            <summary>
            Provides the ability to reduce a set of contexts in batch.
            </summary>
            <param name="contexts">The set of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> to reduce.</param>
            <param name="reduction">Options for how to perform the reduction.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>A new set of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> containing reduced <see cref="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value" />.</returns>
            <remarks>
            <para>
            In order to properly represent the actual contexts that were used to the user, new context objects must be generated
            instead of simply returning new prompts.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Copilot.CopilotReductionOptions" /> parameter provides options for guiding the reduction process:
            - <see cref="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Budget" />: Represents the number of tokens available for the reduction process.
              This helps ensure that the reduced context fits within the allowed token limit.
            - <see cref="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Model" />: Represents the language model used for the request.
              Different models may have different tokenization strategies and limits, so knowing the model helps tailor the reduction process.
            - <see cref="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Request" />: Represents the original user request, providing additional context or guidance
              for how the reduction should be performed. This can include user preferences or specific parts of the context that should be prioritized.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotContextFiles">
            <summary>
            Copilot context files paths information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider">
            <summary>
            A grouping of individual pieces of context, providing snapshotting.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the complete set of members that context can be retrieved from.
            </summary>
            <remarks>
            This list should be a static definition, all members regardless of current state are declared here.
            </remarks>
            <example>
            If your context provider is for the current exception, you might have members like:
            <list type="bullet">
            <term>CurrentException.Type</term>
            <term>CurrentException.Message</term>
            <term>CurrentException.StackTrace</term>
            </list>
            Alternatively, you may choose to bundle them into a single 'CurrentException' member
            that provides a summary of the current exception with a string.
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.StoreAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Store and associate the current context with the <paramref name="requestId" />.
            </summary>
            <remarks>
            Store may be called more than once with the same <paramref name="requestId" />, any duplicate calls
            should no-op.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.ReleaseAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Free any context associated with <paramref name="requestId" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the currently available members that context can be retrieved from.
            </summary>
            <returns>A list of the members available from the state associated with <paramref name="requestId" />.</returns>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)">
            <summary>
            Gets the context from the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> associated with <paramref name="member" /> given the <paramref name="inputs" />.
            </summary>
            <param name="requestId">The request id to indicate the specific version of context to retrieve.</param>
            <param name="member">The name of the member from <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />.</param>
            <param name="inputs">The inputs to the member from <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Inputs" />.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> or <see langword="null" /> if the context could not be obtained.</returns>
            <remarks>
            <para>Do not free context once it has been requested here, only do so from <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.ReleaseAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)" />.</para>
            <para>
            In some cases it be not worth the cost of preserving context should it change in-between a request start and stop. In these cases it is valid
            to return a <see langword="null" /> context which will abort any dependent execution.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable.GetContextReferencesAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Gets the information needed to display these contexts to the user.
            </summary>
            <param name="contexts">A batch of contexts to be converted to display info.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotContextReducer">
            <summary>
            A reducer for copilot contexts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextReducer.ReduceAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.VisualStudio.Copilot.CopilotReductionOptions,Microsoft.VisualStudio.Copilot.ICopilotTokenCounter,System.Threading.CancellationToken)">
            <summary>
            Attempt to reduce the contents of the context.
            </summary>
            <param name="context">The context object to reduce.</param>
            <param name="reduction">Options for how to perform the reduction.</param>
            <param name="counter">A token counter.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> containing a smaller <see cref="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value" />.</returns>
            <remarks>
            <para>
            In order to properly represent the actual context that was used to the user, a new context object must be generated instead of simply returning a new prompt.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotDebuggerContextProvider">
            <summary>
            Represents a debugger context provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDebuggerContextProvider.GetDebuggerContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the state of the program paused in the debugger as context.
            </summary>
            <param name="correlationId">The correlation id for the request to use the context with.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The current debugger context if a program is paused in the debugger or <see langword="null" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider">
            <summary>
            Represents a diagnostic context provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider.GetActiveDocumentContextsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the diagnostic context for the active document.
            </summary>
            <param name="correlationId">The correlation ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The diagnostic context for the active document.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider.GetContextsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the diagnostic context for a specific file.
            </summary>
            <param name="correlationId">The correlation ID.</param>
            <param name="filePath">The path of the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The diagnostic context for the specified file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider.GetContextsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the diagnostic context for a specific file within a range of lines.
            </summary>
            <param name="correlationId">The correlation ID.</param>
            <param name="filePath">The path of the file.</param>
            <param name="startLine">The starting line number.</param>
            <param name="endLine">The ending line number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The diagnostic context for the specified file within the range of lines.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider">
            <summary>
            Represents a document context provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a document context given a <paramref name="filePath" />.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="filePath">File path of document context to acquire</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing a document with given <paramref name="filePath" /> if there is one, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider.GetActiveDocumentAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the active document as context.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing the active document if there is one, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider.GetExplicitSelectionAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets an explicit selection by the user as context if the last active document had a selection.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing the active document with selection or <see langword="null" /> if nothing is selected.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotInteractionService">
            <summary>
            Provides functionality for generating, displaying and promptifying <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteraction">interactions</see>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.ParseAsync(Microsoft.VisualStudio.Copilot.CopilotTypeName,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeParser.ParseAsync(Microsoft.VisualStudio.Copilot.CopilotTypeName,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.GetContextReferencesAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable.GetContextReferencesAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.PromptifyAsync(Microsoft.VisualStudio.Copilot.CopilotValue,System.Threading.CancellationToken)">
            <summary>
            Promptify a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" /> from an original or reduced <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" />
            </summary>
            <param name="typeValue">Value to promptify.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>A prompt snippet that represents the promptified version.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.ConfirmAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotActionId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Confirms a pending copilot call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.PromptifyContextAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotPromptOptions,System.Threading.CancellationToken)">
            <summary>
            Promptifies the context of the given request.
            </summary>
            <param name="request">The request to promptify the context of.</param>
            <param name="options">Options like model and token budget for promptifying.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>An evaluation of the context giving its final prompt, tokens and reduced context.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.GetContextWithTraitsAsync(Microsoft.VisualStudio.Copilot.CopilotContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously augments a single <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> with a list of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTrait" />.
            </summary>
            <param name="context">The <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> to augment.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the augmented <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.GetContextWithTraitsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Asynchronously augments a collection of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> instances with a list of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTrait" />.
            </summary>
            <param name="contexts">The collection of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> instances to augment.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the collection of augmented <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> instances.</returns>
            <remarks>
            The order of the contexts in the resulting collection will be the same as the order in the input collection.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable">
            <summary>
            Represents a provider of a mentionable components that can be queried for those mentions.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" />
            <remarks>
            Your <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider">context provider</see> or agent <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> implements
            this in order to serve up completion items that it has to offer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)">
            <summary>
            Query the mentionable provider for potential pieces of context or scopes with input based on <paramref name="query" />.
            </summary>
            <param name="query">The query to match against.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A list of possible context that partially or fully matches <paramref name="query" />. Empty if there are none.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)">
            <summary>
            Navigates to the mention in the UI. Invoked when the user clicks a <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.IsNavigable">navigable</see> mention.
            </summary>
            <param name="mention">A mention to navigate to.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><see langword="true" /> if the context was navigated to successfully, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotScope">
            <summary>
            A 'scope' is a service that can provide related context to a request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotScope.GetInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the metadata for this scope.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>The information describing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotScope.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotInteraction,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)">
            <summary>
            Gets related context for the provided <paramref name="interaction" />.
            </summary>
            <param name="interaction">The copilot interaction that this scope is being asked about.</param>
            <param name="inputs">Any inputs to the scope.</param>
            <param name="cancellation">Cancellation for querying the context.</param>
            <returns>Context related to the <paramref name="interaction" />.</returns>
            <remarks>
            <para>
            One scope's determination of relatability is not comparable to another, so scopes should order their return context
            from most to least related. Scopes should use their own heuristics to determine cut off points for the relatability
            of the context to return rather than simply returning everything ordered.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter">
            <summary>
            Provides a mechanism to count the tokens of a given string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter.CountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Count tokens in a piece of text.
            </summary>
            <param name="text">The text needs to be tokenized.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>The exact token count.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter.TrimSuffixByTokenCountAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The function trimmed a piece of text by suffix based on token count needs to be preserved.
            </summary>
            <param name="text">Text to be trimmed by suffix based on token count.</param>
            <param name="count">Max token count to be preserved.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter.TrimPrefixByTokenCountAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The function trimmed a piece of text by prefix based on token count needs to be preserved.
            </summary>
            <param name="text">Text to be trimmed by prefix based on token count.</param>
            <param name="count">Max token count to be preserved.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotTraitProvider">
             <summary>
             Represents a provider for Copilot traits.
             </summary>
             <remarks>
             Traits are characteristics or properties specific to a domain within the workspace. They are obtained from trait providers,
             which in turn obtain them from available trait sources within a workspace. For more details on traits, refer to the
             <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTrait" /> class.
            
             To register a trait provider, use the <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterTraitProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotTypeName},System.Threading.CancellationToken)" /> method
             from the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService" /> interface.
            
             If the trait provider needs to provide workspace traits, it should be registered against <see cref="F:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes.WorkspaceContextName" /> context type.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTraitProvider.GetTraitsAsync(Microsoft.VisualStudio.Copilot.CopilotContext,System.Threading.CancellationToken)">
            <summary>
            Retrieves the traits for a given <paramref name="context" />.
            </summary>
            <param name="context">The context to obtain traits for.</param>
            <param name="cancellation">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the list of Copilot traits.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotAutoToolMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotAutoToolMode" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction">
            <summary>
            The possible supported operations on a collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction.Add">
            <summary>
            One or more items were added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction.Remove">
            <summary>
            One or more items were removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction.Reset">
            <summary>
            The items in the list were reset and replaced with a new list of items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction.Replace">
            <summary>
            One or more items were replaced.
            </summary>
            <remarks><see cref="P:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs`1.Collection" /> will contain the items which have been replaced in their new forms.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs`1">
            <summary>
            The arguments representing a change in the Copilot collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs`1.#ctor(Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs`1" /> class.
            </summary>
            <param name="action">The action.</param>
            <param name="collection">The affected items in the collection.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs`1.Action">
            <summary>
            Gets the action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs`1.Collection">
            <summary>
            Gets the items in the collection that were affected by the action. If it is <see cref="F:Microsoft.VisualStudio.Copilot.CopilotCollectionChangedAction.Reset" />,
            then this will contain the new list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequestOptions">
            <summary>
            Options for making a confirmation request with functions or agents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequestOptions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequestOptions" /> class.
            </summary>
            <param name="title">Title of the confirmation.</param>
            <param name="description">Optional description.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequestOptions.Title">
            <summary>
            Gets the title of the confirmation request displayed to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequestOptions.Description">
            <summary>
            Gets the options description of the confirmation request displayed to the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes.JsonSchemaOptions">
            <summary>
            Serialization options for JSON schema generation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CurrentContextProviderVersion">
            <summary>
            The version that should be used when registering context (those that will use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateContextProviderDescriptor(System.String)" />).
            </summary>
            <remarks>
            This version number will increment whenever a breaking change is made so that it's clear to both sides which behavior is expected from the remote side.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CurrentScopeVersion">
            <summary>
            The version that should be used when registering context (those that will use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateScopeDescriptor(System.String)" />).
            </summary>
            <remarks>
            This version number will increment whenever a breaking change is made so that it's clear to both sides which behavior is expected from the remote side.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CurrentResponderVersion">
            <summary>
            The version that should be used when registering a responder (those that will use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateResponderDescriptor(System.String)" />).
            </summary>
            <remarks>
            This version number will increment whenever a breaking change is made so that it's clear to both sides which behavior is expected from the remote side.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CurrentTraitProviderVersion">
            <summary>
            The version that should be used when registering a trait provider (those that will use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateTraitProviderDescriptor(System.String)" />).
            </summary>
            <remarks>
            This version number will increment whenever a breaking change is made so that it's clear to both sides which behavior is expected from the remote side.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CurrentTypeHandlerVersion">
            <summary>
            The version that should be used when registering a type handler (those that will use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateTypeHandlerDescriptor(System.String)" />).
            </summary>
            <remarks>
            This version number will increment whenever a breaking change is made so that it's clear to both sides which behavior is expected from the remote side.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CopilotService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the Visual Studio copilot service.
            Use the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateContextProviderDescriptor(System.String)">
            <summary>
            Creates a descriptor for use for interacting with <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> extensions.
            </summary>
            <param name="contextProviderMonikerName">The name on the moniker that will activate the context provider.</param>
            <returns>The descriptor for use when requesting activation of the context provider or when proffering the context provider to a brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateTraitProviderDescriptor(System.String)">
            <summary>
            Creates a descriptor for use for interacting with <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTraitProvider" /> extensions.
            </summary>
            <param name="traitProviderMonikerName">The name on the moniker that will activate the trait provider.</param>
            <returns>The descriptor for use when requesting activation of the trait provider or when proffering the trait provider to a brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateContextProviderDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Creates a descriptor for use for interacting with <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> extensions.
            </summary>
            <param name="contextProviderMoniker">The moniker that will activate the context provider.</param>
            <returns>The descriptor for use when requesting activation of the context provider or when proffering the context provider to a brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateTypeProviderDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Creates a descriptor for use for interacting with runtime registered <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider" /> services.
            </summary>
            <param name="typeProviderMoniker">The moniker that will active the type provider.</param>
            <returns>The descriptor to utilize.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateTypeHandlerDescriptor(System.String)">
            <summary>
            Creates a descriptor for use for interacting with runtime registered <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeHandler" /> services.
            </summary>
            <param name="typeHandlerMonikerName">The name on the moniker that will activate the type handler.</param>
            <returns>The descriptor for use when requesting activation of the type handler or when proffering the type handler to a brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateTypeHandlerDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Creates a descriptor for use for interacting with runtime registered <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeHandler" /> services.
            </summary>
            <param name="typeHandlerMoniker">The moniker that will activate the type handler.</param>
            <returns>The descriptor for use when requesting activation of the type handler or when proffering the type handler to a brokered service container.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDescriptors.Responders.ChatDefault">
            <summary>
            Gets the descriptor for the default agent for the chat window experience.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions">
            <summary>
            Options for making a direct request with.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.SendDirectRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.ActiveResponses">
            <summary>
            Gets a value indicating whether to automatically generate active (streaming) responses.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.ActiveResponseListener">
            <summary>
            Gets the active interaction listener override to use for the active responses.
            </summary>
            <remarks>
            This overrides the default active interaction listener for offering active responses for this request. <see cref="P:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.ActiveResponses" /> must
            also be <see langword="true" /> or it will be ignored as the broker will not offer active responses. This will not be called for
            requests.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.History">
            <summary>
            Gets the history items to include with the request (not including the request); <see langword="null" /> automatically includes all history.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotRequestOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions" /> class.
            </summary>
            <param name="options"></param>
            <remarks>Used to construct a new <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions" /> instance by copying the base <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequestOptions" />.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotExclusionService">
            <summary>
            Service for managing the exclusion of content in Copilot Chat.
            </summary>
            <seealso href="https://aka.ms/vs/17/copilotcontentexclusion" />
            <seealso href="https://github.com/github/heart-services/blob/main/docs/content-exclusion/integration-guide.md" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsContentExcludedAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a given content is excluded.
            </summary>
            <param name="contentSource">The source of the content, e.g., file path, URL, text document identifier.</param>
            <param name="content">Content to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see langword="true" /> if the <paramref name="content" /> should be excluded, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsFileExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a specific file is excluded.
            </summary>
            <param name="filePath">The path of the file to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see langword="true" /> if the <paramref name="filePath" /> should be excluded, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsAnyFileExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the provided workspace has any exclusion rules.
            </summary>
            <param name="workspacePath">The path of the workspace to check for exclusion rules.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see langword="true" /> if the <paramref name="workspacePath" /> has any exclusion rules, <see langword="false" /> otherwise.</returns>
            <remarks>This function returns the same result as IsAnyExclusionRulesAsync</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsAnyExclusionRulesAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if the active workspace has any exclusion rules.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see langword="true" /> if the active workspace has any exclusion rules, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.GetExcludedFilesAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the excluded files in a collection of files.
            </summary>
            <param name="filesPaths">A collection of files paths to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A collection of file path <see cref="T:System.String" /> for the excluded files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsContextExcludedAsync(Microsoft.VisualStudio.Copilot.CopilotContext,System.Threading.CancellationToken)">
            <summary>
            Checks if the context should be excluded by Copilot exclusion rules.
            </summary>
            <param name="context">Copilot context to check for exclusion.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns><see langword="true" /> if the <paramref name="context" /> should be excluded, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.GetExcludedContextsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Gets the excluded contexts for a collection of contexts.
            </summary>
            <param name="contexts">A collection of copilot contexts to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A collection of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> for the contexts that should be excluded.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.ScreenRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Threading.CancellationToken)">
            <summary>
            Screens the request's and returns a new version of the request with exclusions removed.
            </summary>
            <param name="request">Copilot request.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>A new version of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> after filtering out the exclusions.</returns>
            <remarks>
            This method screen the request for exclusions and removes the excluded context altogether from the request therefore is best called just before turning things into a prompt.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor">
            <summary>
            Describes a piece of input to the model, such as arguments to a function.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor" /> class.
            </summary>
            <param name="name">The model-visible name of the input.</param>
            <param name="description">The description of the input.</param>
            <param name="type">The type of the input.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotTypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor" /> class.
            </summary>
            <param name="name">The model-visible name of the input.</param>
            <param name="description">The description of the input.</param>
            <param name="typeName">The type name of the input.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotJsonSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor" /> class
            for an input that fills a particular schema but may not have a known .NET type that conforms to it.
            </summary>
            <param name="name">The model-visible name of the input.</param>
            <param name="typeName">The already computed type name. Use <see cref="P:System.Type.AssemblyQualifiedName" /> from <see cref="T:System.Text.Json.Nodes.JsonNode" /> if you have an arbitrary JSON schema for which you haven't a .NET type.</param>
            <param name="schema">The JSON schema of the input.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.Name">
            <summary>
            Gets the model-visible name of the input.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.TypeName">
            <summary>
            Gets the (usually assembly qualified) full type name of the data type stored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.IsRequired">
            <summary>
            Gets a value indicating whether the input is required (defaults to true).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInputDescriptor.Schema">
            <summary>
            Gets the schema for the input.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor">
            <summary>
            Describes a piece of input to the model, such as arguments to a function.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotTypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor" /> class.
            </summary>
            <param name="name">The model-visible name of the input.</param>
            <param name="description">The model-visible description of the input.</param>
            <param name="type">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider">Copilot type</see> name of the input.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor.Name">
            <summary>
            Gets the model-visible name of the input.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor.Description">
            <summary>
            Gets the model-visible description of the input.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor.Type">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider">Copilot type</see> name of the input.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInputDescriptor.IsRequired">
            <summary>
            Gets a value indicating whether gets whether or not the input is required input (defaults to true).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Explain">
            <summary>
            The intention of the associated request is to explain a specific subject specified in the content.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Answer">
            <summary>
            The intention of the associated request is to answer a general question or a specific question about provided context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Fix">
            <summary>
            The intention of the associated request is to fix an issue with the provided code or context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Generate">
            <summary>
            The intention of the associated request is to generate new code based on the content and any provided context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Modify">
            <summary>
            The intention of the associated request is to modify the provided code or context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Optimize">
            <summary>
            THe intention of the associated request is to modify the provided code or context to improve its performance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.CreateTest">
            <summary>
            The intention of the associated request is to generate tests for the provided code or context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.AskVS">
            <summary>
            The intention of the associated request is to get details on how specific task could be achieved in VS and supply the user with information about the VS Command to achieve that.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Code">
            <summary>
            The intention of the associated request is to generate or modify code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Document">
            <summary>
            The intention of the associated request is to document code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.None">
            <summary>
            No intent. Pass the request directly through.
            </summary>
            <remarks>
            Warning: The None intent is not recommended for most scenarios.
            The request will be executed as-is from the caller with the bare minimum amount of additional processing. This means that the request will
            not have basic safety guardrails applied automatically to the system prompt. The caller is responsible for adding those.
            Additionally, core platform features like custom instructions will not be applied to the request.
            Consider using <see cref="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Generic" /> instead of None, since that provides a better foundation for many custom Copilot scenarios.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Generic">
            <summary>
            This is a generic intent that includes some core platform features without being opinionated on the exact user-facing scenario.
            </summary>
            <remarks>
            This intent will ensure the use of basic safety guardrails in the system prompt as well as opt in to core platform features
            such as custom instructions. This is a good intent to use for extenders who are not sure which intent to use,
            or for scenarios where you want to customize the system prompt with guidance for your specific scenario.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.ExplainException">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.AnalyzeConversation">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.CorrelationId">
            <inheritdoc cref="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.CorrelationId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.MessageId">
            <inheritdoc cref="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.MessageId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context">
            <summary>
            Gets the context provided or obtained for this interaction.
            </summary>
            <remarks>
            <para>
            For requests, this context will include anything that was pre-supplied.
            </para>
            <para>
            For responses, this context will include anything that was supplied in the request,
            as well as any context obtained and included during the response pipeline.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Content">
            <summary>
            Gets the ordered content parts of this interaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Metadata">
            <summary>
            Gets the metadata associated with this interaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.EventMessage">
            <summary>
            Gets the event message associated with this interaction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionEventMessage.#ctor(Microsoft.VisualStudio.Copilot.EventMessageCreatedBy,System.String,Microsoft.VisualStudio.Copilot.EventMessagePlacement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteractionEventMessage" /> class.
            </summary>
            <param name="createdBy">Who and how the event was created</param>
            <param name="markdownContent">Content to be displayed to the user</param>
            <param name="placement">Whether the event message appears before or after the interaction</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionEventMessage.MarkdownContent">
            <summary>
            Gets the content of the event message in Markdown format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionEventMessage.CreatedBy">
            <summary>
            Gets who created the event message, such as a user action or an agent response.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionEventMessage.Placement">
            <summary>
            Gets where the event message should appear in relation to the interaction.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EventMessagePlacement.Before">
            <summary>
            The event message appears before the interaction, above the message box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EventMessagePlacement.After">
            <summary>
            The event message appears after the interaction, below the message box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EventMessageCreatedBy.UserAction">
            <summary>
            The action was created by the user, such as a button click or command execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EventMessageCreatedBy.Agent">
            <summary>
            The action was created by the system, such as an automatic response or notification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotJsonSchema">
            <summary>
            Represents a JSON schema.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotJsonSchema.Value">
            <summary>
            Gets or sets a string representation of a JSON schema.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel">
            <summary>
            Represents a model that inputs and outputs language.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.Gpt4oFamily">
            <summary>
            The gpt-4o family name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.Gpt41Family">
            <summary>
            The gpt-4.1 family name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.Gpt4oMiniFamily">
            <summary>
            The gpt-4o-mini family name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.O1GaFamily">
            <summary>
            The family name of the o1 model that is used for general availability versions of the o1 models.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.O3MiniFamily">
            <summary>
            The o3-mini family name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" /> class.
            </summary>
            <param name="id">The raw identifier of the model.</param>
            <param name="name">The name of the model, such as gpt-3.5-turbo-0613.</param>
            <param name="family">The model family name, such as gpt-3.5-turbo.</param>
            <param name="inputTokens">The number of tokens that can be provided for context (request, context, history).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" /> class.
            </summary>
            <param name="id">The raw identifier of the model.</param>
            <param name="name">The name of the model, such as gpt-3.5-turbo-0613.</param>
            <param name="displayName">The display name of the model, such as "GPT 3.5 Turbo".</param>
            <param name="family">The model family name, such as gpt-3.5-turbo.</param>
            <param name="inputTokens">The number of tokens that can be provided for context (request, context, history).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.#ctor(System.String,System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.Copilot.CopilotModelCapabilities)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" /> class.
            </summary>
            <param name="id">The raw identifier of the model.</param>
            <param name="name">The name of the model, such as gpt-3.5-turbo-0613.</param>
            <param name="displayName">The display name of the model, such as "GPT 3.5 Turbo".</param>
            <param name="family">The model family name, such as gpt-3.5-turbo.</param>
            <param name="inputTokens">The number of tokens that can be provided for context (request, context, history).</param>
            <param name="capabilities">The capabilities of the model.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.InputTokens">
            <summary>
            Gets the max number of tokens that can be provided for input (request, context, history).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotLanguageModel.Encoding">
            <summary>
            Gets the name of the encoding used for tokenization. <see langword="null" /> if the encoding name is unknown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModel.#ctor(System.String,System.String,System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotModelCapabilities)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModel" /> class.
            </summary>
            <param name="id">The raw identifier of the model.</param>
            <param name="name">The name of the model, such as gpt-3.5-turbo-0613.</param>
            <param name="displayName">The display name of the model, such as "GPT 3.5 Turbo".</param>
            <param name="family">The model family name, such as gpt-3.5-turbo.</param>
            <param name="capabilities">The capabilities of the model.</param>
            <remarks>
            The <paramref name="id" /> is an opaque string and should not be interpreted. For scenarios where you
            want to adjust prompts for different models or change any other behavior based on details about the model,
            you should use the <paramref name="name" /> and/or <paramref name="family" /> properties.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.Id">
            <summary>
            Gets the raw identifier of the model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.Name">
            <summary>
            Gets the name of the model, such as gpt-3.5-turbo-0613.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.DisplayName">
            <summary>
            Gets the display name of the model, such as "GPT 3.5 Turbo".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.Family">
            <summary>
            Gets the model family name, such as gpt-3.5-turbo.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.Capabilities">
            <summary>
            Gets the capabilities of the model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.BillingType">
            <summary>
            Gets the type of billing for this model, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.State">
            <summary>
            Gets the availability state of this model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.Terms">
            <summary>
            Gets the terms to accept usage of this model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.RestrictedTo">
            <summary>
            Gets the SKUs that this model is restricted to. If this is empty, the model is available to all SKUs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.Multiplier">
            <summary>
            Gets the cost multiplier for this model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.UserSelectable">
            <summary>
            Gets a value indicating whether whether the user is able to select this model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.PurposesDefault">
            <summary>
            Gets a value indicating for which <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModelPurpose">purposes</see> this model serves as the default.
            </summary>
            <remarks>
            In a set of models of a particular type (ex. <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" />) from a responder, a model can be
            designated as the default model for a given purpose. If the model is the
            <see cref="F:Microsoft.VisualStudio.Copilot.CopilotModelPurpose.Chat">default chat model</see>, it will be pre-selected in model picker UIs.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotModel.PurposesFallback">
            <summary>
            Gets a value indicating for which <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModelPurpose">purposes</see> this model serves as the fallback.
            </summary>
            <remarks>
            In a set of models of a particular type (ex. <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" />) from a responder, a model can be
            designated as the fallback model for individual purposes. This model will be selected if the requested model has exceeded its quota.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotModelBillingType">
            <summary>
            Defines model billing types for Copilot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelBillingType.None">
            <summary>
            No billing for this model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelBillingType.Premium">
            <summary>
            Model is billed as a premium model.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotModelCapabilities">
            <summary>
            Represents a collection of capabilities that a Copilot model supports as a bit field.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelCapabilities.None">
            <summary>
            The model supports no additional capabilities (or the capabilities are unknown).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelCapabilities.ToolCalls">
            <summary>
            The model supports non-parallel tools/functions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelCapabilities.ParallelToolCalls">
            <summary>
            The model supports parallel tools/functions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelCapabilities.Vision">
            <summary>
            The model supports vision capabilities with image inputs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelExtensions.GetDefaultModel``1(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotModel},Microsoft.VisualStudio.Copilot.CopilotModelPurpose)">
            <summary>
            Gets the default model for the broker.
            </summary>
            <param name="self">The responder broker.</param>
            <param name="purpose">The model's purpose.</param>
            <returns>Gets the default model encoder for the broker.</returns>
            <exception cref="T:System.InvalidOperationException">
            If no default model for the given <paramref name="purpose" /> was founnd in the list of <paramref name="self">models</paramref>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelExtensions.GetModel``1(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotModel},Microsoft.VisualStudio.Copilot.CopilotModelRequest)">
            <summary>
            Gets the model for the model request from the broker.
            </summary>
            <param name="self">The broker.</param>
            <param name="modelRequest">The model request to determine the model with.</param>
            <returns>The model from the broker matching the <paramref name="modelRequest" />, or <see langword="null" />.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelPurpose.Unknown">
            <summary>
            The purpose has not been defined or can not be determined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelPurpose.Chat">
            <summary>
            Suited to chat experiences.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotModelRequest">
            <summary>
            Represents a request for a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModel" /> that matches given conditions.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotModel" />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelRequest.Gpt4o">
            <summary>
            A request for a GPT-4o model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelRequest.Gpt41">
            <summary>
            A request for a GPT-4.1 model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelRequest.Gpt4oMini">
            <summary>
            A request for a GPT-4o Mini model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelRequest.DefaultChat">
            <summary>
            A request for the default chat model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModelRequest" /> class.
            </summary>
            <param name="family">The family of the model to request.</param>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelRequest.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotModelCapabilities)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModelRequest" /> class.
            </summary>
            <param name="family">The family of the model to request.</param>
            <param name="capabilities">The capabilities required for the model.</param>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotLanguageModel" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelRequest.#ctor(Microsoft.VisualStudio.Copilot.CopilotModelPurpose)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModelRequest" /> class with the specified <see cref="T:Microsoft.VisualStudio.Copilot.CopilotModelPurpose">purpose</see>.
            </summary>
            <param name="purpose">The purpose of the Copilot request.</param>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotModelPurpose" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelRequest.SelectModel(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotModel})">
            <summary>
            Selects the first model that matches the conditions of this request.
            </summary>
            <param name="models">The ordered list of models to select from.</param>
            <returns>A model matching the selection criteria of this request, or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelRequest.SelectModel``1(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotModel})">
            <summary>
            Selects the first model that matches the conditions of this request.
            </summary>
            <param name="models">The ordered list of models to select from.</param>
            <returns>A model matching the selection criteria of this request, or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotModelRequest.SelectModel``1(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotModel},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotQuota})">
            <summary>
            Selects the first model that matches the conditions of this request.
            </summary>
            <param name="models">The ordered list of models to select from.</param>
            <param name="quotas">The current quotas to evaluate models against.</param>
            <returns>A model matching the selection criteria of this request, or <see langword="null" /> if not found.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelState.Unknown">
            <summary>
            The model is an unknown state. It may be available or may require configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelState.Enabled">
            <summary>
            The model is available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelState.Disabled">
            <summary>
            The model has been disabled. User configuration to enable may be possible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotModelState.Unavailable">
            <summary>
            The model is unavailable to the current user. This may be due to the user's subscription level and may require the user to upgrade before gaining access.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotNoneToolMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotNoneToolMode" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotPromptification">
            <summary>
            Represents a prompt and the associated token count.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotPromptification.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotPromptification" /> class.
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="tokens">The total token count of <paramref name="prompt" />.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptification.Prompt">
            <summary>
            Gets the prompt.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptification.Tokens">
            <summary>
            Gets the amount of tokens used by <see cref="P:Microsoft.VisualStudio.Copilot.CopilotPromptification.Prompt" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet">
            <summary>
            Represents a piece of a prompt meant for consumption by a model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet" /> class.
            </summary>
            <param name="prompt">The contents of this prompt snippet.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet.Prompt">
            <summary>
            Gets the contents of the snippet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQuota">
            <summary>
            Represents the quota information for services.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQuota.#ctor(Microsoft.VisualStudio.Copilot.CopilotQuotaType,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQuota" /> class.
            </summary>
            <param name="type">The type of quota the data represents.</param>
            <param name="timestamp">The timestamp of this quota data in UTC.</param>
            <param name="resetTime">The time when the quota resets, if applicable.</param>
            <param name="limit">The maximum limit of the quota, if applicable.</param>
            <param name="usage">The current usage of the quota, if applicable.</param>
            <param name="overageAllowed">Indicates if further exceeding the quota limit is allowed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQuota.Type">
            <summary>
            Gets the type of quota the data represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQuota.Timestamp">
            <summary>
            Gets the timestamp of this quota data in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQuota.ResetTime">
            <summary>
            Gets when the quota will reset, if it resets, in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQuota.Usage">
            <summary>
            Gets the current usage of the quota if a limit exists.
            </summary>
            <remarks>Can be greater than <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQuota.Limit" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQuota.Limit">
            <summary>
            Gets the maximum limit of the quota. <see langword="null" /> if the quota has no limit.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQuota.OverageAllowed">
            <summary>
            Gets a value indicating whether the user is allowed to exceed the quota limit.
            It's possible for this value to change at any time for example if the user's organization policy changed or they maxed out on spending limits.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQuotaType.Unknown">
            <summary>
            The quota is an unknown type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQuotaType.Models">
            <summary>
            The quota represents regular chat and can potentially represent others in the future.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQuotaType.PremiumModels">
            <summary>
            The quota represents chat with premium features.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQuotaType.CompletionsModels">
            <summary>
            The quota represents completions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotRefinementSessionOptions">
            <summary>
            Options for a refinement session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRefinementSessionOptions.OriginatingInteractionId">
            <summary>
            Gets the originating interaction ID that generated the change spawning the difference view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRefinementSessionOptions.DefaultViewMode">
            <summary>
            Gets the default view mode for the difference view. If not defined, the view mode will start as SideBySide.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Intent">
            <summary>
            Gets the general intent of the request. <see langword="null" /> enables automatic detection of intent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Guidance">
            <summary>
            Gets additional guidance for the handling of the request content.
            </summary>
            <remarks>
            <para>
            Guidance will be provided to the model in additional to any guidance that may be supplied by way of a
            selected <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Intent" />.
            </para>
            <para>
            You can consider this similar to setting or appending to the system prompt.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Model">
            <summary>
            Gets the model selection request for this request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.DirectedResponders">
            <summary>
            Gets the list of responders this request is directed to if there is any.
            If list is empty, mentions and session participants will be used to determine the responders.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions">
            <summary>
            Gets the functions available to this request.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor.Create(System.Delegate)" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" />
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor">Local functions'</see> lifetime is tied to the session instance, do
            not use the same instance across sessions.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.GetFirstCommand(Microsoft.VisualStudio.Copilot.CopilotRequest)">
            <summary>
            Gets the name of the first command in the request.
            </summary>
            <param name="self">The request to look for commands in.</param>
            <returns>The <see cref="P:Microsoft.VisualStudio.Copilot.CopilotCommandMention.Name" /> of the first command in the request, or <see langword="null" /> if there is none.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.GetConfirmation(Microsoft.VisualStudio.Copilot.CopilotRequest)">
            <summary>
            If request is a confirmation, gets the confirmation instance.
            </summary>
            <param name="self"></param>
            <returns><see cref="T:Microsoft.VisualStudio.Copilot.CopilotConfirmation" /> instance if request represents one, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.WithFunctions(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor})">
            <summary>
            Returns a new request with the <paramref name="functions" /> added.
            </summary>
            <param name="self">The request to add the functions to.</param>
            <param name="functions">The functions to add.</param>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> with <paramref name="functions" /> added to <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.WithFunction(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Delegate)">
            <summary>
            Returns a new request with the local <paramref name="function" /> added.
            </summary>
            <param name="self">The request to add the functions to.</param>
            <param name="function">The functions to add.</param>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> with <paramref name="function" /> added to <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" />.</returns>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor.Create(System.Delegate)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.WithContext(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotContext)">
            <summary>
            Returns a new request with the additional <paramref name="context" /> added.
            </summary>
            <param name="self">The request to add the context to.</param>
            <param name="context">The context to add.</param>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> with <paramref name="context" /> added to <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.WithContext(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CopilotContext})">
            <summary>
            Returns a new request with the additional <paramref name="context" /> added.
            </summary>
            <param name="self">The request to add the context to.</param>
            <param name="context">The context to add.</param>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> with <paramref name="context" /> added to <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.WithContent(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotContentPart)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> updated with the additional content <paramref name="part" />.
            </summary>
            <param name="request">The request to update with the extra <paramref name="part">content</paramref>.</param>
            <param name="part">The content part to add.</param>
            <returns>The updated <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" /> containing the new <paramref name="part" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType">
            <summary>
            Represents the initiation type of a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.User">
            <summary>
            The user explicitly invoked this request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.Ambient">
            <summary>
            The request was made without the user's explicit invocation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequestOptions.ToolMode">
            <summary>
            Gets the tool mode to use for the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />.
            </summary>
            <remarks>
            Defaults to <see cref="P:Microsoft.VisualStudio.Copilot.CopilotToolMode.Auto" /> if there are any tools in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequestOptions.RetryType">
            <summary>
            Gets a value indicating what kind of retry request was executed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequestOptions.RetryRequestId">
            <summary>
            Gets the CopilotCorrelationId of the retried <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />.
            Returns <see langword="null" /> if the request has not been retried.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequestOptions.MaxContinuations">
            <summary>
            Gets the maximum number of continuations (additional round trips to the model) to allow before forcing a request to finish.
            </summary>
            <remarks>
            If the value is <see langword="null" /> or less than 0, the default maximum number of continuations is used.
            If the value is greater than or equal to 0, the lesser of this value and the default maximum number of continuations is used.
            Setting the value to 0 will not allow any continuations, so the first response will be returned immediately.
            </remarks>
            <example>
            If this value is set to 1, the request could have at most one continuation:
            * The first response where the model asks for a tool to be called
            * The client then calls the tool, collects the results, and calls back into the model (continues) with the tool results asking to finish the request with no further tool calls.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequestOptions.InitiationType">
            <summary>
            Gets the initiator of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />, defaults to <see cref="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.User" />.
            </summary>
            <remarks>
            <para>
            For requests that are the result of a user action explicitly to invoke Copilot, this value should be set to <see cref="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.User" />.
            Inside of a responder, this only applies to the main request made by the user. Sub-requests such as intent detection should set this to <see cref="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.Ambient" />.
            For requests that are made without the user's explicit invocation of Copilot, such as rename suggestions, this value should be set to <see cref="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.Ambient" />.
            </para>
            <para>
            Request continuations (such as tool calls or function confirmations) will ignore this setting and automatically utilize <see cref="F:Microsoft.VisualStudio.Copilot.CopilotRequestInitiationType.Ambient" /> their
            subsequent requests. An attempt is made to detect sub-requests, but it is best to set the option explicitly.
            </para>
            <para>This does not represent a behavioral difference, it is only for billing purposes.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequiredToolMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequiredToolMode" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequiredToolMode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRequiredToolMode" /> class specifying the required tool.
            </summary>
            <param name="requiredToolName">The name of the required tool.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotResponse">
            <summary>
            Represents a response to a copilot request.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />
            <remarks>
            A response instance is the final state of a response, it is no longer updating.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.InteractionId">
            <summary>
            Gets the interaction ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.SessionId">
            <inheritdoc cref="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.SessionId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.Author">
            <summary>
            Gets the author of this interaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.Status">
            <summary>
            Gets the final status of the response.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.Quotas">
            <summary>
            Gets any quota information that may be available from the responder's service.
            </summary>
            <remarks>
            A quota being present is not an indication that the quota type was utilized in the request.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.FollowUps">
            <summary>
            Gets the example prompts that can be displayed below the response to ask follow up questions.
            </summary>
            <remarks>
            Is this essential for first release?
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.CanRetry">
            <summary>
            Gets a value indicating whether the interaction can be retried.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.Failure">
            <summary>
            Generic error
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.ContentFilter">
            <summary>
            Content filter error
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.MaxTokens">
            <summary>
            Max tokens error
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.UserHasNoChatAccess">
            <summary>
            User does not have chat access
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.OffTopic">
            <summary>
            Not development related question
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.ContentFilterSnippy">
            <summary>
            Content filter error due to public code match filter 'Snippy'.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.QuotaExceeded">
            <summary>
            Run out of quota for Copilot free.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.PremiumQuotaExceeded">
            <summary>
            Run out of quota for premium models.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions.ProvideUI">
            <summary>
            Gets a value indicating whether to provide UI for this session.
            </summary>
            <remarks>
            <para>
            When <see langword="false" />, this creates a new session for interacting
            with the underlying provider but does not create any UI for presenting it.
            </para>
            <para>
            When <see langword="true" />, this gets or creates a top-level session integrated
            to a provided UI. The nature of the top level UI is determined by the service, where it may be a single
            top-level chat session or it may create a new isolated chat session.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionExtensions.GetDefaultLanguageModelAsync(Microsoft.VisualStudio.Copilot.ICopilotSession,System.Threading.CancellationToken)">
            <summary>
            Gets the default chat model for the session.
            </summary>
            <param name="self">The session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Gets the default model encoder for the session.</returns>
            <exception cref="T:System.InvalidOperationException">
            If no default chat language model was founnd in the list of <paramref name="self">models</paramref>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionExtensions.GetModelAsync(Microsoft.VisualStudio.Copilot.ICopilotSession,Microsoft.VisualStudio.Copilot.CopilotModelRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the model for the model request from the session.
            </summary>
            <param name="self">The session.</param>
            <param name="modelRequest">The model request to determine the model with.</param>
            <param name="cancellation">A cancellation request.</param>
            <returns>The model from the session matching the <paramref name="modelRequest" />, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.String,System.DateTime,Microsoft.VisualStudio.Copilot.CopilotSessionParticipant,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.SerializedObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionInfo" /> class.
            </summary>
            <param name="id">The id of the session.</param>
            <param name="name">The name for this session for UI display. Optional.</param>
            <param name="timeCreated">The time the session was created.</param>
            <param name="user">The end user who is chatting with Copilot.</param>
            <param name="metadata">Additional metadata for the session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.Name">
            <summary>
            Gets the name of the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.User">
            <summary>
            Gets the session user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.TimeCreated">
            <summary>
            Gets the time when the session is created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.Id">
            <summary>
            Gets the id of the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.Metadata">
            <summary>
            Gets additional metadata for the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.ClientId">
            <summary>
            Gets the client id for the session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotSessionOptions">
            <summary>
            Options used during the creation of a Copilot session.
            </summary>
            <param name="ClientId">The client Id to use for the session.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Options used during the creation of a Copilot session.
            </summary>
            <param name="ClientId">The client Id to use for the session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.ClientId">
            <summary>The client Id to use for the session.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.DefaultResponder">
            <summary>
            Gets the default responder to use for the session. <see langword="null" /> defaults to the built-in chat participant for selected experience.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.Name">
            <summary>
            Gets an optional name for the session. Used primarily for sessions that are attached to UI-visible threads.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.ShouldPersist">
            <summary>
            Gets a value indicating whether the session should persist across restarts of the IDE. Defaults to false.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.Metadata">
            <summary>
            Gets the metadata to associate with the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.History">
            <summary>
            Gets the history to pre-supply to the new session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionParticipant.Service">
            <summary>
            Gets the service that proffers this participant if any.
            </summary>
            <remarks>
            Generally, <see langword="null" /> here would indicate the user and not null would point.
            </remarks>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotSessionStatus.Available">
            <summary>
            The session is currently available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotSessionStatus.UnavailableAuth">
            <summary>
            The session is unavailable because the user is currently signed out.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotSessionStatus.Closed">
            <summary>
            The session has been closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotThread">
            <summary>
            Represents an individual thread in the Copilot UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThread.#ctor(Microsoft.VisualStudio.Copilot.ICopilotSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThread" /> class.
            </summary>
            <param name="session">The session backing the thread.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotThread.Session">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> backing the thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThread.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThread.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotThreadOptions">
            <summary>
            Options for creating a new Copilot thread.
            </summary>
            <devnote>
            Threads have a HAS-A (not IS-A) relationship with sessions, so thread
            options have a HAS-A (not IS-A) relationship with session options.
            </devnote>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThreadOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionOptions)">
            <summary>
            Options for creating a new Copilot thread.
            </summary>
            <devnote>
            Threads have a HAS-A (not IS-A) relationship with sessions, so thread
            options have a HAS-A (not IS-A) relationship with session options.
            </devnote>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThreadOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThreadOptions" /> class.
            </summary>
            <param name="clientId">The identifier for the client of the thread.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotThreadOptions.ClientId">
            <summary>
            Gets the identifier for the client of the thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotToolMode.None">
            <summary>
            Gets the mode indicating no tools will be used.
            </summary>
            <remarks>
            No tools in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" /> will be used when this mode is selected.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotToolMode.Auto">
            <summary>
            Gets the mode indicating tool usage is optional.
            </summary>
            <remarks>
            Because this mode makes tools optional, <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" /> may contain zero or more tools.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotToolMode.RequireAny">
            <summary>
            Gets the mode indicating tool usage is required.
            </summary>
            <remarks>
            Because this mode requires usage of at least one tool, at least one tool must be provided in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotToolMode.RequireSpecific(System.String)">
            <summary>
            Gets the mode indicating usage of a specific tool is required.
            </summary>
            <remarks>
            Because this mode requires usage of a specific tool, <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Functions" /> must contain the required tool.
            </remarks>
            <param name="toolName">The name of the required tool.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotToolMode" /> requiring usage of a specific tool.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTypeName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTypeName" /> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTypeName.Name">
            <summary>
            Gets the name of type (or the element type <see cref="P:Microsoft.VisualStudio.Copilot.CopilotTypeName.IsArray">if an array</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTypeName.IsArray">
            <summary>
            Gets a value indicating whether or not the type is an array, <see cref="P:Microsoft.VisualStudio.Copilot.CopilotTypeName.Name" /> then referring to the element type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTypeName.Get(System.Type)">
            <summary>
            Gets the default type name for the given type.
            </summary>
            <param name="type"><see cref="T:System.String" />, <see cref="T:System.Threading.Tasks.Task`1" />, <see cref="T:System.Collections.IEnumerable" /> derivative or a primitive type.</param>
            <returns>The matching type name for built in types from <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes" />, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTypeProvider.RenderAsync(Microsoft.VisualStudio.Copilot.CopilotValue,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotValue">
            <summary>
            A container for values used in <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> or <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.#ctor(Microsoft.VisualStudio.Copilot.CopilotTypeName,Microsoft.VisualStudio.Copilot.SerializedObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" /> class.
            </summary>
            <param name="typeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes" />.</param>
            <param name="valueContainer">Serialized object value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.#ctor(Microsoft.VisualStudio.Copilot.CopilotTypeName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" /> class.
            </summary>
            <param name="typeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes" />.</param>
            <param name="value">Value to be serialized, this value must be MessagePack serializable.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.ValueContainer">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value">object</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.CopilotTypeName">
            <summary>
            Gets the Copilot type moniker of the value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.TypeName">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotTypeName">Copilot type moniker</see> of the value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value">
            <summary>
            Gets the value of the context or null if value could not be deserialized or type is not available.
            </summary>
            <remarks>
            The object must be serializable via MessagePack and object value can not be null.
            For type checks, recommendation is to use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotValue.Is``1" /> instead as it will avoid unnecessary deserialization.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Throw when value passed to init is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.Is``1">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.Is``1" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.TryGetValue``1(``0@)">
            <summary>
            Tries to get the serialized value casting it to the provided type.
            </summary>
            <typeparam name="T">Type to cast value to.</typeparam>
            <param name="returnValue">Reference to store the returned value.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.Equals(Microsoft.VisualStudio.Copilot.CopilotValue)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotWorkspaceContext">
            <summary>
            A context object containing the workspace traits context.
            </summary>
            <remarks>
            This context type's current only purpose is to serve as a placeholder to
            the workspace trait providers.
            This will only serve as a fallback for when no other context that provides traits is available.
            </remarks>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotWorkspaceContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotWorkspaceContext" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotEncoder.FromModelAsync(Microsoft.VisualStudio.Copilot.CopilotModel,System.Threading.CancellationToken)">
            <summary>
            Get the encoder for this model if found.
            </summary>
            <param name="model">The model to search for an associated encoder for.</param>
            <param name="cancellationToken">The cancellation token to use.</param>
            <returns>The model associated encoder, or <see langword="null" /> if one is not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.CountTokens(System.String)">
            <summary>
            Count the tokens for the <paramref name="content" />.
            </summary>
            <param name="content">The content to count.</param>
            <returns>The total tokens <paramref name="content" /> takes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.Encode(System.String)">
            <summary>
            Encodes the <paramref name="content" /> into tokens.
            </summary>
            <param name="content">The content to encode into tokens.</param>
            <returns>The list of tokens representing <paramref name="content" />.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.AdditionalTokensPerRequest">
            <summary>
            Gets the number of additional tokens that are required for each request to the model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.AdditionalTokensPerRequestMessage">
            <summary>
            Gets the number of additional tokens that are required for each message in a request to the model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.AdditionalTokensPerToolCall">
            <summary>
            Gets the number of additional tokens that are required for each tool call in a request to the model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.AdditionalTokensPerToolCallRequestMessage">
            <summary>
            Gets the number of additional fixed tokens that are required for each message that contains at least one tool call in a request to the model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.FromModelAsync(Microsoft.VisualStudio.Copilot.CopilotLanguageModel,System.Threading.CancellationToken)">
            <summary>
            Get the text encoder for this language model, if supported.
            </summary>
            <param name="model">The model to get the encoder for.</param>
            <param name="cancellationToken">The cancellation token to use.</param>
            <returns>The encoder to use with the <paramref name="model" /> or <see langword="null" /> if not supported.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotTextEncoder.FromModelOrDefaultAsync(Microsoft.VisualStudio.Copilot.CopilotLanguageModel,System.Threading.CancellationToken)">
            <summary>
            Gets the text encoder for this language model if supported, or returns the default encoder.
            </summary>
            <param name="model">The model to get the encoder for.</param>
            <param name="cancellationToken">The cancellation token to use.</param>
            <returns>The encoder to use with the <paramref name="model" /> or a default encoder if one is not found for the provided model.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ExperimentalFeatures">
            <summary>
            Microsoft.VisualStudio.Copilot experimental features diagnostic codes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ExperimentalFeatures.Api">
            <summary>
            API features diagnostic code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ExperimentalFeatures.Internal">
            <summary>
            Internal features diagnostic code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement">
            <summary>
            The confirmation requirements for a given action.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor" />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement.NotRequired">
            <summary>
            Confirmations are not required for this action.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement.Required">
            <summary>
            Confirmations are required for this action.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement.AlwaysConfirm">
            <summary>
            Confirmations are always required for this action and may not be configured to be skipped by the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute">
            <summary>
            A model-visible description for the attributed element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute" /> class.
            </summary>
            <param name="description">The model-visible description for this element.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute" /> class.
            </summary>
            <param name="name">The model-visible name for this element.</param>
            <param name="description">The model-visible description from this element.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute.Name">
            <summary>
            Gets the optional name override, visible to the model.
            </summary>
            <remarks>
            The name of the function or parameter attributed will be used by default.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute.Description">
            <summary>
            Gets the model-visible description for this element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionAttribute">
            <summary>
            Marks a method as a copilot function.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionAttribute.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionAttribute" /> class.
            </summary>
            <param name="name">The model-visible name for this element.</param>
            <param name="description">The model-visible description from this element.</param>
            <param name="confirmation">The confirmation requirement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionAttribute.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionAttribute" /> class.
            </summary>
            <param name="description">The model-visible description from this element.</param>
            <param name="confirmation">The confirmation requirement.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionAttribute.Confirmation">
            <summary>
            Gets the confirmation requirements for this function.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor" /> class.
            </summary>
            <param name="name">The model-facing name of the function.</param>
            <param name="description">The model-facing description of the function.</param>
            <param name="confirmation">The confirmation requirements for this function.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Name">
            <summary>
            Gets the model-facing name of the function.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Description">
            <summary>
            Gets the model-facing description of the function.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Group">
            <summary>
            Gets the name of a group that this function may be displayed within.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Confirmation">
            <summary>
            Gets the confirmation requirements for this function.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.ReturnType">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider">Copilot type</see> of a return value of the function, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Arguments">
            <summary>
            Gets the arguments to the function.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionHandler">
            <summary>
            Helper base class for function handlers to automate providing and invoking functions.
            </summary>
            <remarks>
            <para>
            Methods on a subclass of this will automatically be listed so long as they are marked with <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute" />.
            </para>
            <para>
            <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionHandler" /> that this implements still expects to be an exported brokered service, so your subclass should
            be proffered as a brokered service matching <see cref="P:Microsoft.VisualStudio.Copilot.CopilotFunctionHandler.Descriptor" />. There is no need to otherwise register function providers.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionHandler.Descriptor">
            <summary>
            Gets the brokered service descriptor for this function handler.
            </summary>
            <remarks>
            Functions generated from the subclass with be proffered as <see cref="T:Microsoft.VisualStudio.Copilot.CopilotProvidedFunctionDescriptor" />, pointing back to this brokered service.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionHandler.GetFunctionsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionHandler.SubscribeForFunctionsAsync(System.IObserver{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext">
            <summary>
            Contains the various extra properties that may be utilized by a function invocation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.Id">
            <summary>
            Gets the function call ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.SessionId">
            <summary>
            Gets the session id that the request and response are part of.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.ResponseInteractionId">
            <summary>
            Gets the interaction ID of the response that this function invocation is a part of.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.OriginalRequest">
            <summary>
            Gets the original request that resulted in this function invocation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.Progress">
            <summary>
            Gets the progress broker for use by the function.
            </summary>
            <remarks>
            If <see cref="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.Progress" /> is not invoked, a generic in-progress state before invocation and
            completed state after invocation will be used, if the call is presented to the user.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.Broker">
            <summary>
            Gets the copilot function broker used for interacting with the client during function invocation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionProviderIdentity">
            <summary>
            Represents the identity of a Copilot function provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionProviderIdentity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionProviderIdentity" /> class with the specified display
            name.
            </summary>
            <param name="displayName">The display name associated with the function provider identity.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionProviderIdentity.DisplayName">
            <summary>
            Gets or initializes the display name of the function provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionProviderIdentity.Icon">
            <summary>
            Gets or initializes the icon moniker associated with the function provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionResult">
            <summary>
            Represents the result of calling a function.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionValueResult" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(Microsoft.VisualStudio.Copilot.CopilotValue)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.String)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Char)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Byte)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.SByte)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Int16)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.UInt16)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Int32)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.UInt32)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Int64)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.UInt64)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Single)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Double)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create(System.Decimal)">
            <summary>
            Creates a value function result from <paramref name="value" />.
            </summary>
            <param name="value">The value to return.</param>
            <returns>A function value result containing <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionResult.Create``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Creates a value function result from <paramref name="values" />.
            </summary>
            <param name="values">The values to return.</param>
            <returns>A function value result containing <paramref name="values" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotFunctionValueResult">
            <summary>
            Represents a data value returned from a function.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotFunctionValueResult.#ctor(Microsoft.VisualStudio.Copilot.CopilotValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionValueResult" /> class.
            </summary>
            <param name="value">The value returned from the function.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotFunctionValueResult.Value">
            <summary>
            Gets the value returned from the function.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor">
            <summary>
            Represents a locally-provided function description.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor.#ctor(System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor" /> class.
            </summary>
            <param name="name">The model-facing name of the function.</param>
            <param name="description">The model-facing description of the function.</param>
            <param name="confirmation">The confirmation requirements for this function.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor.Function">
            <summary>
            Gets the local function invocation, if directly invokable.
            </summary>
            <remarks>
            <para>
            Leave <see langword="null" /> if you're providing a function you intend to handle by inspecting
            the incoming function part yourself.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor.Create(System.Delegate)">
            <summary>
            Creates a local function descriptor from a delegate.
            </summary>
            <param name="function">The function to create a description from.</param>
            <returns>A local function descriptor.</returns>
            <exception cref="T:System.ArgumentException">
            Throw if the given <paramref name="function" /> does not meet the constraints of a local function,
            such as using unsupported argument types or not including <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute" />.
            </exception>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotDescriptionAttribute" />
            <remarks>
            Due to the limited RPC lifetime of a delegate created function, it's only recommended
            to use this for functions you're adding to your own requests (externally or inside an agent).
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMcpFunctionDescriptor">
            <summary>
            A descriptor for a Copilot function that is provided by an MCP server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMcpFunctionDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String,System.String,System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMcpFunctionDescriptor" /> class.
            </summary>
            <param name="providerMoniker">The moniker by which the brokered service that can invoke this function may be requested.</param>
            <param name="serverNameOfFunction">The name of the function as the server knows it.</param>
            <param name="configurationPath">The path to the mcp.json file that describes the server that provides this function.</param>
            <param name="name">The name of the function. This should be unique. Typically prefixed by a unique name of the server.</param>
            <param name="displayName">The name of the function to display to the user.</param>
            <param name="description">The description of the function.</param>
            <param name="confirmation">The confirmation requirement for the function.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMcpFunctionDescriptor.ServerConfigurationHasInputs">
            <summary>
            Gets a value indicating whether the server configuration has placeholders for user-supplied inputs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotProvidedFunctionDescriptor">
            <summary>
            Represents a function originating from a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotProvidedFunctionDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotConfirmationRequirement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotProvidedFunctionDescriptor" /> class.
            </summary>
            <param name="providerMoniker">The service moniker to the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" /> that provides this function.</param>
            <param name="name">The model-facing name of the function.</param>
            <param name="description">The model-facing description of the function.</param>
            <param name="confirmation">The confirmation requirements for this function.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotProvidedFunctionDescriptor.ProviderMoniker">
            <summary>
            Gets the moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" /> providing this function.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotFunction">
            <summary>
            A marshaled Copilot function.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor" />
            <remarks>
            Generally not meant to be implemented directly as it mainly serves to underpin
            <see cref="T:Microsoft.VisualStudio.Copilot.CopilotLocalFunctionDescriptor" />. Due to the RPC lifetime involved,
            it's not generally recommended to use for anything but directly supplying requests
            you are making.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotFunction.InvokeAsync(Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext,Microsoft.VisualStudio.Copilot.CopilotFunctionArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the Copilot function.
            </summary>
            <param name="context">The various contextual information that may be relevant to the function.</param>
            <param name="arguments">Arguments as defined in the descriptors arguments and supplied by the invocation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionResult">value</see> if the underling method has a return type.</returns>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor.Arguments" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionBroker.AskConfirmationAsync(Microsoft.VisualStudio.Copilot.CopilotConfirmationRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Yields the function call to ask confirmation from the user for an operation.
            </summary>
            <param name="options">Options for the confirmation request.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
            <returns>User's response to the confirmation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a function asks for more then one confirmation in the same invocation.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionHandler">
            <summary>
            A function handling endpoint.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotProvidedFunctionDescriptor" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionHandler.InvokeAsync(Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation,Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext,System.Threading.CancellationToken)">
            <summary>
            Invoke the provided <paramref name="function" />.
            </summary>
            <param name="function">The details of the function invocation.</param>
            <param name="context">The various contextual information that may be relevant to the function.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The return value of the function, if any.</returns>
            <remarks>
            If <see cref="P:Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext.Progress" /> is not invoked, a generic in-progress state before invocation and
            completed state after invocation will be used, if the call is presented to the user.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider">
            <summary>
            Standalone or optional agent component that can provide functions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider.GetFunctionsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the functions from this provider.
            </summary>
            <remarks>Caching the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor" /> is recommended for additional performance benefits.</remarks>
            <param name="correlationId">Correlation ID for the associated request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>Functions from this provider.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider.SubscribeForFunctionsAsync(System.IObserver{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor}},System.Threading.CancellationToken)">
            <summary>
            Gets the initial list of functions applicable to all requests and subscribes to further changes.
            </summary>
            <param name="observer">Observer to listen for changes.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an <see cref="T:System.IDisposable" /> that should be disposed to release the observer.</returns>
            <remarks>
            Unlike <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider.GetFunctionsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)" />, this method returns functions that are applicable to all requests.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider">
            <summary>
            Extends the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider" /> to provide MCP-specific functions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.SubscribeServerStatusAsync(System.String,System.String,System.IObserver{Microsoft.VisualStudio.Copilot.McpServerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets the status of a specific MCP server.
            </summary>
            <param name="filePath">The full path to the mcp.json file.</param>
            <param name="serverId">The name of the server, if filtering to a specific server is required.</param>
            <param name="observer">The observer that will receive status updates.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>A value to dispose to cancel the subscription.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="filePath" /> does not point to an mcp.json file that is being tracked.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the designated server cannot be found in the mcp.json file specified by <paramref name="filePath" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.RestartServerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Restarts the specified server.
            </summary>
            <param name="serverId">The name of the server to restart.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A task that completes when the restart operation is done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.SuspendServerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Suspends the specified server.
            </summary>
            <param name="serverId">The name of the server to suspend.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A task that completes when the suspend operation is done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.IsMcpJsonTrackedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether the specified mcp.json file is being tracked by the MCP service.
            </summary>
            <param name="filePath">The full path to the mcp.json file.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns><see langword="true" /> if the mcp.json file is relevant to the current workspace; otherwise <see langword="false" />.</returns>
            <remarks>
            This returns <see langword="false" /> for every file when the MCP feature is disabled.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.GetInputsCountAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the number of inputs relevant to an mcp.json file, and optionally to a particular MCP server.
            </summary>
            <param name="filePath">The full path to the mcp.json file.</param>
            <param name="serverId">The name of the server, if filtering to a specific server is required.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The number of inputs the server configuration requires.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.McpServerStatus">
            <summary>
            Describes the status of an MCP server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.CurrentStatus">
            <summary>
            Gets the current status of the MCP server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.DisablingFilePath">
            <summary>
            Gets the path to an mcp.json file that disables this server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.EclipsingFilePath">
            <summary>
            Gets the path to an mcp.json file with higher precedence and an MCP server configuration with a colliding ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.ErrorMessage">
            <summary>
            Gets a message indicating why the server cannot be started, if applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.ToolsCount">
            <summary>
            Gets the number of tools the server reports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.CanMaybeStart">
            <summary>
            Gets a value indicating whether the server is in a mode where it can maybe start.
            </summary>
            <remarks>
            This property is meant for setting.
            For retrieving the actual final startability of the server, use <see cref="P:Microsoft.VisualStudio.Copilot.McpServerStatus.CanStart" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.CanStart">
            <summary>
            Gets a value indicating whether the server can be started.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.CanSuspend">
            <summary>
            Gets a value indicating whether the server can be suspended.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.McpServerStatus.ServerUri">
            <summary>
            Gets a value indicating the URI of the server, if applicable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.McpServerStatus.Status">
            <summary>
            An enumeration of the possible statuses of an MCP server.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.McpServerStatus.Status.NotStarted">
            <summary>
            The server has not successfully started yet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.McpServerStatus.Status.Starting">
            <summary>
            A connection to the server is being established.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.McpServerStatus.Status.Active">
            <summary>
            The server is running and ready to accept requests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.McpServerStatus.Status.Suspended">
            <summary>
            The connection to the server is temporarily suspended, but it can be resumed on demand by the LLM.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.McpServerStatus.Status.Failed">
            <summary>
            The server failed to start on the last attempt.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotActiveInteractionListener">
            <summary>
            A listener for active interactions to return a streaming interface.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotContinuationListener" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteractionListener.OfferActiveInteractionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionParticipant,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId,System.Threading.CancellationToken)">
            <summary>
            Offers an active interaction to the listener who can optionally return a sink.
            </summary>
            <param name="participant">The author of the interaction.</param>
            <param name="requestId">The correlation id of the interaction.</param>
            <param name="messageId">The message id of the individual interaction.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Optionally returns a context containing the associated <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId" /> and an <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction" /> sink.</returns>
            <remarks>
            <para>
            This is called by a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponder">responder</see> or <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker">broker</see> to notify any listening party of an interaction
            that is to be created or updated. Typically the listener is the UI whereby it can then receive streaming updates from the responder.
            </para>
            <para>The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction" /> to be returned in the context is the base contract. A request can return a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction" />,
            but its purpose is largely limited to updating the set of context that is being included. For example, if an agent adds context beyond what the user adds, it can call
            <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.UpdateContextAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)" /> to update the list.</para>
            <para>For streaming responses, <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" /> should instead be returned as it provides <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink" />.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService">
            <summary>
            Service for managing Copilot component registrations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterContextProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider">copilot context provider</see>.
            </summary>
            <param name="providerMoniker">The moniker that may be used to activate the context provider when needed.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterScopeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotScope">copilot scope</see>.
            </summary>
            <param name="scopeMoniker">The moniker that may be used to activate the scope when needed.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterTypeProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotTypeName},System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider" /> instance at runtime.
            </summary>
            <param name="serviceMoniker">Service moniker used to activate the type provider.</param>
            <param name="copilotTypeNames">Copilot type names supported by this provider.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
            <remarks>This method should be used to register dynamic type providers that are not possible to declare ahead of the time.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterTypeHandlerAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotTypeName},System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.ICopilotTypeHandler" /> for the specified Copilot types.
            </summary>
            <param name="serviceMoniker">The service moniker used to activate the type handler.</param>
            <param name="copilotTypeNames">The list of Copilot type names that this handler supports.</param>
            <param name="cancellation">A cancellation token to monitor for cancellation requests.</param>
            <remarks>
            Type handlers will only get called for registered copilot type names.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterTraitProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotTypeName},System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTraitProvider" />.
            </summary>
            <param name="providerMoniker">The moniker that may be used to activate the trait provider when needed.</param>
            <param name="contextTypeNames">The list of context types we want to support for this trait provider. Refer to <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes" /> for a list of available context values.</param>
            <param name="cancellation">A cancellation token.</param>
            <remarks>
            This method registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTraitProvider" /> with the specified provider moniker and context types.
            So the trait providers will only get called by the registered context types.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)">
            <summary>
            Registers an agent with the provided metadata.
            </summary>
            <param name="agentIdentity">Information required to register an agent. The agent service will not be queried until it is added to a conversation.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,Microsoft.VisualStudio.Copilot.CopilotAgentOptions,System.Threading.CancellationToken)">
            <summary>
            Registers an agent with the provided metadata and options.
            </summary>
            <param name="agentIdentity">Information required to register an agent. The agent service will not be queried until it is added to a conversation.</param>
            <param name="agentOptions">Options for agent interaction with Copilot chat infrastructure such as implicit context.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.UnregisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)">
            <summary>
            Unregisters an agent that was assigned the provided moniker from the service.
            </summary>
            <param name="agentIdentity">Agent identity to unregister.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterFunctionProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Copilot.CopilotFunctionProviderIdentity,System.Threading.CancellationToken)">
            <summary>
            Registers a function provider for the specified service moniker and function provider identity.
            Registered function providers can contribute to core chat infrastructure and tool picker UX.
            </summary>
            <param name="serviceMoniker">Service moniker of the function provider.</param>
            <param name="identity">Identity of the function provider.</param>
            <param name="cancellationToken">Cancellation token to monitor for cancellation.</param>
            <remarks>Registration is optional, function providers used by private responders do not have to be registered.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.UnregisterFunctionProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Unregisters a previously registered function provider associated with the specified service moniker.
            </summary>
            <param name="serviceMoniker">The unique identifier of the service whose function provider is to be unregistered.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotService">
            <summary>
            Visual Studio service that can be queried via service broker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.SubscribeToAvailabilityAsync(System.IObserver{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Subscribes to availability status notifications.
            </summary>
            <param name="availabilityObserver">An observer that will receive notifications based on availability. An initial notification will be sent immediately to inform of the current state.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A value that may be disposed of to cancel the subscription.</returns>
            <remarks>
            When the service is not available, any existing <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> becomes invalid, even if the service was available before and after an unavailability event.
            </remarks>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotService.CheckAvailabilityAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.CheckAvailabilityAsync(System.Threading.CancellationToken)">
            <summary>
            Checks whether the conversation service is currently available.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotService.SubscribeToAvailabilityAsync(System.IObserver{System.Boolean},System.Threading.CancellationToken)" />.
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionAsync(Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionAsync(Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets or creates a copilot session.
            </summary>
            <param name="options">Options to apply to the session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Copilot session data. It must be disposed of by the caller.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the service is not available.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetQuotasAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of quota information for the Copilot service.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Quotas for the applicable <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQuotaType" />s.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets or creates a copilot session without UI.
            </summary>
            <param name="options">Options to apply to the session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Copilot session data. It must be disposed of by the caller.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the service is not available.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartThreadAsync(Microsoft.VisualStudio.Copilot.CopilotThreadOptions,System.Threading.CancellationToken)">
            <summary>
            Starts a new thread in the Copilot chat UI.
            </summary>
            <param name="options">The options to start the thread with.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartRefinementSessionAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},System.Threading.CancellationToken)">
            <summary>
            Starts an inline refinement session with the proposed edits.
            </summary>
            <param name="edits">The initial edits to propose.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            Starting a refinement session will cancel any existing refinement or inline session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartRefinementSessionAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Copilot.CopilotInteractionId,System.Threading.CancellationToken)">
            <summary>
            Starts an inline refinement session with the proposed edits.
            </summary>
            <param name="edits">The initial edits to propose.</param>
            <param name="originatingInteractionId">The ID of the interaction from which the code suggestion originated from.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            Starting a refinement session will cancel any existing refinement or inline session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartRefinementSessionAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Copilot.CopilotRefinementSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Starts an inline refinement session with the proposed edits.
            </summary>
            <param name="edits">The initial edits to propose.</param>
            <param name="options">Allows to customize refinement session behavior.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            Starting a refinement session will cancel any existing refinement or inline session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.ShowSessionAsync(Microsoft.VisualStudio.Copilot.ICopilotSession,System.Threading.CancellationToken)">
            <summary>
            Attempt to show the UI associated with the provided <paramref name="session" />.
            </summary>
            <param name="session">The session to display the UI for.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            For a session that has already been closed, or if a session that was not created with UI, this will
            no-op.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.ShowOutputLogsAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the output window for the Copilot service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionsAsync(Microsoft.VisualStudio.Copilot.CopilotSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Get all current sessions
            </summary>
            <param name="options">Options to apply to the session.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of sessions</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetThreadsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all current threads.
            </summary>
            <param name="persistencePath">The persistence path for the threads to return.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of threads</returns>
            <remarks>
            The caller is responsible for disposing the returned <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThread" /> instances.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetThreadsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all current threads.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of threads</returns>
            <remarks>
            The caller is responsible for disposing the returned <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThread" /> instances.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            Gets a session given a copilot session identifier, if there is no such session this method will return null.
            </summary>
            <param name="sessionId">Session identifier.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> instance if a session with the given id is available, null otherwise.
            </returns>
            <remarks>
            This method returns a wrapper that is disposable only for purposes of disposing the proxy and will not dispose
            the actual session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartInlineSessionAsync(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Copilot.CopilotClientId,System.Threading.CancellationToken)">
            <summary>
            Starts an inline session at the start position of point.
            </summary>
            <param name="point">The position to show inline session.</param>
            <param name="clientId">The identifier for the client of the session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.EndSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            End a copilot session.
            </summary>
            <param name="sessionId">Session identifier.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <remarks>No-op when deleting a non-existent session.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetSessionInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get Copilot session info of this session (user, time created and id).
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>the session info.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SubscribeInteractionsAsync(System.IObserver{Microsoft.VisualStudio.Copilot.CopilotCollectionChangedArgs{Microsoft.VisualStudio.Copilot.CopilotInteraction}},System.Threading.CancellationToken)">
            <summary>
            Subscribes to the interactions (queries and responses) in this session.
            </summary>
            <remarks>
            Observers will be sent the current list of interactions (if non-empty), and lists of new interactions that were appended or removed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetInteractionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a snapshot of the interactions up to this point.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A snapshot of the interactions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.EndAsync(System.Threading.CancellationToken)">
            <summary>
            Ends the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> for all the users.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>Unlike Dispose(), which only cleans up the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> proxy for the caller, this method permanently ends the
            session for all <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> proxy instances that point to the same underlying session.
            Call any methods after <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.EndAsync(System.Threading.CancellationToken)" /> result in an <see cref="T:System.ObjectDisposedException" /> being thrown.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SendRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Threading.CancellationToken)">
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SendRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRequestOptions,System.Threading.CancellationToken)">
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.ContinueAsync(Microsoft.VisualStudio.Copilot.CopilotResponse,Microsoft.VisualStudio.Copilot.CopilotRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Continues generating the given <paramref name="response" />.
            </summary>
            <param name="response">The response to continue.</param>
            <param name="requestOptions">The request options, which should match those of the original <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SendRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRequestOptions,System.Threading.CancellationToken)" />.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>The updated response.</returns>
            <remarks>
            This is used to continue generating responses after a response has been updated with a manually supplied function result,
            or after a function confirmation has been received.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="response" /> doesn't come from this session or match a previously started response.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="response" /> or <paramref name="requestOptions" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SubscribeActiveInteractionListenerAsync(Microsoft.VisualStudio.Copilot.ICopilotActiveInteractionListener,System.Threading.CancellationToken)">
            <summary>
            Registers a listener that may hook up to live stream interactions.
            </summary>
            <param name="listener">The listener.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetRespondersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the responders attached to the session.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A list of responders attached to the session with the default in the first position.</returns>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.AddResponderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Adds a responder provider to this session.
            </summary>
            <param name="responderProviderService">The service moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The async operation</returns>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetDefaultModelsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the models from the default responder of this session.
            </summary>
            <param name="cancellation">A cancellation token.</param>
            <returns>A list of models from the default responder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetModelsAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Gets the models from the specified responder provider.
            </summary>
            <param name="responderProviderService">The service moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> service.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>A list of models from the responder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.RemoveInteractionsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotMessageId},System.Threading.CancellationToken)">
            <summary>
            Removes the interactions with the given message ids from the session.
            </summary>
            <param name="messageIds">The ids of the interactions to remove.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider.PromptifyAsync(Microsoft.VisualStudio.Copilot.CopilotValue,System.Threading.CancellationToken)">
            <summary>
            Converts a the context data object <paramref name="typeValue" /> into a snippet of a prompt to be sent to a model.
            </summary>
            <param name="typeValue">Type and object to convert into a prompt snippet.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A model prompt representation of the <paramref name="typeValue" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotClientId">
            <summary>
            A string which identifies a client for a session.  This should be a dotted string
            similar to a namespace specifier, such as "Company.Product.Team.Feature[.Subfeature]".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotClientId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotClientId" /> class.
            </summary>
            <param name="id">The string which identifies a client for a session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotClientId.Id">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId">
            <summary>
            A guid which links to the origin of a request and any responses related to it. Each initiated request has a unique CorrelationId.
            </summary>
            <param name="Guid">The guid that correlates to the originating request.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCorrelationId.#ctor(System.Guid)">
            <summary>
            A guid which links to the origin of a request and any responses related to it. Each initiated request has a unique CorrelationId.
            </summary>
            <param name="Guid">The guid that correlates to the originating request.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCorrelationId.Guid">
            <summary>The guid that correlates to the originating request.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId">
            <summary>
            Represents the identifiers for a specific Copilot interaction, whether active or finished.
            </summary>
            <param name="SessionId">The id for the conversation this interaction was a part of.</param>
            <param name="CorrelationId">The correlation id for this interaction. This id will match between requests and any responses to those requests.</param>
            <param name="MessageId">The id for the specific message.</param>
            <remarks>
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /> is associated with a session (e.g. the visible chat window).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> is a shared ID between a request and its response(s).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMessageId" /> is given to each request and each response.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)">
            <summary>
            Represents the identifiers for a specific Copilot interaction, whether active or finished.
            </summary>
            <param name="SessionId">The id for the conversation this interaction was a part of.</param>
            <param name="CorrelationId">The correlation id for this interaction. This id will match between requests and any responses to those requests.</param>
            <param name="MessageId">The id for the specific message.</param>
            <remarks>
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /> is associated with a session (e.g. the visible chat window).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> is a shared ID between a request and its response(s).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMessageId" /> is given to each request and each response.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.SessionId">
            <summary>The id for the conversation this interaction was a part of.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.CorrelationId">
            <summary>The correlation id for this interaction. This id will match between requests and any responses to those requests.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.MessageId">
            <summary>The id for the specific message.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId" /> struct.
            for an existing conversation, where new correlation and message IDs will be generated.
            </summary>
            <param name="conversationId"><inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)" path="/param[@name='ConversationId']" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId" /> struct
            for an existing conversation and correlation ID, where a new message ID will be generated.
            </summary>
            <param name="conversationId"><inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)" path="/param[@name='ConversationId']" /></param>
            <param name="correlationId"><inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)" path="/param[@name='CorrelationId']" /></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.ClientId">
            <summary>
            Gets the id of the client for the interaction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMessageId">
            <summary>
            Identifies an individual message associated with a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" />
            </summary>
            <param name="Guid"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMessageId.#ctor(System.Guid)">
            <summary>
            Identifies an individual message associated with a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" />
            </summary>
            <param name="Guid"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMessageId.Guid">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotSessionId">
            <summary>
            A guid uniquely identifying a 'Conversation' that exists in the service.
            These are created by the service at the time a Conversation is initiated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionId.#ctor(System.Guid,Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /> struct.
            </summary>
            <param name="guid">The guid that uniquely identifies the conversation.</param>
            <param name="clientId">The identifier for the client of the conversation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotSessionId.#ctor(System.Guid,Microsoft.VisualStudio.Copilot.CopilotClientId)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionId.Guid">
            <summary>
            Gets the guid that uniquely identifies the conversation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionId.ClientId">
            <summary>
            Gets the identifier for the client of the conversation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.IProgressWithCompletion`1">
            <summary>
            Represents a progress that can be waited upon for all progress events to finish.
            </summary>
            <typeparam name="T">The type of progress update value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IProgressWithCompletion`1.WaitForPendingReportsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that completes when all currently pending reports have completed.
            </summary>
            <param name="cancellation">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when all currently pending reports have completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IProgressWithCompletion`1.CompleteAsync">
            <summary>
            Marks the progress as complete and returns a <see cref="T:System.Threading.Tasks.Task" /> that completes when all progress events have finished.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when all queued progress events have finished.</returns>
            <remarks>
            Calls to <see cref="M:System.IProgress`1.Report(`0)" /> after this is called will be ignored. Exceptions raised from
            <see cref="M:System.IProgress`1.Report(`0)" /> will be captured in the returned <see cref="T:System.Threading.Tasks.Task" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.LanguageNames">
            <summary>
            A class that provides constants for common language names.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.LanguageNames.ParseLanguageName(System.String)">
            <summary>
            Parses the language name.
            </summary>
            <param name="language">The language to parse.</param>
            <returns>The language parsed, or null, if not supported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.LanguageNames.MarkdownIdentifiers">
            <summary>
            Specific identifiers for rendering Markdown code blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.LanguageNames.MarkdownIdentifiers.ResolveIdentifier(System.String)">
            <summary>
            Resolves the language to an identifier to use in rendering Markdown code block.
            </summary>
            <param name="language">The language.</param>
            <returns>The identifier to use in the code block, or null if not supported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentCalling">
            <summary>
            Specifies when an agent should be called to respond.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotAgentCalling.Directly">
            <summary>
            Call the agent only when it is the default responder or is mentioned directly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity">
            <summary>
            Identifies an agent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotImageMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity" /> class.
            </summary>
            <param name="service">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> service.</param>
            <param name="shortName">The short name used for mentions.</param>
            <param name="name">The name to display for responses from this agent.</param>
            <param name="icon">The avatar used to to display for responses from this agent.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.Calling">
            <summary>
            Gets the method as to when this agent should be called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.ShortName">
            <summary>
            Gets the short name of the agent used to mention it. (ex. "foo" for @foo).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.ShortDescription">
            <summary>
            Gets a short user-visible description of the agent for display in completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.Description">
            <summary>
            Gets a longer user-visible description of the agent for display when users choose an agent starting a new thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentOptions">
            <summary>
            Addition options defining how agents interact with chat.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotAgentOptions.Default">
            <summary>
            Gets the default instance of options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentOptions.SupportsImplicitContext">
            <summary>
            Gets a value indicating whether the agent supports implicit context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentOptions.SupportsModelSelection">
            <summary>
            Gets a value indicating whether the agent supports model selection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContinuationListener">
             <summary>
             A simple means to provide an existing builder for a call to <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.SendDirectRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions,System.Threading.CancellationToken)" />.
             </summary>
             <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker" />
             <example>
             It may be that a responder wants to manually assemble a response to the user, but still allow the broker to stream
             to the sink directly at a later stage.
             <code>
             public async IAsyncEnumerable&lt;CopilotResponse&gt; RespondAsync(ICopilotResponderBroker broker, CopilotRequest request, CopilotRespondArgs respondArgs, [EnumeratorCancellation] CancellationToken cancellation)
             {
                 // Create a response to manually stream some content to the user.
                 ICopilotResponseBuilder builder = await broker.CreateResponseAsync(cancellation);
                 var getInfoProgress = await responseBuilder.CreateProgressContentAsync(cancellation);
                 getInfoProgress.Report("Getting information...");
                 // get extra info
                 getInfoProgress.Report("Got information", CopilotProgressStatus.Completed);
            
                 request = request with { /* add extra info */ };
            
                 var options = new CopilotDirectResponseOptions
                 {
                     // Use CopilotContinuationListener to provide the existing builder to the broker to stream to.
                     ActiveResponseListener = new CopilotContinuationListener(this.sessionId, request.CorrelationId, builder),
                 };
            
                 await foreach (var response in broker.SendDirectRequestAsync(finalRequest, options, cancellation))
                     yield return response;
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContinuationListener.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContinuationListener" /> class.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="correlationId">The correlation id of the <paramref name="builder">in-progress response</paramref>.</param>
            <param name="builder">The in-progress response builder.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContinuationListener.OfferActiveInteractionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionParticipant,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotRespondArgs">
            <summary>
            Provides arguments for <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)" /> call.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRespondArgs.RequestOptions">
            <summary>
            Gets the request options for the <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)" /> call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRespondArgs.#ctor(Microsoft.VisualStudio.Copilot.CopilotRequestOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotRespondArgs" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotResponderBrokerExtensions.GetDefaultLanguageModelAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,System.Threading.CancellationToken)">
            <summary>
            Gets the default chat model for the broker.
            </summary>
            <param name="self">The responder broker.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Gets the default model for the broker.</returns>
            <exception cref="T:System.InvalidOperationException">
            If no default chat model from the broker was found.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotResponderBrokerExtensions.GetModelAsync``1(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotModelRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the model for the model request from the broker.
            </summary>
            <param name="self">The broker.</param>
            <param name="modelRequest">The model request to determine the model with.</param>
            <param name="cancellation">A cancellation request.</param>
            <returns>The model from the broker matching the <paramref name="modelRequest" />, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,Microsoft.VisualStudio.Copilot.CopilotImageMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity" /> class.
            </summary>
            <param name="service">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider">responder provider service</see> that owns this responder.</param>
            <param name="name">The full displayed name of the responder.</param>
            <param name="icon">The image moniker for the responders avatar.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity.Service">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider">responder provider service</see> that owns this responder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotInteractiveResponder">
            <summary>
            Represents a Copilot session responder that supports interactive prompts during a request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractiveResponder.ContinueAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotResponse,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)">
            <summary>
            Respond to a given <paramref name="request" />.
            </summary>
            <param name="broker">The broker for the responder to issue model requests through. Dispose before exiting.</param>
            <param name="request">The request.</param>
            <param name="response">The response that is being resumed. This may contain any user interactions such as confirmations.</param>
            <param name="respondArgs">Arguments defining how the responder should behave.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>0 or more completed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" />.</returns>
            <remarks>
            <paramref name="broker" /> is a <see cref="T:StreamJsonRpc.RpcMarshalableAttribute" /> proxy and must be disposed before exiting.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotModelAvailability">
            <summary>
            Interface for checking model availability in Copilot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotModelAvailability.GetModelsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the models available through Copilot.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>The models that Copilot supports.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponder">
            <summary>
            Represents a Copilot session responder.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.AddResponderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)" />
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)">
            <summary>
            Respond to a given <paramref name="request" />.
            </summary>
            <param name="broker">The broker for the responder to issue model requests through. Dispose before exiting.</param>
            <param name="request">The request.</param>
            <param name="respondArgs">Arguments defining how the responder should behave.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>0 or more completed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" />.</returns>
            <remarks>
            <paramref name="broker" /> is a <see cref="T:StreamJsonRpc.RpcMarshalableAttribute" /> proxy and must be disposed before exiting.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker">
            <summary>
            A broker offering base services to a responder.
            </summary>
            <remarks>
            Brokers are created on a per-responder basis; the broker a responder receives is associated with their <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity">identity</see>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.SendDirectRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a direct request to the model.
            </summary>
            <param name="request">The request to send.</param>
            <param name="options">Options for making the request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>1 or more completed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.CreateResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a response builder for manually streaming and generating a response.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>A response builder.</returns>
            <remarks>
            <para>
            Calling this will cause the parent <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> to proffer a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" />. For sessions that are UI based,
            this means that pushing content to the returned builder will stream it directly to the UI. It is expected that <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder.FinishAsync(Microsoft.VisualStudio.Copilot.CopilotResponseStatus,System.Threading.CancellationToken)" />
            is called and that a matching <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" /> (<see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.CorrelationId" /> and <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.MessageId" />) is
            returned from <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.GetHistoryAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the history that applies to you for the session you're participating in.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>A list of your interactions in the session, not including the current request.</returns>
            <remarks>
            For directly mentioned agents, this history is straightforward, only requests that mentioned the agent and agent responses
            will be included. For unmentioned responders, these will include any request that was responded to by that responder.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.ContinueAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotResponse,Microsoft.VisualStudio.Copilot.CopilotRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Continues a request that was paused previously for an user interaction such a confirmation prompt.
            </summary>
            <param name="request">The request to send.</param>
            <param name="response">The response to continue.</param>
            <param name="options">Options for making the continuation request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>1 or more completed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponderModelAvailability">
            <summary>
            Optional interface for indicating model support inside of a responder provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderModelAvailability.GetModelsAsync(Microsoft.VisualStudio.Copilot.ICopilotModelAvailability,System.Threading.CancellationToken)">
            <summary>
            Gets the models available through this responder.
            </summary>
            <param name="copilotModelAvailability">The upstream models available through the Copilot service for this responder.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>The models that this responder supports.</returns>
            <remarks>
            Usually this will be the full set or a subset of the models available through the Copilot service (via <paramref name="copilotModelAvailability" />),
            but the responder may choose to surface an entirely different set of models if it has its own mechanism for issuing requests to those models.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider">
            <summary>
            Brokered service that provides <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponder">responders</see> per <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession">session</see>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider.GetIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the identity of the responder.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>The identity of the responder.</returns>
            <remarks>
            For agents, the identity returned here must match that which is provided to <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider.CreateResponderAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            Create a responder for a specific <paramref name="sessionId">session</paramref>.
            </summary>
            <param name="sessionId">The id of the session to create the session for.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A new responder for this session.</returns>
            <remarks>
            The lifetime of the responder can vary depending on VS lifetime, rpc connection, etc. Implementers should be prepared to fully restore
            any state required whenever this is called.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.SerializedObject">
             <summary>
             A <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> is a wrapper around any MessagePack-serializable object which defers deserialization until requested.
             This allows serialized objects to be passed around in a type-agnostic way without the need to deserialize them until they are actually needed.
             This enables extensions to use custom types in Copilot that can be safely serialized without Copilot needing access to the assembly that defines
             the type. The types can be serialized in the extension before being sent to Copilot and then deserialized back in the extension after retrieving
             from Copilot.
             </summary>
             <example>
             To create a serialized object out of an arbitrary MessagePack-serializable object, simply call <see cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create``1(``0)" />."/&gt;
            
             <code>
             var serializedObject = SerializedObject.Create(new MyCustomType());
             </code>
            
             The inner object you provide is serialized into a raw byte stream inside the <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" />, allowing the
             <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> to be safely passed across process boundaries or stored to disk.
            
             To deserialize the object, call <see cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryGetValue``1(``0@)" />. Deserialization will only succeed if the original type of the
             serialized object matches the requested type T.
            
             <code>
             if (serializedObject.TryGetValue(out MyCustomType value))
             {
                 // use value here
             }
             </code>
            
             If you need to deserialize into a different type than was originally serialized (but which is still compatible with the
             original MessagePack schema), you can call <see cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryDeserialize``1(``0@)" /> which will attempt to deserialize the object into any
             type you request, regardless of the original type. This is useful in some backwards compatibility scenarios to attempt deserialization
             into a new type when the original type is no longer available or had breaking changes.
             </example>
             <remarks>
             Objects stored inside a <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> should not be mutated after the <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> is created since the exact
             timing of the serialization (and thus the snapshot of object contents) is not controlled by the caller.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.#ctor(System.String,System.Buffers.ReadOnlySequence{System.Byte},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> class.
            </summary>
            <param name="typeName">Assembly qualified type name of the data type stored.</param>
            <param name="data">A sequence of bytes in MessagePack format.</param>
            <param name="isJson">A value indicating whether the serialized object is JSON.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.TypeName">
            <summary>
            Gets the type name of the serialized object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.Data">
            <summary>
            Gets a sequence of bytes in MessagePack format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.IsJson">
            <summary>
            Gets a value indicating whether the serialized object is JSON.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.Length">
            <summary>
            Gets the length in bytes of the fragment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> from a value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">Copilot context value to serialize, this value must be serializable by MessagePack.</param>
            <returns>an instance containing serialized data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> using GetType to get the target type.
            </summary>
            <param name="value">Copilot context value to serialize, this value must be serializable by MessagePack.</param>
            <returns>An instance containing serialized data.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> with the given <paramref name="type" />.
            </summary>
            <param name="type">Type of the value.</param>
            <param name="value">Copilot context value to serialize, this value must be serializable by MessagePack.</param>
            <returns>An instance containing serialized data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.CreateFromJson(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> from a JSON string.
            </summary>
            <param name="typeName">Assembly qualified type name of the data type stored.</param>
            <param name="json">The JSON string representing the serialized object.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> containing the serialized data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryGetValue``1(``0@)">
            <summary>
            Tries to get the serialized value as the provided type if stored type is assignable to T.
            </summary>
            <typeparam name="T">Type to check for.</typeparam>
            <returns>Returns true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryDeserialize``1(``0@)">
            <summary>
            Tries to deserialize stored data to passed in type.
            </summary>
            <param name="value">Deserialized value.</param>
            <typeparam name="T">Type to deserialize to.</typeparam>
            <returns>Returns true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryDeserialize(System.Type,System.Object@)">
            <summary>
            Tries to deserialize stored data to passed in type.
            </summary>
            <param name="type">Type to deserialize to.</param>
            <param name="value">Deserialized value.</param>
            <returns>Returns true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Is``1">
            <summary>
            Checks if stored type is of the provided type T.
            </summary>
            <typeparam name="T">Type to check against.</typeparam>
            <returns>True if stored type information matches T, false if not or if stored type can not be loaded in given process.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Equals(Microsoft.VisualStudio.Copilot.SerializedObject)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext">
            <summary>
            Describes a subscription for an active interaction.
            </summary>
            <param name="InteractionId">The ID of the interaction being tracked.</param>
            <param name="ActiveInteraction">The streaming interface.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext.#ctor(Microsoft.VisualStudio.Copilot.CopilotInteractionId,Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction)">
            <summary>
            Describes a subscription for an active interaction.
            </summary>
            <param name="InteractionId">The ID of the interaction being tracked.</param>
            <param name="ActiveInteraction">The streaming interface.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext.InteractionId">
            <summary>The ID of the interaction being tracked.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext.ActiveInteraction">
            <summary>The streaming interface.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActiveResponseExtensions.CreateProgressContentAsync(Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart">progress content part</see> and returns an <see cref="T:System.IProgress`1" /> to update it.
            </summary>
            <param name="response">The response builder</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A <see cref="T:System.IProgress`1" /> wired to report updates to the created content part.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="response" /> is <see langword="null" />.</exception>
            <remarks>
            <para>
            The created <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart" /> will start in the <see cref="F:Microsoft.VisualStudio.Copilot.CopilotProgressStatus.Pending" /> status.
            </para>
            <para>
            Note that this is content progress, the final state of this progress will continue to be visible and persisted.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotContentProgressPart" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActiveResponseExtensions.GetProgressAsync(Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder,Microsoft.VisualStudio.Copilot.CopilotContentProgressPart,System.Threading.CancellationToken)">
            <summary>
            Gets an <see cref="T:System.IProgress`1" /> for an existing <paramref name="part">progress part</paramref>.
            </summary>
            <param name="response">The response builder.</param>
            <param name="part">The existing progress part.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActiveResponseExtensions.Report(System.IProgress{Microsoft.VisualStudio.Copilot.CopilotProgress},System.String,Microsoft.VisualStudio.Copilot.CopilotProgressStatus)">
            <summary>
            Reports a copilot progress update.
            </summary>
            <param name="progress">Progress.</param>
            <param name="state">State message.</param>
            <param name="status">Current status.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction">
            <summary>
            The progressive interaction between UI and the message pipeline.
            </summary>
            <remarks>
            Implement and provide this type to receive progress indications about steps,
            approve or deny side-effect steps, provide streaming content sinks and enable
            post processing steps for individual blocks.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.UpdatePartAsync(Microsoft.VisualStudio.Copilot.CopilotContentPartId,Microsoft.VisualStudio.Copilot.CopilotPartState,System.Threading.CancellationToken)">
            <summary>
            Update a content part's current state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of <see cref="P:Microsoft.VisualStudio.Copilot.CopilotPartState.NewContent" /> doesn't match the original type.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.GetPartAsync(Microsoft.VisualStudio.Copilot.CopilotContentPartId,System.Threading.CancellationToken)">
            <summary>
            Gets the current content part for the given id.
            </summary>
            <param name="partId">The id of the part to retrieve.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>The content part with the <paramref name="partId" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the part id is not found.</exception>
            <remarks>
            If the part is the currently streaming part, a snapshot of the part will be taken.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.UpdateContextAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Updates the context used in the interaction to reflect context used in this interaction step.
            </summary>
            <param name="context">The new list of context for the interaction.</param>
            <param name="cancellation">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse">
            <summary>
            Represents a response that is still in flight.
            </summary>
            <remarks>
            <para>
            While <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" /> represents a fully completed response, <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" /> is the
            sink for events (such as streaming content) from an in-flight response.
            </para>
            <para>
            For each final response that a responder begins to generate, <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> will offer its
            <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SubscribeActiveInteractionListenerAsync(Microsoft.VisualStudio.Copilot.ICopilotActiveInteractionListener,System.Threading.CancellationToken)">subscribers</see> the chance to provide a
            <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" />. Generally this ends up being the UI providing its streaming UI implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse.FinishAsync(Microsoft.VisualStudio.Copilot.CopilotResponseStatus,System.Threading.CancellationToken)">
            <summary>
            Finishes the response with the given <paramref name="reason" />.
            </summary>
            <param name="reason">The reason that this response is finished.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder">
            <summary>
            Builds <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse">responses</see> from streamed content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder.FinishAsync(Microsoft.VisualStudio.Copilot.CopilotResponseStatus,System.Threading.CancellationToken)">
            <summary>
            Finishes building the response and returns the completed result.
            </summary>
            <param name="status">The status of the final response.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The completed response.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink">
            <summary>
            Represents a place for content to be streamed to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.BeginBlockAsync(Microsoft.VisualStudio.Copilot.StreamingContentBlockBase,System.Threading.CancellationToken)">
            <summary>
            Begins a new streamed block.
            </summary>
            <param name="block">A description of the type of content that will be received in this block.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.NotSupportedException">Thrown if called while there is already an open block if block nesting is not supported.</exception>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.WriteBlockContentsAsync(System.String,System.Threading.CancellationToken)" />
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.EndBlockAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.WriteBlockContentsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Writes content to the current block.
            </summary>
            <param name="content">Any amount of content to be added to the current block as-is.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current block.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.EndBlockAsync(System.Threading.CancellationToken)">
            <summary>
            Ends the current block.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.BeginBlockAsync(Microsoft.VisualStudio.Copilot.StreamingContentBlockBase,System.Threading.CancellationToken)" />
            <exception cref="T:System.InvalidOperationException">Thrown when called without a current block.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.WriteContentAsync(Microsoft.VisualStudio.Copilot.CopilotContentPart,System.Threading.CancellationToken)">
            <summary>
            Writes a whole content part.
            </summary>
            <param name="part">The content part to write to the stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when called while a <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.BeginBlockAsync(Microsoft.VisualStudio.Copilot.StreamingContentBlockBase,System.Threading.CancellationToken)">block</see> is open.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.RedactAsync(System.Threading.CancellationToken)">
            <summary>
            Redacts the entire content received by this sink.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock">
            <summary>
            A streaming content block of code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock" /> class.
            </summary>
            <param name="id">The id of the content block.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock.Language">
            <summary>
            Gets the language associated with this code block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock.File">
            <summary>
            Gets the file associated with this code block.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase">
            <summary>
            Base class for content block metadata.
            </summary>
            <remarks>
            The subclasses of this class are largely to denote metadata for
            its contents.
            </remarks>
            <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase" /> class.
            </summary>
            <param name="id">The id of the content block.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase.Id">
            <summary>
            Gets the content part id for this streaming block.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContentPart.Id" />
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.UpdatePartAsync(Microsoft.VisualStudio.Copilot.CopilotContentPartId,Microsoft.VisualStudio.Copilot.CopilotPartState,System.Threading.CancellationToken)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.StreamingTextContentBlock">
            <summary>
            A streaming content block of text.
            </summary>
            <remarks>
            This is generally Markdown text content.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.StreamingTextContentBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.StreamingTextContentBlock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.StreamingTextContentBlock.#ctor(Microsoft.VisualStudio.Copilot.CopilotContentPartId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.StreamingTextContentBlock" /> class.
            </summary>
            <param name="id">The id of the content block.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CommonTraitKeys">
            <summary>
            Provides common trait keys used within the Copilot trait system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CommonTraitKeys.LanguageVersion">
            <summary>
            Represents the common key used for the Language Version trait.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CommonTraitKeys.ProjectType">
            <summary>
            Represents the common key used for the Project Type trait.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CommonTraitKeys.TestFrameworks">
            <summary>
            Represents the common key used for the Test Frameworks trait.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CommonTraitTypes">
            <summary>
            Represents common Copilot type names used for traits in the Copilot system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CommonTraitTypes.LanguageVersion">
            <summary>
            Represents the type name for the Language Version trait.
            Traits using this type should use a <see cref="T:Microsoft.VisualStudio.Copilot.LanguageVersionTrait" /> value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CommonTraitTypes.TestFrameworks">
            <summary>
            Represents the type name for the Test Frameworks trait.
            Traits using this type should use a <see cref="T:Microsoft.VisualStudio.Copilot.TestFrameworkTrait" /> value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.LanguageVersionTrait">
            <summary>
            Represents a trait for language versions associated with a specific programming language.
            </summary>
            <param name="Language">The programming language associated with the version.</param>
            <param name="Version">The version of the programming language.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.LanguageVersionTrait.#ctor(System.String,System.Version)">
            <summary>
            Represents a trait for language versions associated with a specific programming language.
            </summary>
            <param name="Language">The programming language associated with the version.</param>
            <param name="Version">The version of the programming language.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.LanguageVersionTrait.Language">
            <summary>The programming language associated with the version.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.LanguageVersionTrait.Version">
            <summary>The version of the programming language.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.TestFrameworkTrait">
            <summary>
            Represents a trait containing information about the test frameworks in the context.
            It will also contain the programming language associated with the test frameworks.
            </summary>
            <param name="Language">The programming language associated with the test frameworks.</param>
            <param name="TestFrameworks">A collection of test frameworks for the specified language.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.TestFrameworkTrait.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Represents a trait containing information about the test frameworks in the context.
            It will also contain the programming language associated with the test frameworks.
            </summary>
            <param name="Language">The programming language associated with the test frameworks.</param>
            <param name="TestFrameworks">A collection of test frameworks for the specified language.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.TestFrameworkTrait.Language">
            <summary>The programming language associated with the test frameworks.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.TestFrameworkTrait.TestFrameworks">
            <summary>A collection of test frameworks for the specified language.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" /> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref" /> as implicitly
            <see langword="scoped" /> - where the compiler does not allow the <see langword="ref" /> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this" /> for <see langword="struct" /> instance methods.</item>
                <item><see langword="ref" /> parameters that refer to <see langword="ref" /> <see langword="struct" /> types.</item>
                <item><see langword="out" /> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref" /> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Reflection.NullabilityInfo">
            <summary>
            A class that represents nullability info.
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.Type">
            <summary>
            The <see cref="T:System.Type" /> of the member or generic parameter
            to which this NullabilityInfo belongs.
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ReadState">
            <summary>
            The nullability read state of the member.
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.WriteState">
            <summary>
            The nullability write state of the member.
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ElementType">
            <summary>
            If the member type is an array, gives the <see cref="T:System.Reflection.NullabilityInfo" /> of the elements of the array, null otherwise.
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.GenericTypeArguments">
            <summary>
            If the member type is a generic type, gives the array of <see cref="T:System.Reflection.NullabilityInfo" /> for each type parameter.
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityState">
            <summary>
            An enum that represents nullability state.
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Unknown">
            <summary>
            Nullability context not enabled (oblivious)
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.NotNull">
            <summary>
            Non nullable value or reference type
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Nullable">
            <summary>
            Nullable value or reference type
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityInfoContext">
            <summary>
            Provides APIs for populating nullability information/context from reflection members:
            <see cref="T:System.Reflection.ParameterInfo" />, <see cref="T:System.Reflection.FieldInfo" />, <see cref="T:System.Reflection.PropertyInfo" /> and <see cref="T:System.Reflection.EventInfo" />.
            </summary>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.ParameterInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="parameterInfo">The parameter which nullability info gets populated.</param>
            <exception cref="T:System.ArgumentNullException">If the parameterInfo parameter is null.</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" />.</returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.PropertyInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.PropertyInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="propertyInfo">The parameter which nullability info gets populated.</param>
            <exception cref="T:System.ArgumentNullException">If the propertyInfo parameter is null.</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" />.</returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.EventInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.EventInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="eventInfo">The parameter which nullability info gets populated.</param>
            <exception cref="T:System.ArgumentNullException">If the eventInfo parameter is null.</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" />.</returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.FieldInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.FieldInfo" />
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="fieldInfo">The parameter which nullability info gets populated.</param>
            <exception cref="T:System.ArgumentNullException">If the fieldInfo parameter is null.</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" />.</returns>
        </member>
        <member name="T:System.Reflection.NullabilityInfoHelpers">
            <summary>
            Polyfills for System.Private.CoreLib internals.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName" /> method on the <paramref name="builderType" /> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName" /> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1" /> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute" /> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName" />.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName" /> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName" /> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute" /> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" /> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" /> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:JsonSchemaMapper.JsonSchemaGenerationContext">
            <summary>
            Defines the context in which a JSON schema within a type graph is being generated.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.Path">
            <summary>
            The path to the schema document currently being generated.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.TypeInfo">
            <summary>
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> for the type being processed.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.DeclaringType">
            <summary>
            The declaring type of the property or parameter being processed.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.BaseTypeInfo">
            <summary>
            The type info for the polymorphic base type if generated as a derived type.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.PropertyInfo">
            <summary>
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo" /> if the schema is being generated for a property.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.ParameterInfo">
            <summary>
            The <see cref="T:System.Reflection.ParameterInfo" /> if a constructor parameter
            has been associated with the accompanying <see cref="P:JsonSchemaMapper.JsonSchemaGenerationContext.PropertyInfo" />.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaGenerationContext.PropertyAttributeProvider">
            <summary>
            The <see cref="T:System.Reflection.ICustomAttributeProvider" /> corresponding to the property or field being processed.
            </summary>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaGenerationContext.IsDefined``1(System.Boolean)">
            <summary>
            Checks if the type, property, or parameter has the specified attribute applied.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to resolve.</typeparam>
            <param name="inherit">Whether to look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>True if the attribute is defined by the current context.</returns>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaGenerationContext.GetAttribute``1(System.Boolean)">
            <summary>
            Checks if the type, property, or parameter has the specified attribute applied.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to resolve.</typeparam>
            <param name="inherit">Whether to look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>The first attribute resolved from the current context, or null.</returns>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaGenerationContext.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Resolves any custom attributes that might have been applied to the type, property, or parameter.
            </summary>
            <param name="type">The attribute type to resolve.</param>
            <param name="inherit">Whether to look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>An enumerable of all custom attributes defined by the context.</returns>
        </member>
        <member name="T:JsonSchemaMapper.JsonSchemaMapper">
            <summary>
            Maps .NET types to JSON schema objects using contract metadata from <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instances.
            </summary>
        </member>
        <member name="F:JsonSchemaMapper.JsonSchemaMapper.SchemaVersion">
            <summary>
            The JSON schema draft version used by the generated schemas.
            </summary>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaMapper.GetJsonSchema(System.Text.Json.JsonSerializerOptions,System.Type,JsonSchemaMapper.JsonSchemaMapperConfiguration)">
            <summary>
            Generates a JSON schema corresponding to the contract metadata of the specified type.
            </summary>
            <param name="options">The options instance from which to resolve the contract metadata.</param>
            <param name="type">The root type for which to generate the JSON schema.</param>
            <param name="configuration">The configuration object controlling the schema generation.</param>
            <returns>A new <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance defining the JSON schema for <paramref name="type" />.</returns>
            <exception cref="T:System.ArgumentNullException">One of the specified parameters is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="options" /> parameter contains unsupported configuration.</exception>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaMapper.GetJsonSchema(System.Text.Json.JsonSerializerOptions,System.Reflection.MethodBase,JsonSchemaMapper.JsonSchemaMapperConfiguration)">
            <summary>
            Generates a JSON object schema with properties corresponding to the specified method parameters.
            </summary>
            <param name="options">The options instance from which to resolve the contract metadata.</param>
            <param name="method">The method from whose parameters to generate the JSON schema.</param>
            <param name="configuration">The configuration object controlling the schema generation.</param>
            <returns>A new <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance defining the JSON schema for <paramref name="method" />.</returns>
            <exception cref="T:System.ArgumentNullException">One of the specified parameters is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="options" /> parameter contains unsupported configuration.</exception>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaMapper.GetJsonSchema(System.Text.Json.Serialization.Metadata.JsonTypeInfo,JsonSchemaMapper.JsonSchemaMapperConfiguration)">
            <summary>
            Generates a JSON schema corresponding to the specified contract metadata.
            </summary>
            <param name="typeInfo">The contract metadata for which to generate the schema.</param>
            <param name="configuration">The configuration object controlling the schema generation.</param>
            <returns>A new <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance defining the JSON schema for <paramref name="typeInfo" />.</returns>
            <exception cref="T:System.ArgumentNullException">One of the specified parameters is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="typeInfo" /> parameter contains unsupported configuration.</exception>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaMapper.ToJsonString(System.Text.Json.Nodes.JsonNode,System.Boolean)">
            <summary>
            Renders the specified <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance as a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="writeIndented">Whether to indent the resultant JSON text.</param>
            <returns>The JSON node rendered as a JSON string.</returns>
        </member>
        <member name="M:JsonSchemaMapper.JsonSchemaMapper.GenerationState.TryGetExistingJsonPointer(JsonSchemaMapper.JsonSchemaGenerationContext@,System.String@)">
            <summary>
            Registers the current schema node generation context; if it has already been generated return a JSON pointer to its location.
            </summary>
        </member>
        <member name="T:JsonSchemaMapper.JsonSchemaMapperConfiguration">
            <summary>
            Controls the behavior of the <see cref="T:JsonSchemaMapper.JsonSchemaMapper" /> class.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaMapperConfiguration.Default">
            <summary>
            Gets the default configuration object used by <see cref="T:JsonSchemaMapper.JsonSchemaMapper" />.
            </summary>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaMapperConfiguration.IncludeSchemaVersion">
            <summary>
            Determines whether the '$schema' property should be included in the root schema document.
            </summary>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaMapperConfiguration.ResolveDescriptionAttributes">
            <summary>
            Determines whether the <see cref="T:System.ComponentModel.DescriptionAttribute" /> should be resolved for types and properties.
            </summary>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaMapperConfiguration.IncludeTypeInEnums">
            <summary>
            Specifies whether the type keyword should be included in enum type schemas.
            </summary>
            <remarks>
            Defaults to false.
            </remarks>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaMapperConfiguration.TreatNullObliviousAsNonNullable">
            <summary>
            Determines whether non-nullable schemas should be generated for null oblivious reference types.
            </summary>
            <remarks>
            Defaults to <see langword="false" />. Due to restrictions in the run-time representation of nullable reference types
            most occurrences are null oblivious and are treated as nullable by the serializer. A notable exception to that rule
            are nullability annotations of field, property and constructor parameters which are represented in the contract metadata.
            </remarks>
        </member>
        <member name="P:JsonSchemaMapper.JsonSchemaMapperConfiguration.TransformSchemaNode">
            <summary>
            Defines a callback that is invoked for every schema that is generated within the type graph.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>2rbOr624FSF0zikRZpxmbEG9G3v+K+HE/F+HHvDeEtk=</DigestValue></Reference></SignedInfo><SignatureValue>iQPC64ze84qKPvR8BTThiV3mn0grYLyB8PC+d8UxfY3s7GIxV6KgOTt4+UyvqL860AeFj8Y+qscBhjd/Im5AvkNnBPzwfC2STgHMgUd99+4dRG3CqqY7U2L+L7uc1wZyEZb4Nro15KObAecrIciw6s6F4DdwNalMoeWptjlyOIfaQAlH/8Js+jco4sf7PGqVXH3dsJFm+hFge9JfORjekvgE9/VSDk1pO+5BH09tH8p/HcPWTJ29RjrHlfFFyPXQu3TJLbyBZxfgQ3baxKcACh1WVh8ZNfQ3n7Vwv3yEYeMKjnJIcQduEzsG55gWYpFcxv6SM6GyRSZcy00ua62BSQ==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJjjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/TWO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO/WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9coT2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O0cEIvKdX8uG8oQa047+evMfDRr94MG9EWw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF9DCCA9ygAwIBAgITMwAABARsdAb/VysncgAAAAAEBDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTI0MDkxMjIwMTExNFoXDTI1MDkxMTIwMTExNFowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJjjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/TWO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO/WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9coT2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O0cEIvKdX8uG8oQa047+evMfDRr94MG9EWwIDAQABo4IBczCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFPIboTWxEw1PmVpZS+AzTDwooxFOMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAxMis1MDI5MjMwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCI5g/SKUFb3wdUHob6Qhnu0Hk0JCkO4925gzI8EqhS+K4umnvSBU3acsJ+bJprUiMimA59/5x7WhJ9F9TQYy+aD9AYwMtbKsQ/rst+QflfML+Rq8YTAyT/JdkIy7R/1IJUkyIS6srfG1AKlX8n6YeAjjEb8MI07wobQp1F1wArgl2B1mpTqHNDlNqBjfpjySCScWjUHNbIwbDGxiFr93JoEh5AhJqzL+8monaXj7elfsjzIpPnl8NyH2eXjTojYC9a2c4EiX0571KomhENF3RtR25A7/X7+gk6upuE8tyMy4sBkl2MUSF08U+E2LOVcR8trhYxV1lUi9CdgEU2CxODspdcFwxdT1+G8YNcgzHyjx3BNSI4nOZcdSnStUpGhCXbaOIXfvtOSfQX/UwJoruhCugvTnub0Wna6CQiturglCOMyIy/6hu5rMFvqk9AltIJ0fSR5FwljW6PHHDJNbCWrZkaEgIn24M2mG1M/Ppb/iF8uRhbgJi5zWxo2nAdyDBqWvpWxYIoee/3yIWpquVYcYGhJp/1I1sq/nD4gBVrk1SKX7Do2xAMMO+cFETTNSJqfTSSsntTtuBLKRB5mw5qglHKuzapDiiBuD1Zt4QwxA/1kKcyQ5L7uBayG78kxlVNNbyrIOFH3HYmdH0Pv1dIX/Mq7avQpAfIiLpOWwcbjw==</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHKDCCBRCgAwIBAgITMwAAAfaDLyZqVF0iwQABAAAB9jANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yNDA3MjUxODMxMDRaFw0yNTEwMjIxODMxMDRaMIHTMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjo2QjA1LTA1RTAtRDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANFCXizEfzfVjwWYbilRRfnliWevFro3Y+F+iUdOXMTuQnqTV6Ne61Ws8Fi5JuQI2lYdfWVYwwoR84psbKGl8TbvCA4ICsKV76QACLb+FMedHvUtrlcHyr+e6fSShvkO1TjUobo5dTQjJHIEqz3Znf/M3LJoc3DaGy6JqwgCDkWfCMIWMuLIlUJX9TSoZcgM5pFiQ9DfutCIqIBQc4N8iErL66DsdMdcUotj4kSEJU1xO+DIIGQyAyqh/4W/RU9pCv51f2l47qPSzK60Zp+OKGGAA3v6zveRfkht7rroX/h+CK4l69IfabQOksByT0tlZmzVgo0FquRuGJK3KmzzGse7zV1MLu0+uRPHxT3dSLhPUbBuEzAFe15FwaKZjzX7y9IY8YOOJKUJ9/OFeOqPs3UKsuSvXQ5Vpvyer2baecgNT8g98Ph2xrm0tJ4hENS+sBjqz38yJtBXTp/sRaOPBEZfhccP9zr1zOQmNRKp8xM5z48yXOzicISVUd1UAx4wXBBUzr0vRNHYjbtXqHMPmQpM+D7v6EL/oKlPm38S/HuzxZLX0Q5TOhcjs4z+M7iNuYA/LTvcyYOoOn0aWmXON/ZgG5Jd8wlc0yw4HIb+ksUGoybb76EGmcUH9LUYj3G69h1nzKKqnfbokNIU1BIRuOBQUk3lD2XhHp0QlmnQluBvAgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQUSMGbCbjnCX0nD1nF2bgQOAfPSvIwHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwDQYJKoZIhvcNAQELBQADggIBANd5AYqx9XB7tVmEdcrI9duaJhrUND2kJBM8Bm+9MbakqCPrL0IobIHU2MWj36diFRXYI2jGgYvNcAfP57vOuhXxSinYXad8JzGfdT6T+DqHuzXH+qiApIErsIHSHUL6hNIfFUOUFubA1eENCZ4+H+yh2MeDYjPAuI08PEkLbLsVokx9h4pH90GAe9Wu3Qfc4BzpFtIYFBHljvZodsFqmEv0OPAEozqmMP4WueKFTn39tlmqB/vx8XfTUxFP+L5b7ESDFk9I7JzSO9Y1QK0+EPQbelUoVs8qq2hOkilKGaxMAaVbCNCzINl94Ti25Qtb8TN/sDMjofe2hTrO7BZ7nprSNjH4/KoNegWUycV5aT7q1qxvjgY+AaEw5AvQMV2Ad8hLbsDLO6UVi8sSMcP8FfUxylBpvsflRNDzi8JK0jII7pUl5KXxCx1loglbJSWxSCAf+AJb/o0CUigCbqPQhK25tqng5P84yWJWGlRjMirmGfrkkVSgdqpBD3BMxtXTvcyGtTKd9ifs81tz+7LiX48OtrN4Qzi5PupTEDkdOMftqNexty3Hi5JMSZuNRK3Yk4wJnQpXp/cpeh4DKRkuKJIxQiV/gqThV+4AQNz1cUFrm4rAEGy+R4ExQbUDRM3AnYdRmMP+p88zTbftBkJ56GwXXXzgIqpM7yLal47xsitU</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
