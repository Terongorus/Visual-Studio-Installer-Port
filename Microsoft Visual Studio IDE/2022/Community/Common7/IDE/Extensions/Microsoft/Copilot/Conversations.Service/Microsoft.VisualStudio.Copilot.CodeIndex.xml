<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot.CodeIndex</name>
    </assembly>
    <members>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppContextFormatter.ExtractAndNormalizeTypeNames(System.String)">
            <summary>
            Normalizes C++ type names, removing address-of operator, reference operators,
            type modifiers to get the canonical, unqualified type name.
            </summary>
            <param name="typeName">The type name, as captured by the parser.</param>
            <returns>
            The unqualified type name.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppReferenceExtractor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppReferenceExtractor" /> class supporting
            reference extraction from .CS files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppReferenceExtractor.ReferencesQuery">
            <summary>
            Tree-sitter query for extracting reference types that are accessible from any point of the document.
            Interesting symbols:
             - Class member's types.
             - Function return types.
             - Function parameter types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppReferenceExtractor.LocalReferenceQuery">
            <summary>
            Tree-sitter query for extracting local reference types in a smaller scope than a full document, e.g., inside the body of a function.
            Examples:
            - Local variable declarations: account for argument to template types.
            - Constructor implicit and explicit (e.g., new) calls.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppSymbolExtractor">
            <summary>
            Implements a parser that extracts interesting syntax definitions, like classes, functions, and data members, from C++ code
            using GitHub's Tree-Sitter parsing library.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppSymbolExtractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppSymbolExtractor" /> class.
            symbol extraction from C++ source files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppSymbolExtractor.SymbolQuery">
             <summary>
             Based on: https://github.com/github/symbol-extraction/blob/main/crates/lib/src/queries/cpp.scm
            
             Query syntax is documented at: https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax.
            
             You can test your queries at: https://tree-sitter.github.io/tree-sitter/playground.
            
             More info: ----------------------------------------------------------------------------------------
            
             Each top level indented parenthesis pair is a separate query that ends up becoming a 'match'. Matches
             are composed of one or more 'captures' (much like regex captures) that delimit spans of interest within.
             One of these captures ends up being the top-level query (e.g. '@definition.class') and the rest are
             from sub-queries. '@comment' is an example of a sub-query capture within many of the matches below.
            
             Parenthesized expressions like (class_specifier) @definition.class -- matches the class_specifier
             grammar rule and names the capture 'definition.class'.
            
             '.' indicates that two neighboring matches must be immediately adjacent.
            
             '*' indicates that there can be zero or more of the preceding expression.
            
             See the links above for more information.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Cpp.CppSymbolExtractor.CreateNameFromScopes(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpContextFormatter.ExtractAndNormalizeTypeNames(System.String)">
            <summary>
            Normalizes C# type names, removing nullable annotations (?) and null forgiveness
            annotations (!) to get the canonical, unqualified type name.
            </summary>
            <param name="typeName">The type name, as captured by the parser.</param>
            <returns>
            The unqualified type name, without any nullable or null forgiving
            annotations.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpContextFormatter.GetterRegex">
            <remarks>
            Pattern:<br />
            <code>\\s*get((\\s*;)|(\\s=&gt;)|(\\s*{))\\s*</code><br />
            Options:<br />
            <code>RegexOptions.CultureInvariant</code><br />
            Explanation:<br />
            <code>
            ○ Match a whitespace character atomically any number of times.<br />
            ○ Match the string "get".<br />
            ○ 1st capture group.<br />
                ○ Match with 3 alternative expressions.<br />
                    ○ 2nd capture group.<br />
                        ○ Match a whitespace character atomically any number of times.<br />
                        ○ Match ';'.<br />
                    ○ 3rd capture group.<br />
                        ○ Match a whitespace character.<br />
                        ○ Match the string "=&gt;".<br />
                    ○ 4th capture group.<br />
                        ○ Match a whitespace character atomically any number of times.<br />
                        ○ Match '{'.<br />
            ○ Match a whitespace character atomically any number of times.<br />
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpContextFormatter.SetterRegex">
            <remarks>
            Pattern:<br />
            <code>\\s*set((\\s*;)|(\\s=&gt;)|(\\s*{))\\s*</code><br />
            Options:<br />
            <code>RegexOptions.CultureInvariant</code><br />
            Explanation:<br />
            <code>
            ○ Match a whitespace character atomically any number of times.<br />
            ○ Match the string "set".<br />
            ○ 1st capture group.<br />
                ○ Match with 3 alternative expressions.<br />
                    ○ 2nd capture group.<br />
                        ○ Match a whitespace character atomically any number of times.<br />
                        ○ Match ';'.<br />
                    ○ 3rd capture group.<br />
                        ○ Match a whitespace character.<br />
                        ○ Match the string "=&gt;".<br />
                    ○ 4th capture group.<br />
                        ○ Match a whitespace character atomically any number of times.<br />
                        ○ Match '{'.<br />
            ○ Match a whitespace character atomically any number of times.<br />
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpParsingUtils.ParseMethodSignatureForCompletionsList(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol,System.String)">
            <summary>
            Parses the method signature from the provided code and symbol information for the completions list.
            </summary>
            <remarks>
            The parsing logic captures the name and signature of the method, excluding the return type, parameter names, and default values.
            </remarks>
            <param name="symbol">The extracted symbol containing the range information of the method.</param>
            <param name="code">The code from which to extract the method signature.</param>
            <returns>A string representing the method signature.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the ranges of the symbol extend beyond the code.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpReferenceExtractor">
            <summary>
            Extracts CSharp references from C# and Razor code files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpReferenceExtractor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpReferenceExtractor" /> class supporting
            reference extraction from .CS files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpReferenceExtractor.ReferencesQuery">
            <summary>
            Tree-sitter query for extracting reference types that are accessible from any point of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpReferenceExtractor.LocalReferenceQuery">
            <summary>
            Tree-sitter query for extracting local reference types in a smaller scope than a full document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpSymbolExtractor">
            <summary>
            Implements a parser that extracts interesting syntax definitions, like classes, methods, and fields, from C# code
            using GitHub's Tree-Sitter parsing library.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpSymbolExtractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpSymbolExtractor" /> class.
            symbol extraction from .CS files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpSymbolExtractor.SymbolQuery">
             <summary>
             Largely forked from: https://github.com/github/symbol-extraction/blob/main/crates/lib/src/queries/csharp.scm
            
             Query syntax is documented at: https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax.
            
             You can test your queries at: https://tree-sitter.github.io/tree-sitter/playground.
            
             More info: ----------------------------------------------------------------------------------------
            
             Each top level indented parenthesis pair is a separate query that ends up becoming a 'match'. Matches
             are composed of one or more 'captures' (much like regex captures) that delimit spans of interest within.
             One of these captures ends up being the top-level query (e.g. '@definition.class') and the rest are
             from sub-queries. '@comment' is an example of a sub-query capture within many of the matches below.
            
             Parenthesized expressions like (class_declaration) @definition.class -- matches the class_declaration
             grammar rule and names the capture 'definition.class'.
            
             '.' indicates that two neighboring matches must be immediately adjaencent.
            
             '*' indicates that there can be zero or more of the preceding expression.
            
             See the links above for more information.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.CSharp.CSharpSymbolExtractor.CreateNameFromScopes(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.EmbeddingsExtensions">
            <summary>
            Extensions to embeddings calculations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.EmbeddingsExtensions.GetCosineSimilarity(Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingVector{System.Single},Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingVector{System.Single})">
            <summary>
            Calculates the cosine similarity between two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cosine similarity between the two vectors.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the two vectors are not the same dimension.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.EmbeddingsExtensions.OrderByCosineSimilarity``1(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,System.Double}},System.Nullable{System.Int32})">
            <summary>
            Orders a list of items by their cosine similarity score in descending order.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="items">The list of items to order.</param>
            <param name="maxItems">The maximum number of items to return. If null, all items are returned.</param>
            <returns>An array of items ordered by their cosine similarity score in descending order.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator">
            <summary>
            Parser that strips type references in a document and produces code for the
            definition of each type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator.ExtractTypesFromFile(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange})">
            <summary>
            Extracts type names from a given code file. When provided a selection, local types within the selection are extracted.
            </summary>
            <param name="code">Source code from which type names will be extracted.</param>
            <param name="filePath">Specifies the path to the file containing the source code.</param>
            <param name="selection">Defines a range of text within the code to extract local references.</param>
            <returns>An immutable list of type names extracted from the provided code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator.ExtractAllTypesForRange(System.String,System.String,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange)">
            <summary>
            Extracts all referenced types from the specified file within the provided range.
            </summary>
            <param name="code"> Source code from which type names will be extracted.</param>
            <param name="filePath">Specifies the path to the file containing the source code.</param>
            <param name="range">Filters to only types referenced within that range.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator.ReferenceExtractorExistsForFile(System.String)">
            <summary>
            Method to return if the an extractor exists for the given file extension.
            </summary>
            <param name="extension">File extension</param>
            <returns>Boolean value showing whether the file exists or not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator.SkeletonizeTypeDefinitions(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange})">
            <summary>
            Converts <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" /> context previously generated
            to a language specific class or type overview, typically with just class and function signatures
            and bodies omitted.
            </summary>
            <param name="typeAndMemberRanges">The symbols to include.</param>
            <returns>A condensed skeletal representation of the code classes and their members.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator.SkeletonizeTypeDefinitions(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},System.String,Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.IContextFormatter)">
            <summary>
            Turns a type and its member symbol ranges into a skeletonized version of the code.
            </summary>
            <param name="typeAndMemberRanges">
            A collection containing the types and members for a document, sorted by start position.
            </param>
            <param name="filePath">The path to the file that the ranges are one.</param>
            <param name="contextFormatter">An object that formats the context.</param>
            <returns>The </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder">
            <summary>
            Context builder helps to build the context for the provided code by extracting all the types and their definitions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.MaxTypeCount">
            <summary>
            The max number of types to extract from the provided context.
            </summary>
            <remarks>
            Caution: This is a set limit to prevent the context builder from extracting too many types, which could lead to
            performance issues from visiting too many files. This limit is arbitrary and may be adjusted in the future.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.TypeNamesFromInitialCodeContext">
            <summary>
            Gets and sets the name of types extracted from the initial code context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.TypeDefinitionsFromInitialCodeContext">
            <summary>
            Gets and sets the list of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" /> containing type definitions from the initial code context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.SelectionRanges">
            <summary>
            Gets and sets the selection ranges from code blocks selected by the user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.#ctor(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder" /> class.
            </summary>
            <param name="codeGenerator">Skeleton Code generator to generate skeleton code.</param>
            <param name="selectionRanges">Selected code ranges selected by the user.</param>
            <param name="logger">Logger to log messages.</param>
            <remarks>
            One pass finds all the symbols referenced within the types that are referenced within the provided context file.
            In the future this number may be increased to find references to references once the ranking heuristics are provided.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.CreateAsync(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator,System.String,System.String,Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange},System.Threading.CancellationToken)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder" /> asynchronously."/&gt;.
            </summary>
            <param name="codeGenerator">Code generator to generate code.</param>
            <param name="contextCode">Selected Code.</param>
            <param name="filePath">File path of the provided context.</param>
            <param name="logger">Logger to log messages.</param>
            <param name="selectionRanges">Selected ranges, if any.</param>
            <param name="cancellationToken">Cancellation token to cancel any request.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextBuilder.ContextWithReferenceHopsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates the context from context and types and using number of reference hops specified.
            </summary>
            <param name="numberOfReferenceHops">Number of reference hops to make.</param>
            <param name="cancellationToken">Cancellation token to cancel any request.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextFormatterBase.SupportedFileExtensions">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextFormatterBase.SingleLineCommentDelimiter">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextFormatterBase.FormatTypeDefinition(Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextFormatterBase.ExtractAndNormalizeTypeNames(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager">
            <summary>
            Used for ranking the context based on the user query, selection ranges and the definition context.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager" /> class.
            </remarks>
            <param name="serviceBrokerClient">Service broker client to gain access to services.</param>
            <param name="logger">Logger to log any issues.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager.#ctor(Microsoft.ServiceHub.Framework.ServiceBrokerClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Used for ranking the context based on the user query, selection ranges and the definition context.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager" /> class.
            </remarks>
            <param name="serviceBrokerClient">Service broker client to gain access to services.</param>
            <param name="logger">Logger to log any issues.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager.MaxRelevantSymbols">
            <summary>
            Maximum number of relevant symbols to consider for embedding calculations.
            </summary>
            <remarks>
            This is the number used to take the top 100 relevant symbols from the Jaccard Similarity calculation.
            Changing this number will affect the number of symbols used for the embedding calculation.
            ⚠️ This can potentially be controlled through experimentation and tuning.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager.MaxFileVisits">
            <summary>
            Used to limit visits to more than 1000 files at a time to avoid OOM since with each ExtractExtentRangeCode
            call, we are loading the file in memory.
            </summary>
            <remarks>
            This is a naive approach and should be replaced with a better one once we have a better way to read the
            ExtentRangeCode. Bug: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/2065874.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager.GetOrderedContextAsync(System.String,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets an ordered context with Jaccard similarity and cosine similarity.
            </summary>
            <param name="contextCode">Code provided from user.</param>
            <param name="userQuery">User query.</param>
            <param name="selectionRanges">Selection ranges from user.</param>
            <param name="definitionContext">Context from the definitions of the symbols.</param>
            <param name="cancellationToken">Cancellation token to cancel any request.</param>
            <param name="useEmbeddedRanking">Flag to use embeddings for ranking.</param>
            <returns>Ordered list of context, which is relevant to the user.</returns>
            <remarks>
            This approach naively tries to rank the n+1 hop references using the Jaccard Similarity.
            We take the <see cref="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextRankingManager.MaxRelevantSymbols" />, and calculate the embeddings for them.
            Embedding calculation is done using the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SemanticContextEmbeddingsManager" />.
            Since every embedding call is a network call, we turned off Embedding calls for now as
            on average it would take longer than 7 seconds to generate answers.
            Bug to re-enable embedding calculation: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/2066133
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextReducer">
            <summary>
            Utilities for reducing the token count of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s before
            using the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator" /> on them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextReducer.ReduceContextAsync(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)">
            <summary>
            Accepts a list of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s and reduces the token count by selectively
            omitting parts of the symbols or dropping symbols.
            </summary>
            <param name="generator">The skeleton code generator.</param>
            <param name="ranges">The ranges to modify.</param>
            <param name="copilotReductionOptions">Reduction option to reduce Semantic Context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Reduced <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.ContextReducer.GetContextReductionDisclaimerComment(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator,System.String)">
            <summary>
            Gets the context reduction disclaimer as a comment in the code language of the specified file.
            </summary>
            <remarks>
            If the file extension is not supported by any of the context formatters, this method returns an empty string.
            </remarks>
            <param name="codeGenerator">The code generator.</param>
            <param name="filePath">The path to the file.</param>
            <returns>The context reduction disclaimer comment.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.IContextFormatter">
            <summary>
            Interface for formatting context for a search query.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.IContextFormatter.SupportedFileExtensions">
            <summary>
            Gets the file extensions that this extractor supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.IContextFormatter.SingleLineCommentDelimiter">
            <summary>
            Gets the delimiter used for single-line comments in the code language of the supported files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.IContextFormatter.ExtractAndNormalizeTypeNames(System.String)">
            <summary>
            Accepts a type name and returns a normalized version of it.
            </summary>
            <param name="typeName">The name of a type.</param>
            <returns>The normalized type name.</returns>
            <remarks>
            This method is used to normalize type names before they are used
            in a search query. For example, it might remove nullable annotations,
            normalize capitalization, or remove generic type arguments.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.IContextFormatter.FormatTypeDefinition(Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},System.String)">
            <summary>
            Accepts a symbol range and one or more child symbol ranges and formats
            them into a string that can be used as context for a copilot query.
            </summary>
            <param name="typeDefinition">The symbol containing the encapsulating type.</param>
            <param name="children">The symbol containing the children of this type.</param>
            <param name="code">The code that the <paramref name="typeDefinition" /> range is over.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedEventArgs">
            <summary>
            Arguments for events concerning files that are marked as invalidated.
            </summary>
            <remarks>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedEventArgs" />.
            </remarks>
            <param name="invalidatedFiles">The files that were invalidated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="invalidatedFiles" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.InvalidatedFile})">
            <summary>
            Arguments for events concerning files that are marked as invalidated.
            </summary>
            <remarks>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedEventArgs" />.
            </remarks>
            <param name="invalidatedFiles">The files that were invalidated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="invalidatedFiles" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedEventArgs.InvalidatedFiles">
            <summary>
            Gets the files that were invalidated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedReason">
            <summary>
            Reason why an indexed file was invalidated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedReason.CreateUpdate">
            <summary>
            The file was created or updated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedReason.Delete">
            <summary>
            The file was deleted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedReason.NotifyInclude">
            <summary>
            The indexer needs to include this file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator">
            <summary>
            An interface for an index orchestrator that can be used to incrementally build and update
            various types of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex" /> over a corpus of documents.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.Disposing">
            <summary>
            Raised right before the index is closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.FileInvalidated">
            <summary>
            Raised when <see cref="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)" />
            is called for a batch of files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds documents to the index or queues them for incremental re-indexing if
            they have not yet changed.
            </summary>
            <param name="documentPaths">The paths to the files to add or reindex.</param>
            <param name="cancellationToken">Cancels the add or pending re-index operation.</param>
            <returns>A task tracking the completion of the operation.</returns>
            <remarks>
            Queueing a previously indexed document for reindexing via this method is a 'no-op' unless
            the document was written to since the last time it was indexed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Adds documents to the index or queues them for incremental re-indexing if
            they have not yet changed.
            </summary>
            <param name="documentPaths">The paths to the files to add or reindex.</param>
            <param name="shouldNotify">
            If <c>true</c>, raises the <see cref="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.FileInvalidated" /> event. This parameter should be
            <c>false</c> if you are calling this method from within the <see cref="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.FileInvalidated" />
            event handler to avoid reentrancy.
            </param>
            <param name="cancellationToken">Cancels the add or pending re-index operation.</param>
            <returns>A task tracking the completion of the operation.</returns>
            <remarks>
            Queueing a previously indexed document for reindexing via this method is a 'no-op' unless
            the document was written to since the last time it was indexed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.DeleteDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes the specified documents from the index.
            </summary>
            <param name="documentPaths">The documents to delete from the index.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A task tracking the progress of the operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.GetSpecializedReader``1">
            <summary>
            Gets the <typeparamref name="T" /> from the set of available <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex" />es.
            </summary>
            <typeparam name="T">The type of the reader to fetch.</typeparam>
            <returns>The specified reader.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the requested reader is not part of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex" />es.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator.UpdateAllAsync(System.Threading.CancellationToken)">
            <summary>
            Checks all documents in the index to see if they changed. Changed documents are reindexed.
            </summary>
            <param name="cancellationToken">Cancels the update operation.</param>
            <returns>A task tracking the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator">
            <summary>
            Implements an index orchestrator that can be used to incrementally build and update multiple types
            of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex" /> from a corpus of documents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.CreateOrOpenAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex},System.String,System.Threading.CancellationToken)">
            <summary>
            Opens an existing group of indexes or creates new ones, if none exist.
            </summary>
            <param name="specializedIndexes">
            A set of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex" /> defining the types of indexes to build.
            </param>
            <param name="databasePath">The path to the database on disk.</param>
            <param name="cancellationToken">Cancels the open or update operation.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator" />.</returns>
            <remarks>
            This method performs an update, checking the timestamps of all indexed documents, reindexing
            as needed. Note that this class does not implement 'live' file watching, so
            <see cref="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)" /> must be
            called each time a file is added, changed, or deleted. <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestratorFileWatcher" /> can
            be used to automate this.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.Disposing">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.FileInvalidated">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.DeleteDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.GetSpecializedReader``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator.UpdateAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestratorFileWatcher">
            <summary>
            Optional component of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator" /> that queues
            index or reindex of any files that are added, deleted, or modified
            while the indexer is running.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestratorFileWatcher.Attach(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator)">
            <summary>
            Attaches this file watcher to a <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator" />.
            </summary>
            <param name="index">The index to attach to.</param>
            <remarks>
            File watchers are automatically created for every directory that is indexed.
            <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator" /> disposes the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestratorFileWatcher" />
            when it is disposed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestratorFileWatcher.FileWatcherFault">
            <summary>
            Event raised when an exception is logged during file watching
            or its updates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.InvalidatedFile">
            <summary>
            Represents an invalidated file.
            </summary>
            <param name="FilePath">The path to the file that was invalidated.</param>
            <param name="Reason">Indicates what changed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.InvalidatedFile.#ctor(System.String,Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.FileInvalidatedReason)">
            <summary>
            Represents an invalidated file.
            </summary>
            <param name="FilePath">The path to the file that was invalidated.</param>
            <param name="Reason">Indicates what changed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.InvalidatedFile.FilePath">
            <summary>The path to the file that was invalidated.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.InvalidatedFile.Reason">
            <summary>Indicates what changed.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex">
            <summary>
            An interface for a specialized type of index, incremental at the file level.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.InitializeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes the specified indexer.
            </summary>
            <param name="databasePath">The path to the database.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.AddDocumentsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds documents to the underlying database.
            </summary>
            <param name="documentPaths">Documents to add.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A task tracking the operation.</returns>
            <remarks>
            Documents already in the database are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.GetDocumentsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get specific metadata for specific documents.
            </summary>
            <param name="documentPaths">The list of documents to get.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A list of documents that are currently indexed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.GetDocumentsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all indexed documents.
            </summary>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A list of documents that are currently indexed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.ReindexDocumentAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Indexes or reindexes <paramref name="filePath" /> if needed.
            </summary>
            <param name="filePath">The path to the file to index.</param>
            <param name="changeTime">The file timestamp.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A task tracking the operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.DeleteDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes <paramref name="filePath" /> from the index.
            </summary>
            <param name="filePath">The path to the file to remove.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A task tracking the operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.ISpecializedIndex.SaveIndexAsync(System.Threading.CancellationToken)">
            <summary>
            Signals to the indexer that it should save to disk. (if applicable)
            </summary>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A task tracking the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator">
            <summary>
            A facade over <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IndexOrchestrator" /> that serializes writes but allows parallel reads.
            </summary>
            <remarks>
            This class is intended to minimize resource waste caused by parallel re-indexing of the
            same file on multiple threads in situations where that file is invalidated repeatedly
            in rapid succession.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.#ctor(Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator" /> that wraps an <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.IIndexOrchestrator" />
            and serializes writes.
            </summary>
            <param name="orchestrator">The indexing orchestrator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="orchestrator" /> is <c>null</c>.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.Disposing">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.FileInvalidated">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.AddOrInvalidateDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.DeleteDocumentsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.GetSpecializedReader``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Index.SchedulingIndexOrchestrator.UpdateAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.connection">
             <summary>
             ⚠️⚠️⚠️ WARNING: SqliteConnection is not thread-safe and not meant to be used across multiple threads.
            
             Since creating and disposing ad-hoc connections is known to be a heavyweight operation despite connection pooling,
             we opt to have a base semaphore  to synchronize access to only a single thread.
             In the situation where transactions are needed, please acquire the semaphore before executing any commmand.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.CreateTablesAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the database schema. Called by <see cref="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.OpenAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="cancellationToken">Cancels the pending operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter" /> so that it is ready for use, and initializes the database schema by calling <see cref="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.CreateTablesAsync(System.Threading.CancellationToken)" />, if needed.
            </summary>
            <param name="cancellationToken">Cancels the pending operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.AddDocumentsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.DeleteDocumentAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.ExecuteNonQueryAsync(Microsoft.Data.Sqlite.SqliteTransaction,System.String,System.Threading.CancellationToken)">
            <summary>
            Callers should acquire the <see cref="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.connectionSemaphore" /> ahead of creating the transaction for this method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.ExecuteNonQueryAsync(Microsoft.Data.Sqlite.SqliteTransaction,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Sqlite.SqliteParameter},System.Threading.CancellationToken)">
            <summary>
            Callers should acquire the <see cref="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.connectionSemaphore" /> ahead of creating the transaction for this method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.ExecuteNonQueryAsync``1(Microsoft.Data.Sqlite.SqliteTransaction,System.String,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Callers should acquire the <see cref="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.connectionSemaphore" /> ahead of creating the transaction for this method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.UpdateDocumentTimestampAsync(Microsoft.Data.Sqlite.SqliteTransaction,Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Document,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Callers should acquire the <see cref="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.connectionSemaphore" /> ahead of creating the transaction for this method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.GetDocumentsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.DocumentSqlStorageBase.GetDocumentsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageReader">
            <summary>
            Defines a storage reading mechanism tracking documents within a repository.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageReader.GetDocumentsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all documents currently marked for indexing.
            </summary>
            <returns>A list of documents that are currently indexed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageReader.GetDocumentsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get specific metadata for specific documents.
            </summary>
            <param name="documentPaths">The list of documents to get.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A list of documents that are currently indexed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageWriter">
            <summary>
            Defines an updatable storage writing mechanism tracking documents within a repository.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageWriter.AddDocumentsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds documents to the underlying database.
            </summary>
            <param name="documentPaths">Documents to add.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A task tracking the operation.</returns>
            <remarks>
            Documents already in the database are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageWriter.DeleteDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the document at <paramref name="filePath" /> from index storage.
            </summary>
            <param name="filePath">The document to delete.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A task tracking completion of the operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.IDocumentStorageWriter.UpdateDocumentTimestampAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Updates an existing document's timestamp in the storage.
            </summary>
            <param name="documentPath">The path to the file.</param>
            <param name="lastWriteTimeUtc">The last write time of this document in UTC timezone.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A task tracking the completion of the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageReader">
            <summary>
            Defines a storage reading mechanism for the symbols in a repository.
            </summary>
            <remarks>
            This is a data layer contract and not expected to be used directly outside of the CodeIndex service.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageReader.GetSymbolCompletionItemsAsync(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of symbol completion items based on the provided search text.
            </summary>
            <param name="symbolSearchText">The text to search for symbols.</param>
            <param name="filesFilter">An optional collection of file paths to filter the search results.</param>
            <param name="symbolKindsFilter">An optional collection of symbol kinds to filter the search results.</param>
            <param name="maxCount">The maximum number of results to return.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a read-only list of <see cref="T:Conversations.Service.Contracts.SymbolContext.SymbolCompletionItem" />s.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageReader.FindPotentialDefinitionsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds the potential <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s for the given unqualified names.
            </summary>
            <param name="unqualifiedNames">The unqualified symbol names, e.g.: 'ISymbolReader', 'CreateSymbolReader', etc.</param>
            <param name="ignoreCase">Whether to ignore case when when searching for the symbols.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>
            A list of symbol definitions that could be the definitions of the <paramref name="unqualifiedNames" /> based on naive name comparison.
            </returns>
            <remarks>
            This method is the first step in naive, language agnostic 'Go to Definition' functionality. Note that in most languages
            this is expected to be ambiguous and return several (potentially dozens) of matches. The caller is expected to further
            filter down the result set by <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind" />, visibility, namespaces/imports, and other language rules.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageReader.GetDefinitionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s that may be the definition for the given symbol.
            </summary>
            <param name="fullyQualifiedName">The fully qualified symbol name. e.g.: 'ISymbolReader'.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>
            A list of symbol definitions that could be the definitions of the <paramref name="fullyQualifiedName" /> based on naive name comparison.
            </returns>
            <remarks>
            This method is the first step in naive, language agnostic 'Go to Definition' functionality. Note that in most languages
            this is expected to be ambiguous and return several (potentially dozens) of matches. The caller is expected to further
            filter down the result set by <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind" />, visibility, namespaces/imports, and other language rules.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageReader.FindSymbolsContainingPositionAsync(System.String,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Finds <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s that contain the given position in the given file.
            </summary>
            <param name="filePath">The path to the containing file.</param>
            <param name="position">The position to check.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A list of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" /> containing the given position.</returns>
            <remarks>
            This is method is useful for determining the fully qualified name of a symbol at a given
            position in a file, perhaps as a heuristic for determining which names are in scope.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageReader.FindSymbolsContainedByRangeAsync(System.String,System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Finds <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s that are contained within the given range in the given file.
            </summary>
            <param name="filePath">The path to the containing file.</param>
            <param name="rangeStart">The start of the range to search for symbols.</param>
            <param name="rangeEnd">The end of the range to search for symbols.</param>
            <param name="cancellationToken">Cancels the operation.</param>
            <returns>A list of symbols contained within the specified range.</returns>
            <remarks>
            Results are ordered by <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange.ExtentRange" /> start.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageWriter">
            <summary>
            Defines a storage writing mechanism for the symbols in a repository.
            </summary>
            <remarks>
            This is a data layer contract and not expected to be used directly outside of the CodeIndex service.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageWriter.InsertOrReplaceDocumentSymbolsAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol},System.Threading.CancellationToken)">
            <summary>
            Inserts <paramref name="symbols" /> into storage for the document at <paramref name="documentPath" />,
            deleting and replacing any existing symbols for that document.
            </summary>
            <param name="documentPath">The path to the file, relative to the repo or workspace root.</param>
            <param name="lastWriteTimeUtc">The last write time of this document in UTC timezone.</param>
            <param name="symbols">The symbols to store.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>A task tracking the completion of the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Document">
            <summary>
            Schema and data contract for the document table.
            </summary>
            <remarks>
            Documents represent the files in the repository that are indexed and link
            Symbols to their containing file.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Symbol">
            <summary>
            Schema and data contract for the symbol table.
            </summary>
            <remarks>
            Symbols represent <see cref="F:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind.Class" />, <see cref="F:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind.Method" />, etc. definitions
            in a particular <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Document" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Symbol.DocumentId">
            <summary>
            Links this record to its containing <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Document" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.SymbolWithFilePath">
            <summary>
            Data contract used for reading queries that JOIN <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Symbol" /> with <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.Schema.Document" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.GetSymbolCompletionItemsAsync(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.FindPotentialDefinitionsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.GetDefinitionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.FindSymbolsContainingPositionAsync(System.String,System.UInt32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.FindSymbolsContainedByRangeAsync(System.String,System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.GetSymbolCompletionItemsForEmptySearchTextAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of symbols with their corresponding file paths that match the target symbol kinds.
            </summary>
            <remarks>
            Symbols are searched across the database until the max count is reached, however, those defined in the provided opened files are prioritized
            over symbols that are not.
            This query does not provide filtering by unqualified name, so it used in flows where the user has not yet typed a search text but have triggered
            filtering of symbol completion items by type, e.g., "#class:", "#method:", etc.
            </remarks>
            <param name="openedFiles">A collection of opened file paths; symbols found in these files will be prioritized in the search.</param>
            <param name="symbolKindsFilter">A collection of symbol kinds to filter by.</param>
            <param name="maxCount">The maximum number of symbols to retrieve.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a read-only list of symbols with file paths.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter" /> and initializes the database schema, if needed.
            </summary>
            <param name="databasePath">The path to the Sqlite DB.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageWriter" /> for storing symbols to disk.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.CreateAsync(Microsoft.Data.Sqlite.SqliteConnection,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter" /> and initializes the database schema, if needed.
            </summary>
            <param name="connection">The connection to the Sqlite database.</param>
            <param name="cancellationToken">Cancels the pending operation.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.ISymbolStorageWriter" /> for storing symbols to disk.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Storage.SymbolStorageReaderWriter.InsertOrReplaceDocumentSymbolsAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol">
            <summary>
            Represents a symbol that is extracted from code via a parser.
            </summary>
            <param name="FilePath">Path to the file in the repo containing the symbol. Generally relative to the repo or workspace root.</param>
            <param name="FullyQualifiedName">The best guess of the fully qualified name of the symbol, as determined by syntax.</param>
            <param name="UnqualifiedName">The name of the symbol, excluding any namespaces.</param>
            <param name="CommentRange">The range of the documentation comment, if any.</param>
            <param name="NameRange">The range of the name of the symbol in the document.</param>
            <param name="BodyRange">The range of the function, class, or namespace body, if any.</param>
            <param name="ExtentRange">The full range of the declaration, excluding comments.</param>
            <param name="Kind">The syntax kind of the element.</param>
            <param name="MethodSignature">The signature of the method, if the symbol is a method, otherwise null.</param>
            <remarks>
            <paramref name="FullyQualifiedName" /> is a best guess based on syntax alone and may not precisely
            match the official language service's name for that symbol. It is intended to be used only for search and
            comparison within the indexing component.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind,System.String)">
            <summary>
            Represents a symbol that is extracted from code via a parser.
            </summary>
            <param name="FilePath">Path to the file in the repo containing the symbol. Generally relative to the repo or workspace root.</param>
            <param name="FullyQualifiedName">The best guess of the fully qualified name of the symbol, as determined by syntax.</param>
            <param name="UnqualifiedName">The name of the symbol, excluding any namespaces.</param>
            <param name="CommentRange">The range of the documentation comment, if any.</param>
            <param name="NameRange">The range of the name of the symbol in the document.</param>
            <param name="BodyRange">The range of the function, class, or namespace body, if any.</param>
            <param name="ExtentRange">The full range of the declaration, excluding comments.</param>
            <param name="Kind">The syntax kind of the element.</param>
            <param name="MethodSignature">The signature of the method, if the symbol is a method, otherwise null.</param>
            <remarks>
            <paramref name="FullyQualifiedName" /> is a best guess based on syntax alone and may not precisely
            match the official language service's name for that symbol. It is intended to be used only for search and
            comparison within the indexing component.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.FilePath">
            <summary>Path to the file in the repo containing the symbol. Generally relative to the repo or workspace root.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.FullyQualifiedName">
            <summary>The best guess of the fully qualified name of the symbol, as determined by syntax.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.UnqualifiedName">
            <summary>The name of the symbol, excluding any namespaces.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.CommentRange">
            <summary>The range of the documentation comment, if any.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.NameRange">
            <summary>The range of the name of the symbol in the document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.BodyRange">
            <summary>The range of the function, class, or namespace body, if any.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.ExtentRange">
            <summary>The full range of the declaration, excluding comments.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.Kind">
            <summary>The syntax kind of the element.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol.MethodSignature">
            <summary>The signature of the method, if the symbol is a method, otherwise null.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.IReferenceExtractor">
            <summary>
            Interface for extracting reference types from a document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.IReferenceExtractor.SupportedFileExtensions">
            <summary>
            Gets the file extensions that this extractor supports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.IReferenceExtractor.ExtractReferences(System.String,System.String)">
            <summary>
            Extracts reference types from the given document. This is limited to types that are referenced within the higher level
            type declaration, such as fields, properties, and method parameters
            </summary>
            <param name="documentPath">The path to the document.</param>
            <param name="code">The code in the document.</param>
            <returns>A sequence of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s marking document references.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.IReferenceExtractor.ExtractLocalReferences(System.String,System.String,Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange)">
            <summary>
            Extracts local reference types from the text range specified. If the text range contains a smaller scope of a code document
            such as a method, it should return all the locally referenced types within those scopes.
            </summary>
            <param name="documentPath">file path of the document</param>
            <param name="code">code of the document</param>
            <param name="range">range of text to extract symbols from.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />s of the locally referenced types in the scopes of the text range.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ISymbolExtractor">
            <summary>
            Abstraction for extracting symbols from a document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ISymbolExtractor.SupportedFileExtensions">
            <summary>
            Gets the file extensions that this extractor supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ISymbolExtractor.ScopeSeparator">
            <summary>
            Gets the language scope separator used when composing the fully qualified name of a symbol.
            For example, in C# this would be the "." operator used to separate namespaces, classes, and methods. In C++, this would be '::'.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ISymbolExtractor.ExtractSymbols(System.String,System.String)">
            <summary>
            Extracts symbols from the given document.
            </summary>
            <param name="documentPath">The path to the document.</param>
            <param name="code">The code in the document.</param>
            <returns>A sequences of <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.ExtractedSymbol" />s marking document declarations.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.PredefinedLanguages">
            <summary>
            The default set of well-known languages for use with <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolSpecializedIndex" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.PredefinedLanguages.SymbolExtractors">
            <summary>
            The default set of well-known symbol extractors for use with <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolSpecializedIndex" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.PredefinedLanguages.ReferenceExtractors">
            <summary>
            The default set of well-known reference extractors for use with <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolSpecializedIndex" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.PredefinedLanguages.ContextFormatters">
            <summary>
            The default set of well-known context formatters for use with <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Context.CodeGenerator" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolExtractorBase">
            <summary>
            Implements a parser that extracts interesting syntax definitions from any language
            using GitHub's Tree-Sitter parsing library.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolExtractorBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolExtractorBase" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the query contains a syntax error.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolExtractorBase.TreeSitterLanguage">
            <summary>
            Gets the Tree-Sitter grammar used for parsing the code.
            </summary>
            <remarks>
            Additional grammars can be added by referencing the submodule and building in:
            https://devdiv.visualstudio.com/DevDiv/_git/CSharp-Tree-Sitter.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolExtractorBase.ExecuteQuery(System.String,System.String,GitHub.TreeSitter.TSQuery)">
            <summary>
            Extracts symbol declarations from the given code.
            </summary>
            <param name="filePath">The path to the source file.</param>
            <param name="code">The code to parse.</param>
            <param name="query">tree-sitter query to execute</param>
            <returns>An enumerable of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" /> containing the location and fully qualified symbol names.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if parsing or loading the language fails.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolRangeExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolRangeExtensions.ExtractExtentRangesCode(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Helps to extract the code from the full range of declaration.
            </summary>
            <param name="symbolRanges">The provided symbol range</param>
            <param name="logger">The logger to log messages</param>
            <returns>Code contained withing the ExtentRange</returns>
            <exception cref="T:System.IO.FileNotFoundException">When the file is not available</exception>
            <remarks>This adjusts for different file encodings checking the file encodings</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolRangeExtensions.ExtractParentAndChildren(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange})">
            <summary>
            Helps to extract the parent level type from a flat list of symbols.
            </summary>
            <param name="typeAndMemberRanges">The provided symbol range</param>
            <returns>Parent and children symbols.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolRangeExtensions.ExtractCodeAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Method to retrieve code from a symbol range by the reading the containing file.
            </summary>
            <param name="symbolRange"><see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange" /> to read the code for.</param>
            <param name="logger">Logger to log exceptions.</param>
            <param name="cancellationToken">Cancellation token to stop propagating the request.</param>
            <returns>String with the code.</returns>
            <remarks>
            Multiple processes could potentially read the same file at the same time. Hence
            <see cref="M:System.IO.File.ReadAllText(System.String)" /> was not used to read the file.
            If reading the file fails, it returns an empty string.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolRangeExtensions.ExtractCodeSnippet(Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange,System.String,System.Boolean)">
            <summary>
            Extracts the code snippet for the given symbol.
            </summary>
            <param name="symbol">Symbol to extract code snippet from.</param>
            <param name="fileContent">Content of the file containing the symbol.</param>
            <param name="includeComments">Whether to include comments in the snippet.</param>
            <returns>The code snippet for the symbol.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Infrastructure.Symbols.SymbolSpecializedIndex">
            <summary>
            Implements an index that specializes in indexing symbol locations from source code files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter">
            <summary>
            Adapts Razor code files for symbol extraction and analysis.
            This class is responsible for identifying and extracting C# code blocks within Razor files,
            adapting them for further symbol analysis.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.RazorCodeBlockPattern">
            <summary>
            Regex pattern to match C# code blocks within Razor files.
            This pattern matches @code, @functions, and @{} blocks, including nested braces.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.SupportsFileExtension(System.String)">
            <summary>
            Checks if the given file extension is supported by the adapter.
            </summary>
            <param name="fileExtension">The file extension to check.</param>
            <returns>True if the file extension is supported; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.ExtractSymbolRanges(System.String,System.String,System.Func{System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange}})">
            <summary>
            Extracts symbol ranges from the Razor code.
            </summary>
            <param name="documentPath">The path of the document.</param>
            <param name="code">The Razor code content.</param>
            <param name="getSymbolRangesFromAdaptedCode">Function to get symbol ranges from adapted code.</param>
            <returns>A list of symbol ranges.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.TryCreateAdaptedCode(System.String,System.String,System.Collections.Generic.List{Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.AdaptedCodeBlock}@)">
            <summary>
            Tries to create adapted code by wrapping extracted Razor code blocks in a class structure.
            </summary>
            <param name="documentPath">The path of the document.</param>
            <param name="code">The Razor code content.</param>
            <param name="adaptedCode">The list of adapted code blocks.</param>
            <returns>True if adapted code was created; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.AdjustSymbolRanges(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.AdaptedCodeBlock)">
            <summary>
            Adjusts the symbol ranges to account for the padding added when adapting the code.
            </summary>
            <param name="symbolRanges">The original symbol ranges.</param>
            <param name="adaptedCode">The adapted code block.</param>
            <returns>A list of adjusted symbol ranges.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.AdjustTextRange(Microsoft.VisualStudio.Copilot.UnstableInternalApi.TextRange,System.Int32,System.Int32)">
            <summary>
            Adjusts a text range to account for the padding added when adapting the code.
            </summary>
            <param name="range">The original text range.</param>
            <param name="paddingLength">The length of the padding.</param>
            <param name="startOffset">The start offset of the adapted code block.</param>
            <returns>The adjusted text range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.ExtractCodeSegments(System.String)">
            <summary>
            Extracts code segments from the Razor code.
            </summary>
            <param name="razorCode">The Razor code content.</param>
            <returns>A list of tuples containing the extracted code and its start offset.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.ExtractCodeBlocks(System.String)">
            <summary>
            Extracts code blocks from the Razor code using a regex pattern.
            </summary>
            <param name="razorCode">The Razor code content.</param>
            <returns>A list of extracted code blocks.</returns>
            <remarks>
            This method uses a regex pattern to extract C# code within @code, @functions, and @{} blocks, including nested braces.
            Pattern explanation:
            - @code\s*{ : Matches the @code keyword followed by optional whitespace and an opening brace.
            - @functions\s*{ : Matches the @functions keyword followed by optional whitespace and an opening brace.
            - @\s*{ : Matches the @ keyword followed by optional whitespace and an opening brace.
            The pattern also handles nested braces within these blocks.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.ExtractClassNameFromPath(System.String)">
            <summary>
            Extracts the class name from the document path.
            </summary>
            <param name="documentPath">The path of the document.</param>
            <returns>The extracted class name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.Razor.RazorCodeAdapter.SanitizeClassName(System.String)">
            <summary>
            Sanitizes the class name to ensure it is a valid C# identifier.
            </summary>
            <param name="className">The class name to sanitize.</param>
            <returns>A sanitized class name.</returns>
            <example>
            <code>
            // "123Component.razor" -&gt; "_123Component"
            // "My.Component.razor" -&gt; "My_Component"
            // "ValidComponent.razor" -&gt; "ValidComponent"
            // "Invalid-Component.razor" -&gt; "Invalid_Component"
            </code>
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SemanticContextEmbeddingsManager">
            <summary>
            Used to manage the embeddings for the semantic context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SemanticContextEmbeddingsManager.EmbeddingBatchSize">
            <summary>
            Max number of embeddings that can be generated in a single request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SemanticContextEmbeddingsManager.EmbeddingAPITokenCapacity">
            <remarks>
            The capacity is determined from OpenAI here: https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#embeddings-models.
            GitHub is currently testing out on increasing embedding token capacity: https://github.com/github/copilot-api/issues/3682.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SemanticContextEmbeddingsManager.SemanticContextEmbeddableRequestObject">
            <summary>
            Helper object to store the embeddable text.
            </summary>
            <remarks>
            The object is mostly used to tract the associated symbol range from the embedding service.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SemanticContextEmbeddingsManager.SemanticContextEmbeddableRequestObject.#ctor(System.String,System.Nullable{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange})">
            <summary>
            Helper object to store the embeddable text.
            </summary>
            <remarks>
            The object is mostly used to tract the associated symbol range from the embedding service.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SymbolRangeEmbeddings">
            <summary>
            Represents the embeddings for a symbol range.
            </summary>
            <param name="symbolRange">The symbol range.</param>
            <param name="embeddingVector">The embedding vector.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SymbolRangeEmbeddings.#ctor(Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange,Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingVector{System.Single})">
            <summary>
            Represents the embeddings for a symbol range.
            </summary>
            <param name="symbolRange">The symbol range.</param>
            <param name="embeddingVector">The embedding vector.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SymbolRangeEmbeddings.SymbolRange">
            <summary>
            Gets or sets the symbol range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.EmbeddingsManager.SymbolRangeEmbeddings.EmbeddingVector">
            <summary>
            Gets or sets the embedding vector.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.JaccardSimilarityCalculator">
            <summary>
            This class is used to compute the Jaccard similarity between two sets of strings.
            The Jaccard similarity is a measure of the overlap between two sets.
            </summary>
            <remarks>
            This class has been adopted from the GitHub copilot client:
            https://github.com/github/copilot-client/blob/main/prompt/src/snippetInclusion/jaccardMatching.ts.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.JaccardSimilarityCalculator.ComputeScore(System.Collections.Generic.IReadOnlySet{System.String},System.Collections.Generic.IReadOnlySet{System.String},System.Boolean)">
            <summary>
            Computes the Jaccard similarity score between two sets of strings.
            </summary>
            <param name="a">The first set of strings.</param>
            <param name="b">The second set of strings.</param>
            <param name="ignoreCase">Ignores the case when comparing the two sets of tokens.</param>
            <returns>The Jaccard similarity score.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.JaccardSimilarityCalculator.ComputeScore(System.String,System.String,System.Boolean)">
            <summary>
            Computes the Jaccard similarity score between two strings using a delineator to compute scores.
            </summary>
            <param name="firstString">The first string.</param>
            <param name="secondString">The second string.</param>
            <param name="ignoreCase">Ignore case when comparing the score.</param>
            <returns>The Jaccard similarity score.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.WordDelineator">
            <summary>
            Tokenizer for strings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.WordDelineator.Delineate(System.String,System.Boolean)">
            <summary>
            Tokenizes a string by splitting it into words and removing common stop words.
            </summary>
            <param name="text">The text to tokenize.</param>
            <param name="ignoreCase">Whether to ignore case when comparing words.</param>
            <returns>A set of words from the text, with common stop words removed.</returns>
            <remarks>
            ⚠️⚠ this does not handle non-en-US locales for now - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2058035/
            ⚠️⚠️ we should consider handling edge case with 1000000 words in a single string.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.WordDelineator.AllCasesRegex">
            <remarks>
            Pattern:<br />
            <code>(?&lt;=[a-z])(?=[A-Z])|(?&lt;=[A-Z])(?=[A-Z][a-z])|[_-]</code><br />
            Explanation:<br />
            <code>
            ○ Match with 3 alternative expressions, atomically.<br />
                ○ Match a sequence of expressions.<br />
                    ○ Zero-width positive lookbehind.<br />
                        ○ Match a character in the set [a-z] right-to-left.<br />
                    ○ Zero-width positive lookahead.<br />
                        ○ Match a character in the set [A-Z].<br />
                ○ Match a sequence of expressions.<br />
                    ○ Zero-width positive lookbehind.<br />
                        ○ Match a character in the set [A-Z] right-to-left.<br />
                    ○ Zero-width positive lookahead.<br />
                        ○ Match a character in the set [A-Z].<br />
                        ○ Match a character in the set [a-z].<br />
                ○ Match a character in the set [-_].<br />
            </code>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.WordDelineator.TextSeparators">
            <summary>
            Set of characters to split the text by.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CodeIndex.TextComparators.JaccardSimilarity.WordDelineator.CommonStopWords">
            <summary>
            Set of common stop words to remove from the text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.IsLineBreak(System.Char)">
            <summary>
            Checks if a character is a line break character.
            </summary>
            <param name="character">The input character.</param>
            <returns>True if the input character is a line break character, else false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetFirstLine(System.String)">
            <summary>
            Gets the text before the first line break.
            </summary>
            <param name="text">The input string.</param>
            <returns>The first line of text.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineFromPosition(System.String,System.Int32)">
            <summary>
            Get the line number from a position in a text.
            </summary>
            <param name="text">The content.</param>
            <param name="position">Position in the text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineAndColumnFromPosition(System.String,System.Int32)">
            <summary>
            Get the line and column number from a position in a text.
            </summary>
            <param name="text">The content.</param>
            <param name="position">Position in the text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineBreakText(System.String)">
            <summary>
            Determines the line break character of the input string.
            </summary>
            <param name="text">The input string.</param>
            <returns>The line break character of the input string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineBreakText(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines the line break text from a ReadOnlySpan.
            If no line break is found, falls back to <see cref="P:System.Environment.NewLine" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.LineBreakLength(System.String,System.Int32)">
            <summary>
            Gets the length of the line break character
            0 : if no line break in the text
            1 : if the line break is one of single line break characters
            2 : if the line break character is \r\n combined
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.NormalizeLineBreaks(System.String,Microsoft.VisualStudio.Text.ITextSnapshot,System.String@)">
            <summary>
            Normalizes the line breaks of a given original string by replacing the line break text with the target line break text.
            </summary>
            <param name="original">The original string to be normalized.</param>
            <param name="snapshot">The text snapshot to use for obtaining the target line break text.</param>
            <param name="targetLineBreak">The target line break text to use for normalization.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string" /> with a copy of this character array.
            </summary>
            <returns>A <see langword="string" />, or <see langword="null" /> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value" /> is <see langword="null" />.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string.
            </summary>
        </member>
        <member name="T:Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO">
            <summary>Contains the basic information for a file. Used for file handles.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_basic_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO.CreationTime">
            <summary>
            <para>The time the file was created in <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> format, which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_basic_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO.LastAccessTime">
            <summary>
            <para>The time the file was last accessed in <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> format.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_basic_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO.LastWriteTime">
            <summary>
            <para>The time the file was last written to in <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> format.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_basic_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO.ChangeTime">
            <summary>
            <para>The time the file was changed in <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> format.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_basic_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO.FileAttributes">
            <summary>
            <para>The file attributes. For a list of attributes, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-attribute-constants">File Attribute Constants</a>. If this is set to 0 in a <b>FILE_BASIC_INFO</b> structure passed to <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a> then none of the attributes are changed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_basic_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS">
            <summary>Identifies the type of file information that GetFileInformationByHandleEx should retrieve or SetFileInformationByHandle should set.</summary>
            <remarks>
            <para>As noted in the preceding section, some file information classes are valid only for use with <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. Others are valid only for use with <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. Where neither function is mentioned, the information class is valid with both functions.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileBasicInfo">
            <summary>
            <para>Minimal information for the file should be retrieved or set. Used for file handles. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_basic_info">FILE_BASIC_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileStandardInfo">
            <summary>
            <para>Extended information for the file should be retrieved. Used for file handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_standard_info">FILE_STANDARD_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileNameInfo">
            <summary>
            <para>The file name should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_name_info">FILE_NAME_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileRenameInfo">
            <summary>
            <para>The file name should be changed. Used for file handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_rename_info">FILE_RENAME_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfo">
            <summary>
            <para>The file should be deleted. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_disposition_info">FILE_DISPOSITION_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileAllocationInfo">
            <summary>
            <para>The file allocation information should be changed. Used for file handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_allocation_info">FILE ALLOCATION INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileEndOfFileInfo">
            <summary>
            <para>The end of the file should be set. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_end_of_file_info">FILE_END_OF_FILE_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileStreamInfo">
            <summary>
            <para>File stream information for the specified file should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_stream_info">FILE_STREAM_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileCompressionInfo">
            <summary>
            <para>File compression information should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_compression_info">FILE_COMPRESSION_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileAttributeTagInfo">
            <summary>
            <para>File attribute information should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_attribute_tag_info">FILE_ATTRIBUTE_TAG_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryInfo">
            <summary>
            <para>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. The number of files returned for each call to <b>GetFileInformationByHandleEx</b> depends on the size of the buffer that is passed to the function. Any subsequent calls to <b>GetFileInformationByHandleEx</b> on the same handle will resume the enumeration operation after the last file is returned. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_both_dir_info">FILE_ID_BOTH_DIR_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryRestartInfo">
            <summary>
            <para>Identical to <b>FileIdBothDirectoryInfo</b>, but forces the enumeration operation to start again from the beginning. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_both_dir_info">FILE_ID_BOTH_DIR_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIoPriorityHintInfo">
            <summary>
            <para>Priority hint information should be  set. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_io_priority_hint_info">FILE_IO_PRIORITY_HINT_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileRemoteProtocolInfo">
            <summary>
            <para>File remote protocol information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_remote_protocol_info">FILE_REMOTE_PROTOCOL_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryInfo">
            <summary>
            <para>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_full_dir_info">FILE_FULL_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryRestartInfo">
            <summary>
            <para>Identical to <b>FileFullDirectoryInfo</b>, but forces the enumeration operation to start again from the beginning. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_full_dir_info">FILE_FULL_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileStorageInfo">
            <summary>
            <para>File storage information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_storage_info">FILE_STORAGE_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileAlignmentInfo">
            <summary>
            <para>File alignment information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_alignment_info">FILE_ALIGNMENT_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdInfo">
            <summary>
            <para>File information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_info">FILE_ID_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryInfo">
            <summary>
            <para>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_extd_dir_info">FILE_ID_EXTD_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryRestartInfo">
            <summary>
            <para>Identical to <b>FileIdExtdDirectoryInfo</b>, but forces the enumeration operation to start again from the beginning. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_extd_dir_info">FILE_ID_EXTD_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfoEx">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileRenameInfoEx">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.MaximumFileInfoByHandleClass">
            <summary>This value is used for validation. Supported values are less than this value.</summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "Kernel32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFileInformationByHandleEx(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS,System.Void*,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetFileInformationByHandleEx(Windows.Win32.Foundation.HANDLE,Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS,System.Void*,System.UInt32)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFileInformationByHandleEx(Windows.Win32.Foundation.HANDLE,Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS,System.Void*,System.UInt32)">
            <summary>Retrieves file information for the specified file.</summary>
            <param name="hFile">
            <para>A handle to the file that contains the information to be retrieved. This handle should not be a pipe handle.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="FileInformationClass">
            <para>A <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ne-minwinbase-file_info_by_handle_class">FILE_INFO_BY_HANDLE_CLASS</a> enumeration value that specifies the type of information to be retrieved. For a table of valid values, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpFileInformation">
            <para>A pointer to the buffer that receives the requested file information. The structure that is returned corresponds to the class that is specified by <i>FileInformationClass</i>. For a table of valid structure types, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwBufferSize">The size of the <i>lpFileInformation</i> buffer, in bytes.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the <i>lpFileInformation</i> parameter. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateFile(System.String,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,System.Nullable{Windows.Win32.Security.SECURITY_ATTRIBUTES},Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,System.Runtime.InteropServices.SafeHandle)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CreateFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,Windows.Win32.Security.SECURITY_ATTRIBUTES*,Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,Windows.Win32.Foundation.HANDLE)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,Windows.Win32.Security.SECURITY_ATTRIBUTES*,Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,Windows.Win32.Foundation.HANDLE)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:\_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <param name="lpFileName">
            <para>The name of the file or device to be created or opened. You may use either forward slashes (/) or backslashes (\\) in this name. In the ANSI version of this function, the name is limited to <b>MAX_PATH</b> characters. To extend this limit to 32,767 wide characters, use this Unicode version of the function and prepend "\\\\?\\" to the path. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a>. For information on special device names, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/defining-an-ms-dos-device-name">Defining an MS-DOS Device Name</a>. To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-streams">File Streams</a>. <div class="alert"><b>Tip</b>  Starting with Windows 10, version 1607, for the unicode version of this function (<b>CreateFileW</b>), you can opt-in to remove the <b>MAX_PATH</b> limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a> for details.</div> <div> </div></para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwDesiredAccess">
            <para>The requested access to the file or device, which can be summarized as read, write, both or neither zero). The most commonly used values are <b>GENERIC_READ</b>, <b>GENERIC_WRITE</b>, or both (<c>GENERIC_READ | GENERIC_WRITE</c>). For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/generic-access-rights">Generic Access Rights</a>, <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-security-and-access-rights">File Security and Access Rights</a>, <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-access-rights-constants">File Access Rights Constants</a>, and <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a>. If this parameter is zero, the application can query certain metadata such as file, directory, or device attributes without accessing that file or device, even if <b>GENERIC_READ</b> access would have been denied. You cannot request an access mode that conflicts with the sharing mode that is specified by the <i>dwShareMode</i> parameter in an open request that already has an open handle. For more information, see the Remarks section of this topic and <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwShareMode">
            <para>The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table). Access requests to attributes or extended attributes are not affected by this flag. If this parameter is zero and <b>CreateFile</b> succeeds, the file or device cannot be shared and cannot be opened again until the handle to the file or device is closed. For more information, see the Remarks section. You cannot request a sharing mode that conflicts with the access mode that is specified in an existing request that has an open handle. <b>CreateFile</b> would fail and the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function would return <b>ERROR_SHARING_VIOLATION</b>. To enable a process to share a file or device while another process has the file or device open, use a</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpSecurityAttributes">
            <para>A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes. This parameter can be <b>NULL</b>. If this parameter is <b>NULL</b>, the handle returned by <b>CreateFile</b> cannot be inherited by any child processes the application may create and the file or device associated with the returned handle gets a default security descriptor. The <b>lpSecurityDescriptor</b> member of the structure specifies a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> for a file or device. If this member is <b>NULL</b>, the file or device associated with the returned handle is assigned a default security descriptor. <b>CreateFile</b> ignores the <b>lpSecurityDescriptor</b> member when opening an existing file or device, but continues to use the <b>bInheritHandle</b> member. The <b>bInheritHandle</b>member of the structure specifies whether the returned handle can be inherited. For more information, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwCreationDisposition">
            <para>An action to take on a file or device that exists or does not exist. For devices other than files, this parameter is usually set to <b>OPEN_EXISTING</b>. For more information, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwFlagsAndAttributes">
            <para>The file or device attributes and flags, <b>FILE_ATTRIBUTE_NORMAL</b> being the most common default value for files. This parameter can include any combination of the available file attributes (<b>FILE_ATTRIBUTE_*</b>). All other file attributes override <b>FILE_ATTRIBUTE_NORMAL</b>. This parameter can also contain combinations of flags (<b>FILE_FLAG_*</b>) for control of file or device caching behavior, access modes, and other special-purpose flags. These combine with any <b>FILE_ATTRIBUTE_*</b> values. This parameter can also contain Security Quality of Service (SQOS) information by specifying the <b>SECURITY_SQOS_PRESENT</b> flag. Additional SQOS-related flags information is presented in the table following the attributes and flags tables. <div class="alert"><b>Note</b>  When <b>CreateFile</b> opens an existing file, it generally combines the file flags with the file attributes of the existing file, and ignores any file attributes supplied as part of <i>dwFlagsAndAttributes</i>. Special cases are detailed in <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>.</div> <div> </div> Some of the following file attributes and flags may only apply to files and not necessarily all other types of devices that <b>CreateFile</b> can open. For additional information, see the Remarks section of this topic and <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>. For more advanced access to file attributes, see <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileattributesa">SetFileAttributes</a>. For a complete list of all file attributes with their values and descriptions, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-attribute-constants">File Attribute Constants</a>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hTemplateFile">
            <para>A valid handle to a template file with the <b>GENERIC_READ</b> access right. The template file supplies file attributes and extended attributes for the file that is being created. This parameter can be <b>NULL</b>. When opening an existing file, <b>CreateFile</b> ignores this parameter. When opening a new encrypted file, the file inherits the discretionary access control list from its parent directory. For additional information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-encryption">File Encryption</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot. If the function fails, the return value is <b>INVALID_HANDLE_VALUE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Security.SECURITY_ATTRIBUTES">
            <summary>The SECURITY_ATTRIBUTES structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypesbase/ns-wtypesbase-security_attributes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.nLength">
            <summary>The size, in bytes, of this structure. Set this value to the size of the **SECURITY\_ATTRIBUTES** structure.</summary>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            <para>A pointer to a [**SECURITY\_DESCRIPTOR**](../winnt/ns-winnt-security_descriptor.md) structure that controls access to the object. If the value of this member is **NULL**, the object is assigned the default security descriptor associated with the [*access token*](/windows/win32/secauthz/access-tokens) of the calling process. This is not the same as granting access to everyone by assigning a **NULL** [*discretionary access control list*](/windows/win32/secauthz/dacls-and-aces) (DACL). By default, the default DACL in the access token of a process allows access only to the user represented by the access token. For information about creating a security descriptor, see [Creating a Security Descriptor](/windows/win32/secauthz/creating-a-security-descriptor-for-a-new-object-in-c--).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypesbase/ns-wtypesbase-security_attributes#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is **TRUE**, the new process inherits the handle.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute" /> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetterRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex" />-derived type for the GetterRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GetterRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetterRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetterRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner" /> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetterRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner" /> used by methods on <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetterRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetterRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan" /> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetterRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan" /> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetterRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan" /> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SetterRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex" />-derived type for the SetterRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SetterRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SetterRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SetterRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner" /> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SetterRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner" /> used by methods on <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SetterRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SetterRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan" /> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SetterRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan" /> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SetterRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan" /> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllCasesRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex" />-derived type for the AllCasesRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AllCasesRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllCasesRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllCasesRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner" /> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllCasesRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner" /> used by methods on <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllCasesRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllCasesRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan" /> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllCasesRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan" /> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex" />-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext" />, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout" /> is non-infinite.</summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>fXMX55RyQMW4f1L0ME+2KsAPbXW4Kgt+uUWvAjr7gIo=</DigestValue></Reference></SignedInfo><SignatureValue>f0z6PXXvtYp/eR9ZKIDKTlwPcJJFJSjs/QNzfxylBKn1pPKWTsv480PN4RG5ZVTSaZJAJ8yfRDmXQv8ZLom5/nvdX7jEOmPoaEdq3QQGqwoRan8HAgAvwBi6wFgfBcNrP9KD2yAMSXBtNNSV47fDW+GYEddSB5Imh8pIk7txs25O44WWMRo234HkXGxo1ubmQ4QBHTizLe14JsCkQClQ01QVmpDYQgGlQyiIYiYdOotNTctu5h9KBs0E1c7rHfUc7xJhn8izo3eXr9Adqz7HraR9qNwvPQjjuz0oUCa9gTVMIsP5AdPlTZ2EG4DJeYAHjv49Z12KIkUnXWN2AQOEWw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJjjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/TWO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO/WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9coT2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O0cEIvKdX8uG8oQa047+evMfDRr94MG9EWw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
