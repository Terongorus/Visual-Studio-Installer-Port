<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot.Service</name>
    </assembly>
    <members>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.ApiVersionDepreciatedMessageHandler.ApiVersionDepreciatedStatusCode">
            <summary>
            The status code returned by the API when the version is no longer supported.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.ApiVersionMessageHandler">
            <summary>
            Add the currently used API version to the requests.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotApexTestsAuthenticationMessageHandler">
            <summary>
            A message handler that adds the request headers required for authenticating
            with the Copilot API with an integration id and HMAC key.
            This is used when the product is running under automation tests, to get around
            the need to be signed in to a GitHub account.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.CopilotApexTestsAuthenticationMessageHandler._currentGitHubUserId">
            <summary>
            The index of the user id to send in the request. When rate limited, we
            increment this to switch to the next user id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.CopilotApexTestsAuthenticationMessageHandler.Authenticate(System.Net.Http.Headers.HttpRequestHeaders)">
            <summary>
            Authenticates an outbound request to a copilot endpoint.
            </summary>
            <param name="headers">The collection to add authenticating headers to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.CopilotApexTestsAuthenticationMessageHandler.ProcessHmacKey(System.String)">
            <summary>
            Sets the HMAC key to use for authenticating requests.
            </summary>
            <param name="hmacKey">The HMAC key. While the key may look like hex-encoded bytes, it is actually an arbitrary string that will be ASCII encoded from chars to bytes (i.e. NOT hex decoded) to get the key.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotEditsSessionRequestHeaderHandler">
            <summary>
            Handles addition of the Openai-Intent header, and it also makes sure that Copilot-Integration-Id headers are present in the request.
            This is needed to ensure that we signal CAPI that we want to generate an HMAC token with the request, which we can later use to bypass RAI filters on code mapping requests.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotEditsSessionResponseHeaderHandler">
             <summary>
             Handles the Copilot-Edits-Session header. This header contains a short lived token that is returned from the Copilot API
             when the Openai-Intent header is set to one of "conversation-edits", "conversation-panel", "conversation-inline", "conversation-agent".
             This Copilot-Edits-Session header can then be used code mapping with the instant apply endpoint to bypass all
             RAI filters.
            
             https://github.com/microsoft/vscode-copilot/issues/9835
             https://github.com/github/copilot-api/blob/747fa5cba18ed711bf0e88a406d447e51fcbc38f/pkg/speculativedecoding/speculativedecoding.go#L23C1-L23C101
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotEditsSessionSpecDecodingRequestHeaderHandler">
            <summary>
            This part ensures the Copilot-Edits-Session header is added to the request when a token exists.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer">
            <summary>
            Lazily initializing implementation container for <see cref="T:Microsoft.VisualStudio.Conversations.Service.ServiceTarget" />
            It is not valid to call the client's rpc target until the service has been created (so, ServiceFactory.CreateAsync has returned)
            But this presents a problem if any of our services need to call the client's rpc target during initialization.
            Adding this extra layer allows our services to have client rpc dependencies injected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer.UITestRequestCacheDirectoryEnvVarName">
            <summary>
            Optional environment variable to specify the directory where the request cache should be found.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer.UITestFullyQualifiedTestCaseEnvVarName">
            <summary>
            Optional environment variable to specify the test case being run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer.UITestDisableSnippyEnvVarName">
            <summary>
            Optional environment variable to specify if Snippy should be disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer.UITestRequestCacheCacheHashInputsEnvVarName">
            <summary>
            Optional environment variable to specify additional inputs to hash when creating the request cache e.g. "version=1.2;iteration=3".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer.DefaultProxyEnvironmentVariableName">
            <summary>
            Environment variable for gating default proxy creds usage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainer.GetRemoteAgentMetadataAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainerAssemblyLoadWrapper">
            <summary>
            Outer layer of indirection for constructing the copilot service.
            Exposes an interface to ServiceFactory which contains no types that reference other Conversations assemblies.
            This allows ServiceFactory to be loaded even if they are missing, and that lets us send panic telemetry &amp; log the failure to disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainerAssemblyLoadWrapper.CreateServiceContainer(System.IServiceProvider,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Creates the service container. Returns an 'object' type so that the ServiceFactory, which references this, can be loaded.
            </summary>
            <returns>A CopilotServiceContainer, but it's an object instead of the specific type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.CopilotServiceContainerAssemblyLoadWrapper.GetServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Gets the service descriptor. Hides the reference to ServiceIdentity from the caller.
            </summary>
            <returns>This service's descriptor.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.CopilotTestsGetQuotaMessageHandler">
            <summary>
            A mock message handler that returns a predefined response for the GetQuota API call.
            This is used when the product is running under automation tests, to get around
            the endpoint returning an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.CopilotTokenAuthenticatingMessageHandler.#ctor(Microsoft.VisualStudio.Conversations.CopilotClient.CopilotTokenManagerProxyClient,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Conversations.Service.CopilotTokenAuthenticatingMessageHandler" /> class.
            </summary>
            <param name="copilotTokenManager"></param>
            <param name="enableSKUIsolation">If SKU isolation endpoint needs to be used.</param>
            <param name="useGitHubToken">If true GitHub token (gho_*) will be used instead.</param>
            <param name="useProxyEndpoint">If the proxy endpoint needs to be used. The API endpoint will be used by default.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ClarifyResponseIntent">
            <summary>
            The goal of <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ClarifyResponseIntent" /> is to take in an ambiguous user interaction and guide the user on how to clarify their request given available context in a natural way.
            Ultimately <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ClarifyResponseIntent" /> relies on the <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ResponseIntentSelector" /> to call it ONLY when there's ambiguity. Once called we're effectively able to educate users on
            available context's or at least give them an idea of potential areas for exploration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ClarifyResponseIntent.#ctor(System.String,Conversations.Kernel.ILLMClient,Conversations.Shared.Options.IMarshaledCopilotOptions)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ClarifyResponseIntent" />.
            </summary>
            <param name="detectedAmbiguity">A natural language description of the ambiguity detected in the request that needs to be clarified.</param>
            <param name="client">The client used to talk to an LLM</param>
            <param name="options">Exposes options</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.RespondIntent">
            <summary>
            The goal of <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.RespondIntent" /> is to take in a user interaction and respond to it in an informed, natural way. Ultimately you can think of this as
            a "super intent" that encourages the model to follow a certain set of guidelines when responding BUT ultimately relies on <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ResponseIntentSelector" /> to
            call it ONLY when there's enough information to properly respond.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ResponseIntentSelector">
            <summary>
            The goal of <see cref="T:Microsoft.VisualStudio.Conversations.Service.ExperimentalChat.ResponseIntentSelector" /> is to take in a user interaction and determine if we need to gain clarification OR if we need to respond to the user directly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.Mcp.Auth.AuthProviderExtensions">
            <summary>
            Will replace this with another PR after this merges,
            https://github.com/modelcontextprotocol/csharp-sdk/pull/377
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.Mcp.McpConfigurationExtensions">
            <summary>
            Extension methods for mcp.json deserialized objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpInputsManager.DetokenizeScope.McpJsonPath">
            <summary>
            Gets the fully-qualified path to the mcp.json file.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.ToolsChanged">
            <summary>
            Occurs when the list of tools changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.Subscribe(System.IObserver{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor}})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider.SubscribeForFunctionsAsync(System.IObserver{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotFunctionDescriptor}},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.RestartServerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.RestartServerAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.SuspendServerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.SuspendServerAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.GetFunctionDescriptorsAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionProvider.GetFunctionsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.InvokeAsync(Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation,Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotFunctionHandler.InvokeAsync(Microsoft.VisualStudio.Copilot.CopilotFunctionInvocation,Microsoft.VisualStudio.Copilot.CopilotFunctionInvocationContext,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.IsMcpJsonTrackedAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.IsMcpJsonTrackedAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.GetInputsCountAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.GetInputsCountAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpManager.SubscribeServerStatusAsync(System.String,System.String,System.IObserver{Microsoft.VisualStudio.Copilot.McpServerStatus},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMcpFunctionProvider.SubscribeServerStatusAsync(System.String,System.String,System.IObserver{Microsoft.VisualStudio.Copilot.McpServerStatus},System.Threading.CancellationToken)" />
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerCache.CachedState.CurrentVersion">
            <summary>
            A version number that is included in the cache file name.
            Increment it any time there's a serialization format change or anything else that
            warrants discarding old cache files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.TraceSource">
            <summary>
            Gets the trace source used for logging.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.Id">
            <summary>
            Gets the user-assigned ID for the server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.Configuration">
            <summary>
            Gets the server configuration used to construct the server and client.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.ConfiguredPath">
            <summary>
            Gets the path to the file where the server is configured.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.Initialize">
            <summary>
            Ensures that this instance has initialized.
            </summary>
            <remarks>
            This method must be called <em>after</em> any calls to <see cref="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.Disable(System.String)" /> or <see cref="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.Eclipse(System.String)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.GetToolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the tools offered by this server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpServerTracker.RestartAsync(System.Threading.CancellationToken)">
            <summary>
            Restarts the client connection and refreshes the tools list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ConfirmToolArgumentHeader">
            <summary>Value</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ToolInputsHeading">
            <summary>Tool arguments:</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ConfirmToolParameterNameHeader">
            <summary>Name</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ConfirmToolTitle">
            <summary>Run {function}</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatConfirmToolTitle(System.Object)">
            <summary>Run {function}</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ExecutedFunction">
            <summary>Ran {functionName}</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatExecutedFunction(System.Object)">
            <summary>Ran {functionName}</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ExecutingFunction">
            <summary>Running {functionName}</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatExecutingFunction(System.Object)">
            <summary>Running {functionName}</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FunctionExecutionRejected">
            <summary>Tool invocation rejected by user.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.McpInputPrompt">
            <summary>The '{serverName}' MCP server requests you provide it with the following: {description}</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatMcpInputPrompt(System.Object,System.Object)">
            <summary>The '{serverName}' MCP server requests you provide it with the following: {description}</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.McpInputTitle">
            <summary>Input required for MCP server '{serverName}'</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatMcpInputTitle(System.Object)">
            <summary>Input required for MCP server '{serverName}'</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ServerActivationFailed">
            <summary>Activation of the server '{server}' failed.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatServerActivationFailed(System.Object)">
            <summary>Activation of the server '{server}' failed.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.ToolUseAdvisory">
            <summary>ℹ️ This tool is from '{server}' (MCP Server). Note that MCP servers or malicious conversation content may attempt to misuse Visual Studio through tools. Please carefully review any requested actions.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.FormatToolUseAdvisory(System.Object)">
            <summary>ℹ️ This tool is from '{server}' (MCP Server). Note that MCP servers or malicious conversation content may attempt to misuse Visual Studio through tools. Please carefully review any requested actions.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.InputsRequired">
            <summary>This MCP server configuration requires user input.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.AuthenticationTokenEmpty">
            <summary>This MCP server requires authorization. Use the 'Manage authentication' command to authorize.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.AdditionalPermissionsRequired">
            <summary>Additional permissions are required.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.CannotDisableStartedServer">
            <summary>Cannot disable a server that has already started.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.CannotCreateClientForDisabledServer">
            <summary>Cannot create a client for a disabled MCP server.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Mcp.McpStrings.CannotCreateClientForEclipsedServer">
            <summary>Cannot create a client for an eclipsed MCP server.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.ServiceFactory">
            <summary>
            Constructs the service implementation. If this class throws, normally the only way to tell is looking at ServiceHub logs,
            and the client will likely be unaware of any issue.
            We add extra logging to a panic log file in %TEMP%\VSGitHubCopilotLogs\ServiceActivationFailures.log,
            as well as best-effort telemetry.
            This class should also not reference any of our other assemblies, or any types that reference them, because if they are missing,
            this class needs to be loadable or else we will not be able to report the problem.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.ServiceFactory.RunId">
            <summary>
            Unique ID for this run of the service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.ServiceFactory.Instance">
            <summary>
            Gets or sets singleton instance of the service, it should only be initialized one time.
            Not strongly typed so we avoid referencing other assemblies in this class, though that
            may not be a relevant concern anymore.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.ServiceFactory.ServiceProcessOneTimeSetup(System.IServiceProvider)">
            <summary>
            Perform initialization that should only happen once per service process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.ServiceFactory.WritePanicLog(System.Exception,System.String)">
            <summary>
            Write an exception to the panic log file.
            </summary>
            <param name="exception">Exception to write</param>
            <param name="message">The error message.</param>
            <returns>The same exception argument passed in, unless writing failed, in which case it'll be an AggregateException that also contains the argument</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.ServiceFactory.PanicInitializationTelemetry(System.String,System.Exception,Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Attempt to send telemetry when the service critically fails to initialize.
            Uses hardcoded constants to avoid external references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.ServiceTarget.GetRemoteAgentMetadataAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.ServiceTarget.GetGitHubKnowledgeBasesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache">
            <summary>
            This class implements a file-based persistent cache for Copilot model requests and responses.
            Requests are cached based on a hash of the API endpoint and the JSON request payload.
            The file structure on disk is {cacheRootDirectory}/{sha256(apiUrl + requestPayload)}.json.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.CacheVersion">
            <summary>
            Bump this version number to force a cache miss and repopulate the cache with fresh requests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.AdditionalHashInputs">
            <summary>
            Additional metadata to include in the hash for each request. Also logged in the cache file for reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.AdditionalHashInputsSorted">
            <summary>
            A sorted version of <see cref="P:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.AdditionalHashInputs" />. Used to ensure consistent hash computation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.AdditionalMetadataToStore">
            <summary>
            Additional metadata to store on any items that are added to the cache. Does not affect the hash computation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.#ctor(System.String,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.Extensions.Logging.ILogger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache" /> class.
            </summary>
            <param name="rootDirectory">The root directory for the cache, independent of test iteration.</param>
            <param name="iteration">The test iteration. Each test iteration stores independent/unique cached content within the cache.</param>
            <param name="additionalHashInputs">Additional inputs to include in the hash for each request.</param>
            /// <param name="metadataToStore">Additional metadata to include on any items that are added to the cache.</param>
            <param name="logger">The logger to use.</param>
            <param name="useStaleCacheEntries">Indicates whether to use request cache files that are considered stale (i.e. older than 28 days).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.SetAsync(System.String,System.Uri,System.Net.HttpStatusCode,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.GetAsync(System.String,System.Uri,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.GetMetrics">
            <summary>
            Gets and logs the current cache metrics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.GetCacheFilePath(System.String,System.Uri)">
            <summary>
            Get the path on disk where a given request should be located. The path is based on a hash of the API endpoint
            and the HTTP request payload, which is typically a JSON string. The API endpoint is included in the hash in
            order to support testing new API endpoints with the same payload, which would otherwise collide in the cache.
            </summary>
            <param name="requestPayload">The HTTP request payload.</param>
            <param name="apiEndpoint">The Uri to the HTTP endpoint where the request is being made.</param>
            <returns>The path on disk that should be used for caching this request.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.CombineMetadata(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Returns the full metadata dictionary to use, combining cache entry-specific metadata with any additional
            global metadata for the cache.
            </summary>
            <param name="metadata">The optional cache entry-specific metadata dictionary to use.</param>
            <returns>The combined metadata dictionary to persist.</returns>
            <remarks>If the same metadata key exists in both global and entry-specific metadata dictionaries, the
            entry-specific one takes precedence.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.TestCopilotRequestCache.NormalizeEscapedLineEndings(System.String)">
            <summary>
            This is a hack to normalize escaped line endings in the request payload since the Copilot extension generates
            a lot of model inputs with Environment.NewLine, which is \n on Unix and \r\n on Windows. Those new line endings end
            up as escaped "\r" and "\r\n" strings in the HTTP request JSON payloads. In order to have cache hits across both
            platforms, we need to normalize line endings on the request input before hashing it.
            </summary>
            <param name="input">The input which might have mixed line endings.</param>
            <returns>The input with normalized line endings.</returns>
        </member>
        <member name="M:Conversations.Shared.RetryAuthHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Checks if response had an auth error. If yes, refreshes the Copilot token and retries the request.
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>Xc+s262XL/QbrviATZm+NSLN37tkOdOVnUb6zSe9JA4=</DigestValue></Reference></SignedInfo><SignatureValue>lAFH1CeGosij1cb1/1A3HFInpbn7ZJ6/Yl63CLWjDSi3bem5nT6i2mVIJVi2UWHCG/nXNzvOus9nSZOe9zCFcMJ86uSgi5sHeHLHR33HKVyq7l34Rv4bRMo4IgJjt1581LqK5DIACYaqydFS+PM3qG2XNF41b+bkHDbw+myHEF163l+jUmJ/l2DWtEUNOziEt3UhccNUxT3w+B1cbwdoOE4JWx1SV3+IxsXyukcvi13SHqoL4mWpfkae6CIzob01oXs3xrjgca3JsX0vdniy0e7mi9sWdMOx+BVFiUvpdpxOgJ8m2ubBuUGGJ9pFqXrML9L7bSE1zP6qZJ5dhwrklA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>n3RnXcCDp20WFMoNNzt4s9fV12T5roRJlv+bshDfvJoMZfhyRnixgUfGAbrRlS1St/EcXFXD2MhRkF3CnMYIoeMOMuMyYtxr2sC2B5bDRMUMM/r9I4GP2nowUthCWKFIS1RPlM0YoVfKKMaH7bJii29sW+waBUulAKN2c+Gn5znaiOxRqIu4OL8f9DCHYpME5+Teek3SL95sH5GQhZq7CqTdM0fBw/FmLLx98SpBu7v8XapoTz6jJpyNozhcP/59mi/Fu4tT2rI2vD50Vx/0GlR9DNZ2py/iyPU7DG/3p1n1zluuRp3uXKjDfVKH7xDbXcMBJid22a3CPbuC2QJLow==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
